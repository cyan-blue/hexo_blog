{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/resume.css","path":"vendors/resume.css","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/site.xml","path":"site.xml","modified":0},{"_id":"themes/next/source/resume.html","path":"resume.html","modified":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0},{"_id":"themes/next/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":0},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":0},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":0},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":0},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont.svg","path":"fonts/lato/lato-regita-webfont.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont-g.woff","path":"fonts/lato/lato-regita-webfont-g.woff","modified":0},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont-g.ttf","path":"fonts/lato/lato-regita-webfont-g.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont-g.eot","path":"fonts/lato/lato-regita-webfont-g.eot","modified":0},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont.svg","path":"fonts/lato/lato-reg-webfont.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont-g.woff","path":"fonts/lato/lato-reg-webfont-g.woff","modified":0},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont-g.ttf","path":"fonts/lato/lato-reg-webfont-g.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont-g.eot","path":"fonts/lato/lato-reg-webfont-g.eot","modified":0},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont.svg","path":"fonts/lato/lato-ligita-webfont.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont-g.woff","path":"fonts/lato/lato-ligita-webfont-g.woff","modified":0},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont-g.ttf","path":"fonts/lato/lato-ligita-webfont-g.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont-g.eot","path":"fonts/lato/lato-ligita-webfont-g.eot","modified":0},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont.svg","path":"fonts/lato/lato-lig-webfont.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont-g.woff","path":"fonts/lato/lato-lig-webfont-g.woff","modified":0},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont-g.ttf","path":"fonts/lato/lato-lig-webfont-g.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont-g.eot","path":"fonts/lato/lato-lig-webfont-g.eot","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont.svg","path":"fonts/lato/lato-bolita-webfont.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont-g.woff","path":"fonts/lato/lato-bolita-webfont-g.woff","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont-g.ttf","path":"fonts/lato/lato-bolita-webfont-g.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont-g.eot","path":"fonts/lato/lato-bolita-webfont-g.eot","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont.svg","path":"fonts/lato/lato-bol-webfont.svg","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont-g.woff","path":"fonts/lato/lato-bol-webfont-g.woff","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont-g.ttf","path":"fonts/lato/lato-bol-webfont-g.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont-g.eot","path":"fonts/lato/lato-bol-webfont-g.eot","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"themes/next/source/baidu_verify_swRnZfPIeR.html","path":"baidu_verify_swRnZfPIeR.html","modified":0},{"_id":"themes/next/source/README","path":"README","modified":0},{"_id":"themes/next/source/LICENSE","path":"LICENSE","modified":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0},{"_id":"themes/next/source/resume_back.html","path":"resume_back.html","modified":1}],"Cache":[{"_id":"source/_posts/2015/10/09/Django-Notes.md","shasum":"fa1afbffb4eaaad29be50272a82402ca4e4de7ca","modified":1446020796000},{"_id":"source/_posts/2015/10/12/Css.md","shasum":"a4971244b05ee5430f2411be2f7198b37d4f212b","modified":1446020822000},{"_id":"source/_posts/2015/10/12/Django.md","shasum":"0f99705275adfe37a632a48409182d9b8e77bd19","modified":1447232898000},{"_id":"source/_posts/2015/10/09/github-user-pwd.md","shasum":"a76102a3302b42f804553b11dbc47272725498b2","modified":1446207641000},{"_id":"source/_posts/2015/10/12/technology.md","shasum":"0d6cd71027b981011cb0f617f000bf508ee7fbac","modified":1446020904000},{"_id":"source/_posts/2015/10/09/Git-Use.md","shasum":"be891de1e6049a06f495495a3228c1258f1216fd","modified":1446020813000},{"_id":"source/_posts/2015/10/12/Markdown.md","shasum":"4caf028ce5745db4c7e86ceec5284324362145a1","modified":1446207863000},{"_id":"source/_posts/2015/10/12/JS.md","shasum":"bce7f07dfcf3488a9f431a3b59cf792a4c3fb1e0","modified":1446207657000},{"_id":"source/_posts/2015/10/17/python复制.md","shasum":"29ce8889eca07e9281f3037a7c500536fd0b41cf","modified":1446207737000},{"_id":"source/_posts/2015/10/20/python-date.md","shasum":"6bed91e0bfa9a3e738ac7d82dfe3df8bc2b9947c","modified":1446207737000},{"_id":"source/_posts/2015/10/13/python_question.md","shasum":"fc501e29635fbba999d0d0318e0451ecde2eee35","modified":1446207678000},{"_id":"source/_posts/2015/10/24/mysql-use.md","shasum":"563446706bcfd4663623baed724650c217aa4507","modified":1446772613000},{"_id":"source/_posts/2015/10/24/nodejs.md","shasum":"3f79e39362843624de73f0b9937c022bfac952e3","modified":1446207737000},{"_id":"source/_posts/2015/10/21/django-install-problem.md","shasum":"0f39d5130af158d42d5c769b3dbf36e0a506135a","modified":1446732866000},{"_id":"source/_posts/2015/10/30/deleteLinux历史记录.md","shasum":"f5945054bdce4aa1bb9428f0d59e724890306f90","modified":1446193298000},{"_id":"source/_posts/2015/10/29/django-favicon.md","shasum":"07423c438a0362e891bc1d02be1ac3cc43045fae","modified":1446122810000},{"_id":"source/_posts/2015/10/14/linux.md","shasum":"4c7de55e1b9f8d0f7a8003be85f10db2440c7367","modified":1446111633000},{"_id":"source/_posts/2015/10/15/html.md","shasum":"0fe57f8913bd05ea4e8427212891ccdbc37ee453","modified":1446207678000},{"_id":"source/_posts/2015/11/02/python之input.md","shasum":"edc3ce47a1f9c58767fb9c0952dbd9b42041fc23","modified":1446441649000},{"_id":"source/_posts/2015/10/30/python列表解析.md","shasum":"b032aed705f8df135a42f69d5af51721623abee2","modified":1446210550000},{"_id":"source/_posts/2015/10/30/html5之checkbox.md","shasum":"4dfd9ce14f603e8c8bdf87434f4b86afd67814f4","modified":1446204843000},{"_id":"source/_posts/2015/10/30/python之ord.md","shasum":"dfabb09a2d3b76cf1ef8d1e3802fbb74f6c5d05c","modified":1446207623000},{"_id":"source/_posts/2015/11/03/mysql之1292.md","shasum":"f128b8c19ffabf793f264e6de52589e57d4856f2","modified":1446518609000},{"_id":"source/_posts/2015/11/05/js之闭包.md","shasum":"f6d6b9c0382e1ebbac1adaef8dfde08c19d41ce2","modified":1446792624000},{"_id":"source/_posts/2015/11/06/vim之使用.md","shasum":"eabdc61158f6b5e1ed42e5ed103c375bb157a528","modified":1446869802000},{"_id":"source/_posts/2015/11/05/ubuntu之装机必备.md","shasum":"6875fb4b8fdd4874c1a2891c30ffa1aad9045676","modified":1446861300000},{"_id":"source/_posts/2015/11/07/django之温故知新1.md","shasum":"fe6fae0a598182c4bf8e70684c626948c0ca6640","modified":1446861795000},{"_id":"source/_posts/2015/11/09/mysql之update.md","shasum":"3ed16b4e1e544c2505448108c64b3ebdfc484305","modified":1447037008000},{"_id":"source/_posts/2015/11/10/django之外键的删除.md","shasum":"5afce2a222646525e59c234c888070c9bdd949ff","modified":1447135746000},{"_id":"source/_posts/2015/11/10/mysql之修改字段默认值.md","shasum":"e6425556972fd00026792e7f48afaa8841ea2651","modified":1447146086000},{"_id":"source/_posts/2015/11/11/mysql之作业.md","shasum":"32f3363551576b447a02582c6d9fbab253dee783","modified":1447234081000},{"_id":"source/_posts/2015/11/06/django之related-name.md","shasum":"61574c885cac6e47faf2961d89e525ac2358adf3","modified":1446876314000},{"_id":"source/about/index.md","shasum":"e8d8f7dfa26c2caf3826de27e60d06100ea01d22","modified":1444296803000},{"_id":"source/_posts/2015/11/07/vim之格式化代码.md","shasum":"888e2d8734cfb3b53c1f154f35f536975d121145","modified":1447036933000},{"_id":"source/guestbook/index.md","shasum":"51239d273cfa95bcbfb71848a9fae673d74ab691","modified":1444296803000},{"_id":"source/tags/index.md","shasum":"655f5c0536560911a9380843767267e519360092","modified":1445088458000},{"_id":"source/categories/index.md","shasum":"18eca7b13c736b02385f8b465803d26177f3b7d0","modified":1445088578000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1444296803000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1444296803000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1444296803000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1444296803000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1444296803000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1444296803000},{"_id":"source/_posts/2015/11/06/linux之缓存.md","shasum":"304505b227353d5b338b214ddf24c6250c98533a","modified":1446792794000},{"_id":"themes/next/_config.yml","shasum":"6649947164d4f09811469c7aaf80f2fa9315ad38","modified":1447228420000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1444296803000},{"_id":"themes/next/bower.json","shasum":"1bdb0641bdcb9b5b154d2e379c57fe5675f06b9c","modified":1444296803000},{"_id":"themes/next/languages/de.yml","shasum":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1444296803000},{"_id":"themes/next/README.md","shasum":"3319de8565699fc9642f76c41ee96b50f2234b6a","modified":1444296803000},{"_id":"themes/next/languages/default.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1444296803000},{"_id":"themes/next/languages/en.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1444296803000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"6d097445342a9fb5235afea35d65bf5271b772f0","modified":1444296803000},{"_id":"themes/next/languages/ru.yml","shasum":"b4a827b9ddac9d5f6dca096fe513aeafb46a3e93","modified":1444296803000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"d000613ecb7b3daa36cb507abaa6123eee8ae53b","modified":1444296803000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"3fc38103c9efa6f6c37149adbddb014ff85ec849","modified":1444296803000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"8897a06e521b36c7a1226c72057c8357611eded8","modified":1444296803000},{"_id":"themes/next/layout/_layout.swig","shasum":"56acb341e0ced83b0ae24861450a7e7fa903e56b","modified":1444296803000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"42927bdde998cefd3cf4f19b0476d69bd9e5116a","modified":1444296803000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"44d513401032362655c40cae66e579dba8dd3d85","modified":1444296803000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"598b3085b6b74f4664eb66e6ae8737920e07d7a9","modified":1444296803000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"208d81dbb98bbd522b568361ed01f1f187add181","modified":1444890438000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"b0c467b42073270db7db41907ce8881f64bf3793","modified":1444372487000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"b39cc596367cf7cef0791c5aaa1dbd8a54160415","modified":1444384930000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1444296803000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"2f92046e0b50ebd65abb7045b1cbbfc50abbb034","modified":1444296803000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1444296803000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1444296803000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"d6c7f04eee4388d8f133eb5526b7c0875c321a30","modified":1444296803000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1447139907000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1444296803000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1444296803000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"38403680433dfa4a0523448495986a3306cd9d95","modified":1446184330000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1444296803000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1444296803000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1444296803000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"63b9648dcc03dc2536a7a887185fb15acfabceb4","modified":1444296803000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1444296803000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1444296803000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1444296803000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1444296803000},{"_id":"themes/next/layout/archive.swig","shasum":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1444296803000},{"_id":"themes/next/layout/category.swig","shasum":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1444296803000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1444296803000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1447139907000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"0ebbf76c2317faa8ba31365adba59331c2e0262c","modified":1444296803000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"dfd147d1317e56d283f5e779f00608e913603b51","modified":1444296803000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"37274f743c2054244dcbbde56fba9ff353414281","modified":1444296803000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"0d69739d1bad5861a4a6ff2db511c3669783e438","modified":1444296803000},{"_id":"themes/next/layout/tag.swig","shasum":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1444296803000},{"_id":"themes/next/layout/index.swig","shasum":"bb6099879b841865c0016a3d3a19b4fb19a83bb4","modified":1446119148000},{"_id":"themes/next/source/404.html","shasum":"4a0d9ade0dee916eede2f4f7c54a245ecfaea3f1","modified":1446120290000},{"_id":"themes/next/source/LICENSE","shasum":"702c4322e3cb936294690608b59f8b60b1fc8d30","modified":1444296803000},{"_id":"themes/next/source/README","shasum":"3f15f4a56fc4b56c0a5a536c15034439b84e3382","modified":1444296803000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1444296803000},{"_id":"themes/next/source/baidu_verify_swRnZfPIeR.html","shasum":"c0abc1613ffb97e011aa114d1ba7dd9519533ee7","modified":1444386831000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1444296803000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1444296803000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"e79a08484b191dca14ccfc005053eb95786dafae","modified":1444296803000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1444296803000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"cbd7f1d5c72e3024b5d70dafb6ca93e2723652ab","modified":1444296803000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"f142a185fda68bc579e89ead9a31bc8fa0f3ca8c","modified":1444296803000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1444296803000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1444296803000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1444296803000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1444296803000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1444296803000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1444296803000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1444296803000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1444296803000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1444296803000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1444296803000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9","modified":1444296803000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1444296803000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1444296803000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"f3529b7da284c4b859429573c9b1004d32937e40","modified":1444296803000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1444296803000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"ed1360dfd016c40cce03421742362cabe3e581a0","modified":1444296803000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1444296803000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"f3f4fac628d0b588cb40795d498110d33b11ce26","modified":1444296803000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1444296803000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1444296803000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1444296803000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"d57e1769ebd2c472d2b27d17a706d3f564f94033","modified":1444296803000},{"_id":"themes/next/source/css/main.styl","shasum":"b05c342e94ded24a5f2b203cedf77d3faa817fd5","modified":1444296803000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1444296803000},{"_id":"themes/next/source/favicon.ico","shasum":"5b83c3906dae38f9b0cababfdf5f3f568f4f6af6","modified":1446121941000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1444296803000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"66e94d53e65a739c21111440b891d0d98068062b","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-default/selection.json","shasum":"dc07c29f687315f9458f6b251c214768af865fb2","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-feather/selection.json","shasum":"06ea91e3f98ebe1080087acad4356802bc5b6ebf","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"72fe82e1f3db52414eed706952d385af241cb196","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","shasum":"fdd09098d1c3688e2c88cf33fd51e76b383b6d7f","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1444296803000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1444296803000},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont-g.eot","shasum":"d81b9c592a23e3b1f76c3e77853a1d840f16bb71","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont-g.woff","shasum":"0098108f9e29ae4f265b755fb5979b1f72be6bbc","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont-g.eot","shasum":"6cd494d71a9fb9f435f7722bbda9d5e6a4893968","modified":1447228420000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1444296803000},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont-g.woff","shasum":"cd08800b3330fcd0a0d7849e684c62987985d686","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont-g.eot","shasum":"08b674c48040d26dd05870e708c3366e91c7fc35","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont-g.woff","shasum":"5f1c1daa92b017fbf6daff97762fcf74d44d2050","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont-g.eot","shasum":"1ebee478e43fd25cda0ab5d076ff9857b187788f","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont-g.woff","shasum":"c1075d00549cc21ec23efeb5d12fa8df91992887","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont-g.eot","shasum":"4b1e1edc29011cc3714f453a40ef0dabe0e949bf","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont-g.woff","shasum":"4deb7b9aa2d82b8675379c27a446523c0b5e01e8","modified":1447228420000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1444296803000},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont-g.eot","shasum":"4d2a5b3b5028f24f4c9669390ca0041067a6352e","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont-g.woff","shasum":"27eed88e72783a98c9c1e5b28715fac3c39ba0a3","modified":1447228420000},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","shasum":"db4ce25d31449ecc6685b32e145252103967bb5c","modified":1444296803000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1444296803000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1444296803000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1444296803000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1444296803000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1444296803000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1444296803000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1444296803000},{"_id":"themes/next/source/images/default_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1444296803000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1444296803000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1444296803000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1444296803000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1444296803000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"c9782bfa8c1e51a8f8541530d836e75f48a433c2","modified":1444296803000},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1444296803000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"ea30e91c6b7fdaa6dce4a848f25cdf90436b072a","modified":1444296803000},{"_id":"themes/next/source/js/lazyload.js","shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1444296803000},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1444296803000},{"_id":"themes/next/source/resume.html","shasum":"2c3025aec50e07ef9ced1fdd1efbc8f92dec5088","modified":1447556993565},{"_id":"themes/next/source/js/motion_global.js","shasum":"367e329b2cc19c6b7634ea2917a218c84a22ec17","modified":1444296803000},{"_id":"themes/next/source/js/nav-toggle.js","shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1444296803000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1444296803000},{"_id":"themes/next/source/site.xml","shasum":"9564af1f6537a43417188d5d5c74c0ac406409ba","modified":1444440653000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1444296803000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1444296803000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1444296803000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1444296803000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1444296803000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1444296803000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1444296803000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1444296803000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1444296803000},{"_id":"themes/next/source/vendors/resume.css","shasum":"dea2e30891264cd1ac4e362cf6ca68f4f0d0abab","modified":1447033438000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1444296803000},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont-g.ttf","shasum":"c330d59f3e64e07a2571c2ba4f4109b20a168f69","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-bol-webfont.svg","shasum":"bb6b59175da249ad5dc7e1d09babd763964b3f3b","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont-g.ttf","shasum":"2007f546660221940e9dc6b9a3cae9b72fbe17af","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-bolita-webfont.svg","shasum":"4867fa8a4d1d19791c47e49c28e802c48763fd23","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont-g.ttf","shasum":"6eb95108fef81bd8cfbf7e20d4ca0634e5989019","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-lig-webfont.svg","shasum":"2767d2e55cbe7216512594f49d828fc17f19089d","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont-g.ttf","shasum":"584f340776412f77f04de06ee04348ef823d5097","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-ligita-webfont.svg","shasum":"b72122e87cf25fbcfc4cf988930580c76822ba5f","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont-g.ttf","shasum":"127f241871a9fe42cd8d073a0835410f3824d57c","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-reg-webfont.svg","shasum":"bc48872ceb40822c44933566b789e63e16bdff0a","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont-g.ttf","shasum":"e4cea8035a258a869a6139fbf74e6d0c247bd49b","modified":1447228420000},{"_id":"themes/next/source/fonts/lato/lato-regita-webfont.svg","shasum":"0948ab7d5116011ea4fb2fe34be1da6294a332ee","modified":1447228420000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1444296803000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1444296803000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1444296803000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1444296803000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1444296803000},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1447228712135,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1447228712138,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1447228712140,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1447228712142,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1447228712149,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/resume.css","modified":1447228712151,"shasum":"dea2e30891264cd1ac4e362cf6ca68f4f0d0abab"},{"_id":"public/vendors/jquery/index.js","modified":1447228712152,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1447228712154,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1447228712155,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1447228712156,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1447228712165,"shasum":"4a6074903daa9004301ef30a6fb96556ba3eab60"},{"_id":"public/vendors/fastclick/LICENSE","modified":1447228712175,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1447228712177,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1447228712179,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1447228712180,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1447228712182,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1447228712183,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1447228712185,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1447228712186,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1447228712188,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1447228712191,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1447228712192,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1447228712196,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1447228712199,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1447228712201,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1447228712203,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1447228712206,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/site.xml","modified":1447228712209,"shasum":"9564af1f6537a43417188d5d5c74c0ac406409ba"},{"_id":"public/resume.html","modified":1447557006660,"shasum":"2c3025aec50e07ef9ced1fdd1efbc8f92dec5088"},{"_id":"public/js/ua-parser.min.js","modified":1447228712213,"shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a"},{"_id":"public/js/nav-toggle.js","modified":1447228712215,"shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220"},{"_id":"public/js/motion_global.js","modified":1447228712217,"shasum":"367e329b2cc19c6b7634ea2917a218c84a22ec17"},{"_id":"public/js/motion_fallback.js","modified":1447228712218,"shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"public/js/lazyload.js","modified":1447228712219,"shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf"},{"_id":"public/js/hook-duoshuo.js","modified":1447228712222,"shasum":"5f722b3967d50cc1e36efaa5e2a4a0ad464496b0"},{"_id":"public/js/helpers.js","modified":1447228712223,"shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"public/js/fancy-box.js","modified":1447228712224,"shasum":"c9782bfa8c1e51a8f8541530d836e75f48a433c2"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1447228712226,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/images/searchicon.png","modified":1447228712231,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/placeholder.gif","modified":1447228712233,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1447228712234,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/default_avatar.jpg","modified":1447228712236,"shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"public/images/cc-zero.svg","modified":1447228712239,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1447228712241,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1447228712245,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1447228712248,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1447228712250,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1447228712253,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1447228712255,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/fonts/lato/lato-regita-webfont.svg","modified":1447228712257,"shasum":"0948ab7d5116011ea4fb2fe34be1da6294a332ee"},{"_id":"public/fonts/lato/lato-regita-webfont-g.woff","modified":1447228712263,"shasum":"27eed88e72783a98c9c1e5b28715fac3c39ba0a3"},{"_id":"public/fonts/lato/lato-regita-webfont-g.ttf","modified":1447228712266,"shasum":"e4cea8035a258a869a6139fbf74e6d0c247bd49b"},{"_id":"public/fonts/lato/lato-regita-webfont-g.eot","modified":1447228712269,"shasum":"4d2a5b3b5028f24f4c9669390ca0041067a6352e"},{"_id":"public/fonts/lato/lato-reg-webfont.svg","modified":1447228712272,"shasum":"bc48872ceb40822c44933566b789e63e16bdff0a"},{"_id":"public/fonts/lato/lato-reg-webfont-g.woff","modified":1447228712274,"shasum":"4deb7b9aa2d82b8675379c27a446523c0b5e01e8"},{"_id":"public/fonts/lato/lato-reg-webfont-g.ttf","modified":1447228712276,"shasum":"127f241871a9fe42cd8d073a0835410f3824d57c"},{"_id":"public/fonts/lato/lato-reg-webfont-g.eot","modified":1447228712280,"shasum":"4b1e1edc29011cc3714f453a40ef0dabe0e949bf"},{"_id":"public/fonts/lato/lato-ligita-webfont.svg","modified":1447228712284,"shasum":"b72122e87cf25fbcfc4cf988930580c76822ba5f"},{"_id":"public/fonts/lato/lato-ligita-webfont-g.woff","modified":1447228712288,"shasum":"c1075d00549cc21ec23efeb5d12fa8df91992887"},{"_id":"public/fonts/lato/lato-ligita-webfont-g.ttf","modified":1447228712293,"shasum":"584f340776412f77f04de06ee04348ef823d5097"},{"_id":"public/fonts/lato/lato-ligita-webfont-g.eot","modified":1447228712295,"shasum":"1ebee478e43fd25cda0ab5d076ff9857b187788f"},{"_id":"public/fonts/lato/lato-lig-webfont.svg","modified":1447228712298,"shasum":"2767d2e55cbe7216512594f49d828fc17f19089d"},{"_id":"public/fonts/lato/lato-lig-webfont-g.woff","modified":1447228712300,"shasum":"5f1c1daa92b017fbf6daff97762fcf74d44d2050"},{"_id":"public/fonts/lato/lato-lig-webfont-g.ttf","modified":1447228712303,"shasum":"6eb95108fef81bd8cfbf7e20d4ca0634e5989019"},{"_id":"public/fonts/lato/lato-lig-webfont-g.eot","modified":1447228712306,"shasum":"08b674c48040d26dd05870e708c3366e91c7fc35"},{"_id":"public/fonts/lato/lato-bolita-webfont.svg","modified":1447228712309,"shasum":"4867fa8a4d1d19791c47e49c28e802c48763fd23"},{"_id":"public/fonts/lato/lato-bolita-webfont-g.woff","modified":1447228712312,"shasum":"cd08800b3330fcd0a0d7849e684c62987985d686"},{"_id":"public/fonts/lato/lato-bolita-webfont-g.ttf","modified":1447228712315,"shasum":"2007f546660221940e9dc6b9a3cae9b72fbe17af"},{"_id":"public/fonts/lato/lato-bolita-webfont-g.eot","modified":1447228712318,"shasum":"6cd494d71a9fb9f435f7722bbda9d5e6a4893968"},{"_id":"public/fonts/lato/lato-bol-webfont.svg","modified":1447228712320,"shasum":"bb6b59175da249ad5dc7e1d09babd763964b3f3b"},{"_id":"public/fonts/lato/lato-bol-webfont-g.woff","modified":1447228712323,"shasum":"0098108f9e29ae4f265b755fb5979b1f72be6bbc"},{"_id":"public/fonts/lato/lato-bol-webfont-g.ttf","modified":1447228712325,"shasum":"c330d59f3e64e07a2571c2ba4f4109b20a168f69"},{"_id":"public/fonts/lato/lato-bol-webfont-g.eot","modified":1447228712328,"shasum":"d81b9c592a23e3b1f76c3e77853a1d840f16bb71"},{"_id":"public/fonts/icon-linecons/selection.json","modified":1447228712330,"shasum":"68da6ea1b3ab9355d42694bf5745071cdefa4a65"},{"_id":"public/fonts/icon-linecons/icomoon.woff","modified":1447228712332,"shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8"},{"_id":"public/fonts/icon-linecons/icomoon.ttf","modified":1447228712336,"shasum":"078068206684e4f185b0187ad3cee16f54a287d7"},{"_id":"public/fonts/icon-linecons/icomoon.svg","modified":1447228712338,"shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b"},{"_id":"public/fonts/icon-linecons/icomoon.eot","modified":1447228712341,"shasum":"e2d7f040428a632f3c50bfa94083b759936effc2"},{"_id":"public/fonts/icon-icomoon/icomoon.woff","modified":1447228712342,"shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","modified":1447228712344,"shasum":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"public/fonts/icon-icomoon/icomoon.svg","modified":1447228712346,"shasum":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"public/fonts/icon-icomoon/icomoon.eot","modified":1447228712348,"shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"public/fonts/icon-fifty-shades/selection.json","modified":1447228712352,"shasum":"e5a5042e8e516b1d30fa3b1206d2c74921cec72b"},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","modified":1447228712355,"shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448"},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","modified":1447228712359,"shasum":"72fe82e1f3db52414eed706952d385af241cb196"},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","modified":1447228712365,"shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d"},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","modified":1447228712367,"shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5"},{"_id":"public/fonts/icon-feather/selection.json","modified":1447228712369,"shasum":"d95a90b0d541e48b049902090c0d008ad92b4115"},{"_id":"public/fonts/icon-feather/icomoon.woff","modified":1447228712374,"shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5"},{"_id":"public/fonts/icon-feather/icomoon.ttf","modified":1447228712375,"shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f"},{"_id":"public/fonts/icon-feather/icomoon.svg","modified":1447228712380,"shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41"},{"_id":"public/fonts/icon-feather/icomoon.eot","modified":1447228712383,"shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd"},{"_id":"public/fonts/icon-default/selection.json","modified":1447228712385,"shasum":"ff1b9b78eced4d0368d14cc192ac67a0dd498593"},{"_id":"public/fonts/icon-default/icomoon.woff","modified":1447228712387,"shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8"},{"_id":"public/fonts/icon-default/icomoon.ttf","modified":1447228712390,"shasum":"c093408e6030221cafc1f79d897f1fb5283c1178"},{"_id":"public/fonts/icon-default/icomoon.svg","modified":1447228712392,"shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e"},{"_id":"public/fonts/icon-default/icomoon.eot","modified":1447228712394,"shasum":"90763e97be18be78e65749075225cceeddc6fa8a"},{"_id":"public/favicon.ico","modified":1447228712396,"shasum":"5b83c3906dae38f9b0cababfdf5f3f568f4f6af6"},{"_id":"public/css/main.css","modified":1447228712841,"shasum":"2e0b03ee9d5f89fa18ac322c831db9951d89d1a0"},{"_id":"public/baidu_verify_swRnZfPIeR.html","modified":1447228712965,"shasum":"c0abc1613ffb97e011aa114d1ba7dd9519533ee7"},{"_id":"public/README","modified":1447228712966,"shasum":"3f15f4a56fc4b56c0a5a536c15034439b84e3382"},{"_id":"public/LICENSE","modified":1447228712970,"shasum":"702c4322e3cb936294690608b59f8b60b1fc8d30"},{"_id":"public/404.html","modified":1447228712972,"shasum":"4a0d9ade0dee916eede2f4f7c54a245ecfaea3f1"},{"_id":"public/tags/index.html","modified":1447228839979,"shasum":"ea37c1f9d34ee76699c87543296b745468d8a11e"},{"_id":"public/guestbook/index.html","modified":1447228713074,"shasum":"6c54d9a95c4194bf6d4e8fcd53f011e6179795f9"},{"_id":"public/categories/index.html","modified":1447228840054,"shasum":"a92daa8c1288c8767eb83db1781dd05f4b1234e7"},{"_id":"public/about/index.html","modified":1447228713145,"shasum":"9f4476a08d53c57cd5bbcd74213ac9a685b00c5c"},{"_id":"public/2015/11/11/mysql之作业/index.html","modified":1447242101353,"shasum":"08509547853b3041fbec295250830fc88d75f7b0"},{"_id":"public/2015/11/10/mysql之修改字段默认值/index.html","modified":1447228713272,"shasum":"62a7f7556737eab720aa5a003dec1ee3ae393552"},{"_id":"public/2015/11/10/django之外键的删除/index.html","modified":1447228713325,"shasum":"23af550e6419f6aa8ff57594362c8baa1bcad707"},{"_id":"public/2015/11/09/mysql之update/index.html","modified":1447228713373,"shasum":"90d151a354b4b4d680d2bf1f74c4221b17f9b65f"},{"_id":"public/2015/11/07/vim之格式化代码/index.html","modified":1447228713424,"shasum":"1887e922e0523e87661724865d4dd6bcba8e501b"},{"_id":"public/2015/11/07/django之温故知新1/index.html","modified":1447228713475,"shasum":"3a097a15d8513a48706c11dc61e88a1847f212ac"},{"_id":"public/2015/11/06/django之related-name/index.html","modified":1447228713531,"shasum":"d0b040f8d783da6efd81eb0754dad82ecb6f023e"},{"_id":"public/2015/11/06/linux之缓存/index.html","modified":1447228713589,"shasum":"637acef651432022b8942ca6450183fd13008225"},{"_id":"public/2015/11/06/vim之使用/index.html","modified":1447228713653,"shasum":"973f2013c3d30396135d7b9623839fd5837203e9"},{"_id":"public/2015/11/05/js之闭包/index.html","modified":1447228713721,"shasum":"b0488b95de697986ec3198cb5257540e74cef7c6"},{"_id":"public/2015/11/05/ubuntu之装机必备/index.html","modified":1447228713784,"shasum":"f37893ad9356132832cca673efc6472a000c2c51"},{"_id":"public/2015/11/03/mysql之1292/index.html","modified":1447228713848,"shasum":"2b11937ac6b6844c857a05d39d9d88c5a4c769b2"},{"_id":"public/2015/11/02/python之input/index.html","modified":1447228713907,"shasum":"95aabf7cda0125d49f3e6d535aae9c4073dd3184"},{"_id":"public/2015/10/30/python之ord/index.html","modified":1447228713980,"shasum":"bdb58d4e5d218d2e4d9e3bb76185ab3b16530a2c"},{"_id":"public/2015/10/30/html5之checkbox/index.html","modified":1447228714050,"shasum":"f6cd0cc30d9846d7601b727a251d3030543cf894"},{"_id":"public/2015/10/30/python列表解析/index.html","modified":1447228714100,"shasum":"3aa116ebf13ab5175b70876ddcd3b583b3fcdf20"},{"_id":"public/2015/10/30/deleteLinux历史记录/index.html","modified":1447228714156,"shasum":"84b3d79f586b9cc1869e9997d2aad1242802f0a6"},{"_id":"public/2015/10/29/django-favicon/index.html","modified":1447228714200,"shasum":"0046f352b476abf10fca5c05be24eed70355dd63"},{"_id":"public/2015/10/24/nodejs/index.html","modified":1447228714250,"shasum":"816dd1696020fac557127407366d3e8b7bd58577"},{"_id":"public/2015/10/24/mysql-use/index.html","modified":1447228714292,"shasum":"8ed4ac6d9b91b2998c123b0f4a05f68ffede35cf"},{"_id":"public/2015/10/21/django-install-problem/index.html","modified":1447228714343,"shasum":"8ee7959c7453760684b61e77346e6132b5504070"},{"_id":"public/2015/10/20/python-date/index.html","modified":1447228714387,"shasum":"23baeebda1c465489e27058d2271d3ce7cf11935"},{"_id":"public/2015/10/17/python复制/index.html","modified":1447228714441,"shasum":"9395b3692d1bad29bc932290a90152cd8c1012f7"},{"_id":"public/2015/10/15/html/index.html","modified":1447228714497,"shasum":"e1cb9fed2177ad615574be1a4027d9aab5238b83"},{"_id":"public/2015/10/14/linux/index.html","modified":1447228714554,"shasum":"e00c67421c49937c9a642b0760bb203db59e89dc"},{"_id":"public/2015/10/13/python_question/index.html","modified":1447228714615,"shasum":"2faa931310a4953d8a8a96d3f00dfa176e8a3491"},{"_id":"public/2015/10/12/technology/index.html","modified":1447228714658,"shasum":"39801fa69b2c0b52fb8329a1b6890f063573c769"},{"_id":"public/2015/10/12/Django/index.html","modified":1447242102825,"shasum":"74fe676fa4944e3d94730a4d2a93effc5b8b916f"},{"_id":"public/2015/10/12/Css/index.html","modified":1447228714760,"shasum":"a1def73d86cf3686de8e22274b8ef77d12f572d3"},{"_id":"public/2015/10/12/Markdown/index.html","modified":1447228714826,"shasum":"f26c91f484b656e779678f81a7652da54f21cb82"},{"_id":"public/2015/10/12/JS/index.html","modified":1447228714890,"shasum":"de75cb0090eb62fd206bef871c77fbd5936e9cd4"},{"_id":"public/2015/10/09/github-user-pwd/index.html","modified":1447228714947,"shasum":"c69b13669cef0b1a98b242a4010e060942fbd62c"},{"_id":"public/2015/10/09/Django-Notes/index.html","modified":1447228715038,"shasum":"15eef7ccda194c2c110a40902dc253b070a8de5d"},{"_id":"public/2015/10/09/Git-Use/index.html","modified":1447228715117,"shasum":"2fa99e052ee5f6b67234aa8a6e78f49311981329"},{"_id":"public/archives/index.html","modified":1447228715203,"shasum":"442fca86488a7a74e8cae136d773d650c7d8476b"},{"_id":"public/archives/page/2/index.html","modified":1447228715289,"shasum":"6ab68d8db0422d48638ebcf4ddfcd7f5e030cace"},{"_id":"public/archives/page/3/index.html","modified":1447228715358,"shasum":"aff93f8f560797b6a0d49d1ea9ec6b7b2825a65a"},{"_id":"public/archives/page/4/index.html","modified":1447228715399,"shasum":"6058448e5202f14dc5ebdc2964421705f6097e43"},{"_id":"public/archives/2015/index.html","modified":1447228715464,"shasum":"8c6f6f65a1c3b110709afc726a9a5e9d51cf41e0"},{"_id":"public/archives/2015/page/2/index.html","modified":1447228715529,"shasum":"eff38109ca365b806592cb94ff0a1259a04a19dd"},{"_id":"public/archives/2015/page/3/index.html","modified":1447228715592,"shasum":"97f16c48ce7c4f7f6e433097741f3cc8570c9915"},{"_id":"public/archives/2015/page/4/index.html","modified":1447228715642,"shasum":"395549051f09150ed13487d5b44ecd559a56c493"},{"_id":"public/archives/2015/10/index.html","modified":1447228715709,"shasum":"dfae67bbadbd879b13c8268fdadb99699f44304c"},{"_id":"public/archives/2015/10/page/2/index.html","modified":1447228715776,"shasum":"0ca9313a0806800047761806636bc1740751a846"},{"_id":"public/archives/2015/10/page/3/index.html","modified":1447228715813,"shasum":"43bb8bfb947127442cc39e72b515d7fb3179dc6f"},{"_id":"public/archives/2015/11/index.html","modified":1447228715877,"shasum":"5a8eec8eeb5db83a933fa22eefb75f79f4efedd9"},{"_id":"public/archives/2015/11/page/2/index.html","modified":1447228715927,"shasum":"0d510c1c041f5620f69aafe9b0959da7ee13fcd7"},{"_id":"public/categories/Django/index.html","modified":1447228715982,"shasum":"16d7fbdb5bff77d7e88da292ff932db949672127"},{"_id":"public/categories/MySql/index.html","modified":1447228842854,"shasum":"3a9f771a205175cdc6529fb7617c73b9ccda6f6c"},{"_id":"public/categories/Django/转载/index.html","modified":1447228716077,"shasum":"5ad2a6bb06cf8671721ca09e72dc702cece32c04"},{"_id":"public/categories/Vim/index.html","modified":1447228716117,"shasum":"37feecbb05a7c86a9d31f62ecc46602612dcc694"},{"_id":"public/categories/Django/温故知新/index.html","modified":1447228716177,"shasum":"4377d7ac5117e35d4b709cd16b58abcb80d7c6b1"},{"_id":"public/categories/Linux/index.html","modified":1447228716225,"shasum":"c3857add5dca2ac3b5a4f47e4b79cb0c9b1fc69b"},{"_id":"public/categories/Linux/Ubuntu/index.html","modified":1447228716275,"shasum":"7b3971ed8757af2a8b476b71fda0036b3793b07c"},{"_id":"public/categories/Js/index.html","modified":1447228716317,"shasum":"319b2fefa25f80028dd69d9bd030fb4bb995222a"},{"_id":"public/categories/Js/前端/index.html","modified":1447228716359,"shasum":"b303dba27e7ce0dd2e624c3c7d3fd009cbabd268"},{"_id":"public/categories/Mysql/index.html","modified":1447228716417,"shasum":"c7220a433825854e9987c6bb65970d60655ee49f"},{"_id":"public/categories/Python/index.html","modified":1447228716454,"shasum":"900bfa5217fb6e17f49adb60331f6db08a6737b1"},{"_id":"public/categories/前端/index.html","modified":1447228716490,"shasum":"85d8c85881552550928eb6f32bc74d599b805569"},{"_id":"public/categories/数据库/index.html","modified":1447228716526,"shasum":"c197b94b10e03e8ff5eee19419f80d6f6be25998"},{"_id":"public/categories/Django/Ubuntu/index.html","modified":1447228716556,"shasum":"0f82645031004ab93d01ee33738203c8a9b874ae"},{"_id":"public/categories/技术点滴/index.html","modified":1447228716595,"shasum":"e1429697174682ec8c2c9c866dc7d3ec326b02c2"},{"_id":"public/categories/Git/index.html","modified":1447228716626,"shasum":"84102a76e4b78073fc6c35e6addaf0fff0395214"},{"_id":"public/index.html","modified":1447228843432,"shasum":"f6b61ea40d09257d74656fc71ee025cdb287e6c0"},{"_id":"public/page/2/index.html","modified":1447228716770,"shasum":"a88202cd8a3986e9b5f7b160b50f8aa802302fdd"},{"_id":"public/page/3/index.html","modified":1447228716840,"shasum":"7d1a93166eb21a32deba6f40f629130c851d9423"},{"_id":"public/page/4/index.html","modified":1447228716889,"shasum":"8b91e22dc98f0d081ed4692b6c12ebb4f1ba0b24"},{"_id":"public/tags/Django/index.html","modified":1447228716932,"shasum":"50eda66d0563ff731e22ccd8cad04cdece78ce76"},{"_id":"public/tags/MySql/index.html","modified":1447228843737,"shasum":"49cb4d84204b6b1f3d87348fc724c59f9624e3c2"},{"_id":"public/tags/Vim/index.html","modified":1447228717000,"shasum":"7c59253a22a4cd95269c98ad58dfeaae6d3ca45c"},{"_id":"public/tags/Linux/index.html","modified":1447228717036,"shasum":"ef267092a1b01d7247bf1812555461e05865425f"},{"_id":"public/tags/Js/index.html","modified":1447228717083,"shasum":"026f2728df5397bb5bffd4ee1a2f441efd8cacb8"},{"_id":"public/tags/Mysql/index.html","modified":1447228717133,"shasum":"55c675ab0062df5938e253818ffde25e2053aa73"},{"_id":"public/tags/Python/index.html","modified":1447228717193,"shasum":"49b5b1e015fcae3b698644cb0ddf4c717062f26a"},{"_id":"public/tags/NodeJs/index.html","modified":1447228717231,"shasum":"3199c6363e1353a2184fa5008f603a863babb6c8"},{"_id":"public/tags/Html/index.html","modified":1447228717275,"shasum":"60183acfc92355e82d5a3e5cb6ea8b6cbe40f431"},{"_id":"public/tags/技术点滴/index.html","modified":1447228717320,"shasum":"dc5361c3b82fdb5eab237e4b3cb38d7b85eb003d"},{"_id":"public/tags/Markdown/index.html","modified":1447228717358,"shasum":"126d1f20dd4aca14fb2f5dd583e3af9dfd7c093f"},{"_id":"public/tags/Error/index.html","modified":1447228717396,"shasum":"a8797cb8371e92cb6afab7d81db9aa3b6b4e8e34"},{"_id":"public/tags/Css/index.html","modified":1447228717442,"shasum":"0f7dfee5abad73f24fd8acc8b874c93e00dace4c"},{"_id":"public/tags/GitHub/index.html","modified":1447228717486,"shasum":"5a413cbc03b55b0e2664acec078f4b7aa5403ba7"},{"_id":"public/tags/Git/index.html","modified":1447228717540,"shasum":"9c0fa7ae743cde9a2559090c966e4d5023dc309e"},{"_id":"themes/next/source/resume.html~","shasum":"2c3025aec50e07ef9ced1fdd1efbc8f92dec5088","modified":1447556993317},{"_id":"themes/next/source/resume_back.html","shasum":"b16e98e94943ccc521a9f40cb42c8c8bf5702aa7","modified":1447169798270},{"_id":"public/resume_back.html","modified":1447557006674,"shasum":"b16e98e94943ccc521a9f40cb42c8c8bf5702aa7"}],"Category":[{"name":"Django","_id":"ciguiltx60001g0orkxsw3ec5"},{"name":"MySql","_id":"ciguilty1000bg0or1k714qm7"},{"name":"转载","parent":"ciguiltx60001g0orkxsw3ec5","_id":"ciguilty4000gg0orj4i633nk"},{"name":"Vim","_id":"ciguilty8000og0orev3heonl"},{"name":"温故知新","parent":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltyb000tg0or1udvyitl"},{"name":"Linux","_id":"ciguiltyd000yg0oreky33ucy"},{"name":"Ubuntu","parent":"ciguiltyd000yg0oreky33ucy","_id":"ciguiltyg0014g0ord1uf37p4"},{"name":"Js","_id":"ciguiltyv001hg0orlwrwsyf8"},{"name":"前端","parent":"ciguiltyv001hg0orlwrwsyf8","_id":"ciguiltyw001jg0orvd3fycc5"},{"name":"Mysql","_id":"ciguiltyy001og0org654xgjy"},{"name":"Python","_id":"ciguiltz1001tg0orwexzbcli"},{"name":"前端","_id":"ciguiltze002bg0or8bfhomt3"},{"name":"数据库","_id":"ciguiltzg002gg0oruegrp0qf"},{"name":"Ubuntu","parent":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltzi002kg0orqmtbc14l"},{"name":"技术点滴","_id":"ciguiltzu0035g0oryx7ww9qd"},{"name":"Git","_id":"ciguilu0d003qg0or5k7x5glb"}],"Data":[],"Page":[{"title":"Yann tags","date":"2015-10-17T13:25:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: Yann tags\ndate: 2015-10-17 21:25:05\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-10-17T13:27:38.000Z","path":"tags/index.html","layout":"page","_id":"ciguiltxu0005g0ordevhyqto"},{"title":"guestbook","date":"2015-10-08T02:42:52.000Z","_content":"\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","source":"guestbook/index.md","raw":"title: guestbook\ndate: 2015-10-08 10:42:52\n---\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","updated":"2015-10-08T09:33:23.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"ciguiltxv0006g0or9k357eh7"},{"title":"Yann categories","date":"2015-10-17T13:29:03.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: Yann categories\ndate: 2015-10-17 21:29:03\ntype: \"categories\"\ncomments: false\n---\n","updated":"2015-10-17T13:29:38.000Z","path":"categories/index.html","layout":"page","_id":"ciguiltxw0007g0ort24yaqk1"},{"title":"about","date":"2015-10-08T03:03:19.000Z","_content":"\n<h1>My Name Is Yann</h1>","source":"about/index.md","raw":"title: about\ndate: 2015-10-08 11:03:19\n---\n\n<h1>My Name Is Yann</h1>","updated":"2015-10-08T09:33:23.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciguiltxx0008g0orimrkvbj0"}],"Post":[{"title":"Django Notes","date":"2015-10-09T05:39:28.000Z","_content":"\n## Django Basics\n\n##### 使用django的权限管理系统permission\n\n* 为model添加权限\n\n    ```\n    class OrderList(models.Model):\n        id = BigIntegerAutoField(primary_key=True)\n        buyer_name = models.CharField(default=\"\",max_length=32, verbose_name=u'买手')\n        order_amount = models.FloatField(default=0, verbose_name=u'金额')\n        created = models.DateField(auto_now_add=True, verbose_name=u'订货日期')\n        updated = models.DateTimeField(auto_now=True, verbose_name=u'更新日期')\n\n        class Meta:\n            db_table = 'suplychain_flashsale_orderlist'\n            verbose_name = u'**表'\n            verbose_name_plural = u'**表'\n            permissions = [(\"change_order_list_inline\", u\"**\"),]\n\n        def __unicode__(self):\n            return '<%s,%s,%s>' % (str(self.id or ''), self.id, self.buyer_name)\n    ```\n\n* views中可以使用如下方法来操作权限\n\n    ```\n    request.user.has_perm('dinghuo.change_order_list_inline')\n    ```\n\n* 在template中使用权限方法：\n\n    ```\n    {% if perms.conf %}\n        <p>You have permission to do something in the foo app.</p>\n    <p>You can vote!</p>\n    {% endif %}\n    {% if perms.conf.oprater_task %}\n           <p>You can drive!</p>\n    <p>You don't have permission to do anything in the foo app.</p>\n    {% endif %}\n    ```\n\n##### 在Django中MySQL的Composite Primary Key的实现\n  * Django不直接支持Composite Primary Key，但是可以如下实现。\n    - 定义model，选择composite key中的一个作为主键。\n    - 在model内部的Meta内，使用**unique_together**把composite key组织在一起。\n    例如：\n    ```\n          class Test(models.Model):\n              user_id = models.CharField(max_length=16, primary_key=True) # 选取user_id作为django层面的primary key\n              item_id = models.CharField(max_length=16)\n              class Meta:\n                  unique_together = (\"user_id\", \"item_id\") # (user_id, item_id)就是我们需要的composite primary key\n      ```\n    - 在MySQL层面（只针对MySQL数据库），对Test这个model所对应的表重新创建：\n    ```\n      mysql> DROP TABLE service_test; #丢弃Django syncdb创建的表\n      mysql> CREATE TABLE service_test (\n               user_id VARCHAR(16) NOT NULL,\n               item_id VARCHAR(16) NOT NULL,\n               primary key (user_id, item_id)\n             ) ENGINE=InnoDB;\n    ```\n\n##### Model字段缺省值(default=)\n  - 用例:\n  ```\n    created_at = models.DatetimeField(default=datetime.datetime.now)\n    dummy_int  = models.IntegerField(default=0)\n    ```\n  - 原理:\n    * default值并没有写入数据库的表中：如果写入数据库表中，字段//dummy_int//的定义应包含“DEFAULT 0”；但数据库表中未有体现。\n    * django model在构造函数//%%__init__%%()//中设置各字段的default值:根据default=0,构造函数内就把dummy_int的值设为0.\n    * 代码体现在///django/db/models/base.py//, 308-354行。\n  - 如果要让default值的设置体现在数据库表上，则要做以下改动：\n    * 改动文件//django/db/backends/creation.py//:\n    ```\n      def sql_create_model(self, model, style, known_models=set()):\n          ...\n          ## add the following code：\n          if(f.default != models.fields.NOT_PROVIDED):\n              if hasattr(f.default, '__call__'):\n                  pass ## we have a little bit trouble here -- default is a python method!!!\n              else:\n                  field_output.append(style.SQL_KEYWORD('DEFAULT ' + f.default.__str__()))\n    ```\n    * 什么时候需要把default值体现在数据库表中？\n      - 一个简单的用列：更新数据库中记录，如果记录被修改，时间戳也会自动更新为修改记录的新时间；如果记录其他字段未被修改，时间戳不会变化。\n        * 在django层面，无法达到该效果。因为每次update操作，django必须设置时间戳字段的值，这样即使数据库表中其他字段没有修改，该时间戳字段也被修改了。\n        * 而在数据库表里面，只要把timestamp字段设为//default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP//则可以达到理想效果：如果其他字段没有修改，时间戳也不会变化。\n    * 问题（注意！！）\n      - 正如上面代码中注释那样，如果在model中定义的字段的default值为python函数，比如//datetime.datetime.now//，就难以通过代码解析来设置数据库表中的default定义。\n      - 如果数据库表中对相应字段已有default配置，那么model的构造函数内就不必对该字段进行default值的设置。**所以这不是一项简单的工作，请不要轻易去尝试改动**。\n    * Reference: http://www.supermind.org/blog/671/django-not-setting-default-column-value-in-mysql\n\n##### Model主键自增\n  * 用例:\n    ```\n    d = models.AutoField(primary_key=True)\n    这是一个自增主键(auto-incrementing primary key)如果你要指定一个自定义主键，将该字段设置为primary_key=True。如果\n    Django看到你显式的设置了Field primary key，\n    它将不会增加自增id字段。每个model必须有exactly one字段设置为primary_key=True.\n    如显示添加自己的主键：uid = models.BigIntegerField(primary_key=True)\n    则uid需要自己在程序里去赋值或去数据库将主键更改为自增，并保证满足主键要求\n    ```\n\n###### update() 方法\n  - 用例:\n    ```\n    # change User record: set status=1 for all records that have id=1;\n    # return value x is the number of records that have id=1.\n    x = User.objects.filter(id=1).update(status=1)\n    ```\n  - 如果希望update()返回被更新的记录数(而不是满足filter条件的记录数),需要改变文件///django/db/backends/mysql/base.py//:\n    * 源代码如下:\n    ```\n      # We need the number of potentially affected rows after an\n      # \"UPDATE\", not the number of changed rows.\n      kwargs['client_flag'] = CLIENT.FOUND_ROWS\n    ```\n    * 改为:\n    ```\n      kwargs['client_flag'] = CLIENT.MULTI_RESULTS\n    ```\n\n##### save() 方法\n  - 内部处理流程:\n  ```\n    1) 发出一个预存信号。 它发出一个将要存储一个对象的通知。你可以注册一个监听程序，\n    在信号发出的时候就会被调用。\n\n    2) 预处理数据. 对于对象的每个字段，将根据需要进行自动的数据修改。大部分字段并不预处理\n    ，它们会保持它们原来的样子。预处理仅仅用在那些有特殊性质的字段，比如文件字段。\n\n    3) 为数据库准备数据。 每一个字段先要把当前值转化成数据库中可以保存的数据的类型。\n    大多数字段的数据不需要预先准备。简单的数据类型，比如整型和字符串等python对象可以直接写进数据库。\n    然而，更复杂的数据类型需要做一些修改。比如， DateFields 使用python的 datetime 对象来存储数据。\n    数据库并不能存储 datetime 对象，所以该字段要存入数据库先要把值转化为符合ISO标准的日期字符串。\n\n    4) 向数据库中插入数据。 经过预处理准备好的数据然后会组合成一条SQL语句来插入数据库。\n\n    5) 发出存毕信号。 与预存信号类似，存毕信号在对象成功保存之后发出。同样，这些信号也还没有文档化。\n    ```\n  - 处理原则：```\n    1) 如果对象的主键属性被设置成相当于 True 的值（比如 None 或者空字符串之外的值），Django会执行一个 SELECT 查询来检测是否已存在一个相同主键的记录。\n\n    2) 如果已经存在一个主键相同的记录，Django就执行 UPDATE 查询。\n\n    3) 如果对象的主键属性 没有 被设置，或者被设置但数据库中没有与之同主键的记录，那么Django就会执行 INSERT 插入。\n    ```\n\n##### 类实例序列化与反序列化\n  - 对于django中Model对象:<code python>\n    from django.core import serializers\n    serializers.serialize('json', queryset, indent=2,\n    use_natural_keys=True)//序列化\n    serializers.deserialize(\"json\", sstring)//反序列化\n    这种方式的反序列化后是一个DeserializeObject包装类</code>\n  - 使用对于一般的复杂对象：<code python>\n    import jsonpickle\n    pickled = jsonpickle.encode(obj)//序列化\n    unpickled = jsonpickle.decode(pickled)//反序列化\n    反序列化后是一个新的类对象</code>\n  - jsonpickle的安装：<code>\n    先要安装pip工具:sudo apt-get install python-pip。\n    然后执行命令：pip install -U jsonpickle。</code>\n  - 参考：[[http://zhdoc.bitsrv.net/django/html/topics/serialization.html]]and[[http://jsonpickle.github.com/]]\n\n###### django中静态文件路径配置\n  - 首先，在settings.py中加入一条静态路径的常量：<code python>\n    STATIC_FILE_ROOT='/home/meixqhi/workspace/django/src/fbproject'\n    </code>\n  - 其次，在urls.py文件中加入以下内容:<code python>\n    from settings import STATIC_FILE_ROOT\n    (r'^static/(?P<path>.*)','django.views.static.serve',{'document_root': '%s/static/' % STATIC_FILE_ROOT}),\n    </code>\n  - 然后就可以通过以下路径来访问STATIC_FILE_ROOT路径下static目录中的静态文件了:<code>\n    http://domain/apppath/static/home.html\n    </code>\n\n##### paginator\n  *分页 <code>\n   from django.core.paginator import Paginator\n   from models import Weibo\n\n   queryset = Weibo.objects.all()\n   paginator = Paginator(queryset, 5)\n   page = paginator.page(1)\n   page.object_list</code>\n\n##### Import module,model\n  * 动态加载module,model：<code>\n    from django.utils.importlib import import_module\n    import_module(module)\n\n    from django.db import model\n    model = models.get_model('weibo', 'weibo') #(app_label,model_name)</code>\n\n##### Signal\n  * Signal机制 <code>\n        function:\n\tconnect(self, receiver, sender=None, weak=True, dispatch_uid=None)\n\tsend(self, sender, **named):\n\tdecoretor:\n\treceiver(signal, **kwargs):</code>\n  * 使用方法：\n    - 声明：<code>\n\tfrom django.dispatch import Signal\n\tuser_logged_in = Signal(providing_args=['request', 'user'])</code>\n    - 注册你要触发的方法：<code>\n    def logged_status(user,access_token):\n\tuser.is_active = True\n    user_logged_in.connect(logged_status,sender=user.__class__) #sender不传参,则sender默认为None,表示响应所有的send信号 </code>\n    - 在某个你要触发某个方法的地方发送消息，让这些注册的方法执行：<code>\n\tuser_logged_in.send(sender=user.__class__, user=user, access_token=request.session.get('access_token', None))</code>\n    - 如果要防止某个方法在module重复加载时也被重复监听，可以在connect方法中添加唯一的标识：dispatch_uid='my_update_blogs'\n    - 由于监听方法默认状态weak=True是不保证一定会执行的，由于方法的弱引用会在资源不够的时候被垃圾回收器回收，如果一定要执行，则需显示在connect中设置weak=False。\n\n\n##### Django Deployment\n  - Install //libapache2-mod-wsgi//: \\\\ <code>\n    sudo apt-get install libapache2-mod-wsgi </code>\n  - Suppose you have django project //system// under directory ///srv/internals//: <code>\n    cd /srv/internals/system\n    mkdir apache </code>\n  - Create file //django.wsgi// under directory //apache//, the file contains: <code python>\n    import os\n    import sys\n\n    path = '/srv/internals'\n    if path not in sys.path:\n        sys.path.append(path)\n        sys.path.append(path+\"/system\")\n\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'system.settings'\n\n    import django.core.handlers.wsgi\n    application = django.core.handlers.wsgi.WSGIHandler() </code>\n  - Edit // /etc/apache2/httpd.conf//, adding the following: \\\\ <code bash>\n    Alias /system/media /srv/internals/system/media/   # make sure directory 'media' exists\n    Alias /system/static /srv/internals/system/static/ # make sure directory 'static' exists\n\n    <Directory /srv/internals/system/media>\n        AllowOverride All\n        Order deny,allow\n        Allow from all\n    </Directory>\n\n    <Directory /srv/internals/system/static>\n        Order deny,allow\n        Allow from all\n    </Directory>\n\n    WSGIScriptAlias /internal /srv/internals/system/apache/django.wsgi\n\n    <Directory /srv/internals/system/apache>\n        Order deny,allow\n        Allow from all\n    </Directory> </code>\n  - Edit ///srv/internals/system/settings.py//: <code bash>\n    MEDIA_ROOT = '/srv/internals/system/media/'\n    MEDIA_URL = '/system/media/' # http://<your_domain>/system/media points to /srv/internals/system/media\n    STATIC_ROOT = '/srv/internals/system/static/'\n    STATIC_URL = '/system/static/'\n    ADMIN_MEDIA_PREFIX = '/system/static/admin/'\n    ROOT_URLCONF = 'system.urls' </code>\n  - Visit the django project via http: <code>\n    http://<your_domain>/internal/admin/\n    http://<your_domain>/internal/<app_name> # visit application with name \"app_name\"</code>\n  - **Keep Admin Style**: \\\\ <code>\n    cd /srv/internals/system/static/admin/\n    cp -rf /usr/local/lib/python2.7/dist-packages/Django-1.3-py2.7.egg/django/contrib/admin/media/* .\n    or\n    cp -rf /usr/local/lib/python2.7/dist-packages/django/contrib/admin/media/* . </code>\n  - **Unicode Decoding Error**: (uploading file and filename has //non-ascii// characters) add the following to ///etc/apache2/envvars//: <code bash>\n    export LANG='en_US.UTF-8'\n    export LC_ALL='en_US.UTF-8' </code>\n  - Debug with apache: <code>\n    apache2ctl -k restart # with root\n    tail -f /var/log/apache/error.log </code>\n\n===== Django DB Schema Migration with South =====\n====  For Django < 1.7   ====\n  * 往Django App //tagtex.qpoints// 的表内增加一个字段：\n    - 初始化: <code>\n      python manage.py schemamigration tagtex.qpoints --initial\n      (如果APP执行过syncdb操作，需要执行以下操作： python manage.py migrate tagtex.qpoints --fake )</code>\n    - 修改表，增加字段\n    - 进行migration: <code>\n      python manage.py schemamigration tagtex.qpoints --auto\n      python manage.py migrate tagtex.qpoints </code>\n\n====  For Django > 1.7   ====\n  * south 操作命令:<code>\n  $ python manage.py makemigrations [appname]\n  $ python manage.py migrate [appname]\n  </code>\n===== Django Developement Tips =====\n    http://ericholscher.com/blog/2008/oct/5/django-tips/\n\n===== django-middleware =====\n  * django 中间件\n  * 编写自己的中间件需要实现下面一个或几个方法：\n    - process_request(self, request)：返回None或HttpResponse。\n    - process_view(self, request, view_func, view_args, view_kwargs)：djangoview处理中间件返回None或HttpResponse。\n    - process_exception(request, e):该中间件对业务处理方法执行未捕获的异常进行处理。\n    - process_template_response(request, response):如果返回的TemplateResponse含有可执行的render方法，则该中间件生效。\n    - process_response(self, request, response):返回HttpResponse。\n  * 参考：https://docs.djangoproject.com/en/1.3/topics/http/middleware/\n  * code参考django源代码：django/core/handlers/base.py中get_response\n\n===== django-profile-middleware =====\n  * profile是一款能够记录程序方法或请求在运行过程调用了多少其他方法，以及每个方法消耗了多少时间及系统资源的python工具\n  * 使用步骤：\n    - 先安装 python-profiler <code>\n      sudo apt-get install python-profiler</code>\n    - 创建ProfileMiddleware类,参考：http://djangosnippets.org/snippets/605/\n    - 将类路径名加入settings.py里的MIDDLEWARE_CLASSES中 <code>\n      MIDDLEWARE_CLASSES = (\n        'tagtex.base.middleware.ProfileMiddleware',\n        )</code>\n    - 运行server，发送请求\n    ```\n       如http://<yourserver>/yoururl/?prof&params\n       ```\n\n===== mockserver =====\n  * mockserver的主要功能是通过代理记录上次请求的状态并保存，并为下次请求返回相同的结果。\n  * 使用步骤：\n    - 先安装mock_server\n    ```\n      git+ssh://git@s2/django-mock-server.git#egg=django-mock-server (也可以直接下载)\n      ```\n    - 然后将recorder app添加到settings.py的INSTALLED_APPS中\n    ```\n      INSTALLED_APPS = (\n          'mock_server.recorder'\n        )\n        ```\n    - 设置代理url\n    ```\n         from django.conf.urls.defaults import patterns, include, url\n         from mock_server.recorder.views import RecordView,PlaybackView\n         from mock_server.recorder.recorder import Recorder\n         SITE_API_ENDPOINT = '你要访问的站点域名或http://ip:port'\n\n         recorder = Recorder(format='http://localhost:8000%s')\n\n         urlpatterns = patterns('',\n\n             url(r'^(?P<url>.*)$', RecordView.as_view(recorder=recorder,proxy_format='%s/%%s'%SITE_API_ENDPOINT),name='site_api'),\n             #url(r'^(?P<url>.*)$', PlaybackView.as_view(recorder=recorder,proxy_format='%s/%%s'%SITE_API_ENDPOINT),name='site_api'),\n         )\n         ```\n    - 使用前先使用第一条url，RecordView，注释掉第二条，启动服务器，将你要mock的所有请求都先都由mockserver来代理，mockserver会将所有请求都记录保存到数据库。\n    - 然后再打开第二条url，Playback回放，注释掉第一条，所有请求都会返回之前一样的结果。\n\n\n##### Override Runserver Command\n  * To override **runserver** Command,\n  add the following to into //management/commands/runnserver.py//:\n    ```\n    class Command(BaseRunserverCommand):\n        option_list = BaseRunserverCommand.option_list + (\n            make_option('--adminmedia', dest='admin_media_path', default='',\n                help='Specifies the directory from which to serve admin media.'),\n        )\n\n        \"\"\"\n        Change the runserver default port to 9000. The method can be generically applied if\n        the default port needs to be changed.\n        \"\"\"\n        def handle(self, addrport=\"9000\", *args, **options):\n            super(Command, self).handle(addrport, *args, **options)\n\n        def get_handler(self, *args, **options):\n            \"\"\"\n            Serves admin media like old-school (deprecation pending).\n            \"\"\"\n\n            handler = super(Command, self).get_handler(*args, **options)\n            return AdminMediaHandler(handler, options.get('admin_media_path', ''))\n    ```\n\n\n##### 数据导入导出\n  * 数据导出:\n    ```\n        python manage.py dumpdata logistics.LogisticsCompany --indent=2 --format=json --natural >fixtures/initial_logistics_company.json\n    ```\n  * 数据导入:\n    ```\n        python manage.py loaddata fixtures/initial_logistics_company.json\n    ```\n\n##### 多个queryset 合并成一个\n  * django\n    ```\n        from itertools import islice, chain\n\n        class QuerySetChain(object):\n            \"\"\"\n            Chains multiple subquerysets (possibly of different models) and behaves as\n            one queryset.  Supports minimal methods needed for use with\n            django.core.paginator.\n            \"\"\"\n\n            def __init__(self, *subquerysets):\n                self.querysets = subquerysets\n\n            def count(self):\n                \"\"\"\n                Performs a .count() for all subquerysets and returns the number of\n                records as an integer.\n                \"\"\"\n                return sum(qs.count() for qs in self.querysets)\n\n            def _clone(self):\n                \"Returns a clone of this queryset chain\"\n                return self.__class__(*self.querysets)\n\n            def _all(self):\n                \"Iterates records in all subquerysets\"\n                return chain(*self.querysets)\n\n            def __getitem__(self, ndx):\n                \"\"\"\n                Retrieves an item or slice from the chained set of results from all\n                subquerysets.\n                \"\"\"\n                if type(ndx) is slice:\n                    return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\n                else:\n                    return islice(self._all(), ndx, ndx+1).next()\n    ```\n\n##### django批量添加和更新\n  * django insert&update:\n  ```\n    def insert_many(objects, using=\"default\"):\n        \"\"\"Insert list of Django objects in one SQL query. Objects must be\n        of the same Django model. Note that save is not called and signals\n        on the model are not raised.\"\"\"\n        if not objects:\n            return\n\n        import django.db.models\n        from django.db import connections\n        con = connections[using]\n\n        model = objects[0].__class__\n        fields = [f for f in model._meta.fields if not isinstance(f, django.db.models.AutoField)]\n        parameters = []\n        for o in objects:\n            parameters.append(tuple(f.get_db_prep_save(f.pre_save(o, True), connection=con) for f in fields))\n\n        table = model._meta.db_table\n        column_names = \",\".join(con.ops.quote_name(f.column) for f in fields)\n        placeholders = \",\".join((\"%s\",) * len(fields))\n        con.cursor().executemany(\n            \"insert into %s (%s) values (%s)\" % (table, column_names, placeholders),\n            parameters)\n\n    def update_many(objects, fields=[], using=\"default\"):\n        \"\"\"Update list of Django objects in one SQL query,\n         optionally only overwrite the given fields (as names, e.g. fields=[\"foo\"]).\n        Objects must be of the same Django model.\n        Note that save is not called and signals on the model are not raised.\"\"\"\n        if not objects:\n            return\n\n        import django.db.models\n        from django.db import connections\n        con = connections[using]\n\n        names = fields\n        meta = objects[0]._meta\n        fields = [f for f in meta.fields if not isinstance(f, django.db.models.AutoField) and (not names or f.name in names)]\n\n        if not fields:\n            raise ValueError(\"No fields to update, field names are %s.\" % names)\n\n        fields_with_pk = fields + [meta.pk]\n        parameters = []\n        for o in objects:\n            parameters.append(tuple(f.get_db_prep_save(f.pre_save(o, True), connection=con) for f in fields_with_pk))\n\n        table = meta.db_table\n        assignments = \",\".join((\"%s=%%s\"% con.ops.quote_name(f.column)) for f in fields)\n        con.cursor().executemany(\n            \"update %s set %s where %s=%%s\" % (table, assignments, con.ops.quote_name(meta.pk.column)),\n            parameters)\n    ```\n\n","source":"_posts/2015/10/09/Django-Notes.md","raw":"title: Django Notes\ndate: 2015-10-09 13:39:28\ncategories:\n- Django\ntags:\n- Django\n---\n\n## Django Basics\n\n##### 使用django的权限管理系统permission\n\n* 为model添加权限\n\n    ```\n    class OrderList(models.Model):\n        id = BigIntegerAutoField(primary_key=True)\n        buyer_name = models.CharField(default=\"\",max_length=32, verbose_name=u'买手')\n        order_amount = models.FloatField(default=0, verbose_name=u'金额')\n        created = models.DateField(auto_now_add=True, verbose_name=u'订货日期')\n        updated = models.DateTimeField(auto_now=True, verbose_name=u'更新日期')\n\n        class Meta:\n            db_table = 'suplychain_flashsale_orderlist'\n            verbose_name = u'**表'\n            verbose_name_plural = u'**表'\n            permissions = [(\"change_order_list_inline\", u\"**\"),]\n\n        def __unicode__(self):\n            return '<%s,%s,%s>' % (str(self.id or ''), self.id, self.buyer_name)\n    ```\n\n* views中可以使用如下方法来操作权限\n\n    ```\n    request.user.has_perm('dinghuo.change_order_list_inline')\n    ```\n\n* 在template中使用权限方法：\n\n    ```\n    {% if perms.conf %}\n        <p>You have permission to do something in the foo app.</p>\n    <p>You can vote!</p>\n    {% endif %}\n    {% if perms.conf.oprater_task %}\n           <p>You can drive!</p>\n    <p>You don't have permission to do anything in the foo app.</p>\n    {% endif %}\n    ```\n\n##### 在Django中MySQL的Composite Primary Key的实现\n  * Django不直接支持Composite Primary Key，但是可以如下实现。\n    - 定义model，选择composite key中的一个作为主键。\n    - 在model内部的Meta内，使用**unique_together**把composite key组织在一起。\n    例如：\n    ```\n          class Test(models.Model):\n              user_id = models.CharField(max_length=16, primary_key=True) # 选取user_id作为django层面的primary key\n              item_id = models.CharField(max_length=16)\n              class Meta:\n                  unique_together = (\"user_id\", \"item_id\") # (user_id, item_id)就是我们需要的composite primary key\n      ```\n    - 在MySQL层面（只针对MySQL数据库），对Test这个model所对应的表重新创建：\n    ```\n      mysql> DROP TABLE service_test; #丢弃Django syncdb创建的表\n      mysql> CREATE TABLE service_test (\n               user_id VARCHAR(16) NOT NULL,\n               item_id VARCHAR(16) NOT NULL,\n               primary key (user_id, item_id)\n             ) ENGINE=InnoDB;\n    ```\n\n##### Model字段缺省值(default=)\n  - 用例:\n  ```\n    created_at = models.DatetimeField(default=datetime.datetime.now)\n    dummy_int  = models.IntegerField(default=0)\n    ```\n  - 原理:\n    * default值并没有写入数据库的表中：如果写入数据库表中，字段//dummy_int//的定义应包含“DEFAULT 0”；但数据库表中未有体现。\n    * django model在构造函数//%%__init__%%()//中设置各字段的default值:根据default=0,构造函数内就把dummy_int的值设为0.\n    * 代码体现在///django/db/models/base.py//, 308-354行。\n  - 如果要让default值的设置体现在数据库表上，则要做以下改动：\n    * 改动文件//django/db/backends/creation.py//:\n    ```\n      def sql_create_model(self, model, style, known_models=set()):\n          ...\n          ## add the following code：\n          if(f.default != models.fields.NOT_PROVIDED):\n              if hasattr(f.default, '__call__'):\n                  pass ## we have a little bit trouble here -- default is a python method!!!\n              else:\n                  field_output.append(style.SQL_KEYWORD('DEFAULT ' + f.default.__str__()))\n    ```\n    * 什么时候需要把default值体现在数据库表中？\n      - 一个简单的用列：更新数据库中记录，如果记录被修改，时间戳也会自动更新为修改记录的新时间；如果记录其他字段未被修改，时间戳不会变化。\n        * 在django层面，无法达到该效果。因为每次update操作，django必须设置时间戳字段的值，这样即使数据库表中其他字段没有修改，该时间戳字段也被修改了。\n        * 而在数据库表里面，只要把timestamp字段设为//default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP//则可以达到理想效果：如果其他字段没有修改，时间戳也不会变化。\n    * 问题（注意！！）\n      - 正如上面代码中注释那样，如果在model中定义的字段的default值为python函数，比如//datetime.datetime.now//，就难以通过代码解析来设置数据库表中的default定义。\n      - 如果数据库表中对相应字段已有default配置，那么model的构造函数内就不必对该字段进行default值的设置。**所以这不是一项简单的工作，请不要轻易去尝试改动**。\n    * Reference: http://www.supermind.org/blog/671/django-not-setting-default-column-value-in-mysql\n\n##### Model主键自增\n  * 用例:\n    ```\n    d = models.AutoField(primary_key=True)\n    这是一个自增主键(auto-incrementing primary key)如果你要指定一个自定义主键，将该字段设置为primary_key=True。如果\n    Django看到你显式的设置了Field primary key，\n    它将不会增加自增id字段。每个model必须有exactly one字段设置为primary_key=True.\n    如显示添加自己的主键：uid = models.BigIntegerField(primary_key=True)\n    则uid需要自己在程序里去赋值或去数据库将主键更改为自增，并保证满足主键要求\n    ```\n\n###### update() 方法\n  - 用例:\n    ```\n    # change User record: set status=1 for all records that have id=1;\n    # return value x is the number of records that have id=1.\n    x = User.objects.filter(id=1).update(status=1)\n    ```\n  - 如果希望update()返回被更新的记录数(而不是满足filter条件的记录数),需要改变文件///django/db/backends/mysql/base.py//:\n    * 源代码如下:\n    ```\n      # We need the number of potentially affected rows after an\n      # \"UPDATE\", not the number of changed rows.\n      kwargs['client_flag'] = CLIENT.FOUND_ROWS\n    ```\n    * 改为:\n    ```\n      kwargs['client_flag'] = CLIENT.MULTI_RESULTS\n    ```\n\n##### save() 方法\n  - 内部处理流程:\n  ```\n    1) 发出一个预存信号。 它发出一个将要存储一个对象的通知。你可以注册一个监听程序，\n    在信号发出的时候就会被调用。\n\n    2) 预处理数据. 对于对象的每个字段，将根据需要进行自动的数据修改。大部分字段并不预处理\n    ，它们会保持它们原来的样子。预处理仅仅用在那些有特殊性质的字段，比如文件字段。\n\n    3) 为数据库准备数据。 每一个字段先要把当前值转化成数据库中可以保存的数据的类型。\n    大多数字段的数据不需要预先准备。简单的数据类型，比如整型和字符串等python对象可以直接写进数据库。\n    然而，更复杂的数据类型需要做一些修改。比如， DateFields 使用python的 datetime 对象来存储数据。\n    数据库并不能存储 datetime 对象，所以该字段要存入数据库先要把值转化为符合ISO标准的日期字符串。\n\n    4) 向数据库中插入数据。 经过预处理准备好的数据然后会组合成一条SQL语句来插入数据库。\n\n    5) 发出存毕信号。 与预存信号类似，存毕信号在对象成功保存之后发出。同样，这些信号也还没有文档化。\n    ```\n  - 处理原则：```\n    1) 如果对象的主键属性被设置成相当于 True 的值（比如 None 或者空字符串之外的值），Django会执行一个 SELECT 查询来检测是否已存在一个相同主键的记录。\n\n    2) 如果已经存在一个主键相同的记录，Django就执行 UPDATE 查询。\n\n    3) 如果对象的主键属性 没有 被设置，或者被设置但数据库中没有与之同主键的记录，那么Django就会执行 INSERT 插入。\n    ```\n\n##### 类实例序列化与反序列化\n  - 对于django中Model对象:<code python>\n    from django.core import serializers\n    serializers.serialize('json', queryset, indent=2,\n    use_natural_keys=True)//序列化\n    serializers.deserialize(\"json\", sstring)//反序列化\n    这种方式的反序列化后是一个DeserializeObject包装类</code>\n  - 使用对于一般的复杂对象：<code python>\n    import jsonpickle\n    pickled = jsonpickle.encode(obj)//序列化\n    unpickled = jsonpickle.decode(pickled)//反序列化\n    反序列化后是一个新的类对象</code>\n  - jsonpickle的安装：<code>\n    先要安装pip工具:sudo apt-get install python-pip。\n    然后执行命令：pip install -U jsonpickle。</code>\n  - 参考：[[http://zhdoc.bitsrv.net/django/html/topics/serialization.html]]and[[http://jsonpickle.github.com/]]\n\n###### django中静态文件路径配置\n  - 首先，在settings.py中加入一条静态路径的常量：<code python>\n    STATIC_FILE_ROOT='/home/meixqhi/workspace/django/src/fbproject'\n    </code>\n  - 其次，在urls.py文件中加入以下内容:<code python>\n    from settings import STATIC_FILE_ROOT\n    (r'^static/(?P<path>.*)','django.views.static.serve',{'document_root': '%s/static/' % STATIC_FILE_ROOT}),\n    </code>\n  - 然后就可以通过以下路径来访问STATIC_FILE_ROOT路径下static目录中的静态文件了:<code>\n    http://domain/apppath/static/home.html\n    </code>\n\n##### paginator\n  *分页 <code>\n   from django.core.paginator import Paginator\n   from models import Weibo\n\n   queryset = Weibo.objects.all()\n   paginator = Paginator(queryset, 5)\n   page = paginator.page(1)\n   page.object_list</code>\n\n##### Import module,model\n  * 动态加载module,model：<code>\n    from django.utils.importlib import import_module\n    import_module(module)\n\n    from django.db import model\n    model = models.get_model('weibo', 'weibo') #(app_label,model_name)</code>\n\n##### Signal\n  * Signal机制 <code>\n        function:\n\tconnect(self, receiver, sender=None, weak=True, dispatch_uid=None)\n\tsend(self, sender, **named):\n\tdecoretor:\n\treceiver(signal, **kwargs):</code>\n  * 使用方法：\n    - 声明：<code>\n\tfrom django.dispatch import Signal\n\tuser_logged_in = Signal(providing_args=['request', 'user'])</code>\n    - 注册你要触发的方法：<code>\n    def logged_status(user,access_token):\n\tuser.is_active = True\n    user_logged_in.connect(logged_status,sender=user.__class__) #sender不传参,则sender默认为None,表示响应所有的send信号 </code>\n    - 在某个你要触发某个方法的地方发送消息，让这些注册的方法执行：<code>\n\tuser_logged_in.send(sender=user.__class__, user=user, access_token=request.session.get('access_token', None))</code>\n    - 如果要防止某个方法在module重复加载时也被重复监听，可以在connect方法中添加唯一的标识：dispatch_uid='my_update_blogs'\n    - 由于监听方法默认状态weak=True是不保证一定会执行的，由于方法的弱引用会在资源不够的时候被垃圾回收器回收，如果一定要执行，则需显示在connect中设置weak=False。\n\n\n##### Django Deployment\n  - Install //libapache2-mod-wsgi//: \\\\ <code>\n    sudo apt-get install libapache2-mod-wsgi </code>\n  - Suppose you have django project //system// under directory ///srv/internals//: <code>\n    cd /srv/internals/system\n    mkdir apache </code>\n  - Create file //django.wsgi// under directory //apache//, the file contains: <code python>\n    import os\n    import sys\n\n    path = '/srv/internals'\n    if path not in sys.path:\n        sys.path.append(path)\n        sys.path.append(path+\"/system\")\n\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'system.settings'\n\n    import django.core.handlers.wsgi\n    application = django.core.handlers.wsgi.WSGIHandler() </code>\n  - Edit // /etc/apache2/httpd.conf//, adding the following: \\\\ <code bash>\n    Alias /system/media /srv/internals/system/media/   # make sure directory 'media' exists\n    Alias /system/static /srv/internals/system/static/ # make sure directory 'static' exists\n\n    <Directory /srv/internals/system/media>\n        AllowOverride All\n        Order deny,allow\n        Allow from all\n    </Directory>\n\n    <Directory /srv/internals/system/static>\n        Order deny,allow\n        Allow from all\n    </Directory>\n\n    WSGIScriptAlias /internal /srv/internals/system/apache/django.wsgi\n\n    <Directory /srv/internals/system/apache>\n        Order deny,allow\n        Allow from all\n    </Directory> </code>\n  - Edit ///srv/internals/system/settings.py//: <code bash>\n    MEDIA_ROOT = '/srv/internals/system/media/'\n    MEDIA_URL = '/system/media/' # http://<your_domain>/system/media points to /srv/internals/system/media\n    STATIC_ROOT = '/srv/internals/system/static/'\n    STATIC_URL = '/system/static/'\n    ADMIN_MEDIA_PREFIX = '/system/static/admin/'\n    ROOT_URLCONF = 'system.urls' </code>\n  - Visit the django project via http: <code>\n    http://<your_domain>/internal/admin/\n    http://<your_domain>/internal/<app_name> # visit application with name \"app_name\"</code>\n  - **Keep Admin Style**: \\\\ <code>\n    cd /srv/internals/system/static/admin/\n    cp -rf /usr/local/lib/python2.7/dist-packages/Django-1.3-py2.7.egg/django/contrib/admin/media/* .\n    or\n    cp -rf /usr/local/lib/python2.7/dist-packages/django/contrib/admin/media/* . </code>\n  - **Unicode Decoding Error**: (uploading file and filename has //non-ascii// characters) add the following to ///etc/apache2/envvars//: <code bash>\n    export LANG='en_US.UTF-8'\n    export LC_ALL='en_US.UTF-8' </code>\n  - Debug with apache: <code>\n    apache2ctl -k restart # with root\n    tail -f /var/log/apache/error.log </code>\n\n===== Django DB Schema Migration with South =====\n====  For Django < 1.7   ====\n  * 往Django App //tagtex.qpoints// 的表内增加一个字段：\n    - 初始化: <code>\n      python manage.py schemamigration tagtex.qpoints --initial\n      (如果APP执行过syncdb操作，需要执行以下操作： python manage.py migrate tagtex.qpoints --fake )</code>\n    - 修改表，增加字段\n    - 进行migration: <code>\n      python manage.py schemamigration tagtex.qpoints --auto\n      python manage.py migrate tagtex.qpoints </code>\n\n====  For Django > 1.7   ====\n  * south 操作命令:<code>\n  $ python manage.py makemigrations [appname]\n  $ python manage.py migrate [appname]\n  </code>\n===== Django Developement Tips =====\n    http://ericholscher.com/blog/2008/oct/5/django-tips/\n\n===== django-middleware =====\n  * django 中间件\n  * 编写自己的中间件需要实现下面一个或几个方法：\n    - process_request(self, request)：返回None或HttpResponse。\n    - process_view(self, request, view_func, view_args, view_kwargs)：djangoview处理中间件返回None或HttpResponse。\n    - process_exception(request, e):该中间件对业务处理方法执行未捕获的异常进行处理。\n    - process_template_response(request, response):如果返回的TemplateResponse含有可执行的render方法，则该中间件生效。\n    - process_response(self, request, response):返回HttpResponse。\n  * 参考：https://docs.djangoproject.com/en/1.3/topics/http/middleware/\n  * code参考django源代码：django/core/handlers/base.py中get_response\n\n===== django-profile-middleware =====\n  * profile是一款能够记录程序方法或请求在运行过程调用了多少其他方法，以及每个方法消耗了多少时间及系统资源的python工具\n  * 使用步骤：\n    - 先安装 python-profiler <code>\n      sudo apt-get install python-profiler</code>\n    - 创建ProfileMiddleware类,参考：http://djangosnippets.org/snippets/605/\n    - 将类路径名加入settings.py里的MIDDLEWARE_CLASSES中 <code>\n      MIDDLEWARE_CLASSES = (\n        'tagtex.base.middleware.ProfileMiddleware',\n        )</code>\n    - 运行server，发送请求\n    ```\n       如http://<yourserver>/yoururl/?prof&params\n       ```\n\n===== mockserver =====\n  * mockserver的主要功能是通过代理记录上次请求的状态并保存，并为下次请求返回相同的结果。\n  * 使用步骤：\n    - 先安装mock_server\n    ```\n      git+ssh://git@s2/django-mock-server.git#egg=django-mock-server (也可以直接下载)\n      ```\n    - 然后将recorder app添加到settings.py的INSTALLED_APPS中\n    ```\n      INSTALLED_APPS = (\n          'mock_server.recorder'\n        )\n        ```\n    - 设置代理url\n    ```\n         from django.conf.urls.defaults import patterns, include, url\n         from mock_server.recorder.views import RecordView,PlaybackView\n         from mock_server.recorder.recorder import Recorder\n         SITE_API_ENDPOINT = '你要访问的站点域名或http://ip:port'\n\n         recorder = Recorder(format='http://localhost:8000%s')\n\n         urlpatterns = patterns('',\n\n             url(r'^(?P<url>.*)$', RecordView.as_view(recorder=recorder,proxy_format='%s/%%s'%SITE_API_ENDPOINT),name='site_api'),\n             #url(r'^(?P<url>.*)$', PlaybackView.as_view(recorder=recorder,proxy_format='%s/%%s'%SITE_API_ENDPOINT),name='site_api'),\n         )\n         ```\n    - 使用前先使用第一条url，RecordView，注释掉第二条，启动服务器，将你要mock的所有请求都先都由mockserver来代理，mockserver会将所有请求都记录保存到数据库。\n    - 然后再打开第二条url，Playback回放，注释掉第一条，所有请求都会返回之前一样的结果。\n\n\n##### Override Runserver Command\n  * To override **runserver** Command,\n  add the following to into //management/commands/runnserver.py//:\n    ```\n    class Command(BaseRunserverCommand):\n        option_list = BaseRunserverCommand.option_list + (\n            make_option('--adminmedia', dest='admin_media_path', default='',\n                help='Specifies the directory from which to serve admin media.'),\n        )\n\n        \"\"\"\n        Change the runserver default port to 9000. The method can be generically applied if\n        the default port needs to be changed.\n        \"\"\"\n        def handle(self, addrport=\"9000\", *args, **options):\n            super(Command, self).handle(addrport, *args, **options)\n\n        def get_handler(self, *args, **options):\n            \"\"\"\n            Serves admin media like old-school (deprecation pending).\n            \"\"\"\n\n            handler = super(Command, self).get_handler(*args, **options)\n            return AdminMediaHandler(handler, options.get('admin_media_path', ''))\n    ```\n\n\n##### 数据导入导出\n  * 数据导出:\n    ```\n        python manage.py dumpdata logistics.LogisticsCompany --indent=2 --format=json --natural >fixtures/initial_logistics_company.json\n    ```\n  * 数据导入:\n    ```\n        python manage.py loaddata fixtures/initial_logistics_company.json\n    ```\n\n##### 多个queryset 合并成一个\n  * django\n    ```\n        from itertools import islice, chain\n\n        class QuerySetChain(object):\n            \"\"\"\n            Chains multiple subquerysets (possibly of different models) and behaves as\n            one queryset.  Supports minimal methods needed for use with\n            django.core.paginator.\n            \"\"\"\n\n            def __init__(self, *subquerysets):\n                self.querysets = subquerysets\n\n            def count(self):\n                \"\"\"\n                Performs a .count() for all subquerysets and returns the number of\n                records as an integer.\n                \"\"\"\n                return sum(qs.count() for qs in self.querysets)\n\n            def _clone(self):\n                \"Returns a clone of this queryset chain\"\n                return self.__class__(*self.querysets)\n\n            def _all(self):\n                \"Iterates records in all subquerysets\"\n                return chain(*self.querysets)\n\n            def __getitem__(self, ndx):\n                \"\"\"\n                Retrieves an item or slice from the chained set of results from all\n                subquerysets.\n                \"\"\"\n                if type(ndx) is slice:\n                    return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\n                else:\n                    return islice(self._all(), ndx, ndx+1).next()\n    ```\n\n##### django批量添加和更新\n  * django insert&update:\n  ```\n    def insert_many(objects, using=\"default\"):\n        \"\"\"Insert list of Django objects in one SQL query. Objects must be\n        of the same Django model. Note that save is not called and signals\n        on the model are not raised.\"\"\"\n        if not objects:\n            return\n\n        import django.db.models\n        from django.db import connections\n        con = connections[using]\n\n        model = objects[0].__class__\n        fields = [f for f in model._meta.fields if not isinstance(f, django.db.models.AutoField)]\n        parameters = []\n        for o in objects:\n            parameters.append(tuple(f.get_db_prep_save(f.pre_save(o, True), connection=con) for f in fields))\n\n        table = model._meta.db_table\n        column_names = \",\".join(con.ops.quote_name(f.column) for f in fields)\n        placeholders = \",\".join((\"%s\",) * len(fields))\n        con.cursor().executemany(\n            \"insert into %s (%s) values (%s)\" % (table, column_names, placeholders),\n            parameters)\n\n    def update_many(objects, fields=[], using=\"default\"):\n        \"\"\"Update list of Django objects in one SQL query,\n         optionally only overwrite the given fields (as names, e.g. fields=[\"foo\"]).\n        Objects must be of the same Django model.\n        Note that save is not called and signals on the model are not raised.\"\"\"\n        if not objects:\n            return\n\n        import django.db.models\n        from django.db import connections\n        con = connections[using]\n\n        names = fields\n        meta = objects[0]._meta\n        fields = [f for f in meta.fields if not isinstance(f, django.db.models.AutoField) and (not names or f.name in names)]\n\n        if not fields:\n            raise ValueError(\"No fields to update, field names are %s.\" % names)\n\n        fields_with_pk = fields + [meta.pk]\n        parameters = []\n        for o in objects:\n            parameters.append(tuple(f.get_db_prep_save(f.pre_save(o, True), connection=con) for f in fields_with_pk))\n\n        table = meta.db_table\n        assignments = \",\".join((\"%s=%%s\"% con.ops.quote_name(f.column)) for f in fields)\n        con.cursor().executemany(\n            \"update %s set %s where %s=%%s\" % (table, assignments, con.ops.quote_name(meta.pk.column)),\n            parameters)\n    ```\n\n","slug":"Django-Notes","published":1,"updated":"2015-10-28T08:26:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltx20000g0orx3w7jti9"},{"title":"mysql之作业","date":"2015-11-11T07:54:38.000Z","_content":"在网上找了一个比较全的入门教程\n========================\n\n1. 在mysql 中建立一个数据库 test1 \n\n\t```\n\tcreate database test1 \n\t```\n2. 创建表examinfo \n\n\t```\n\tuse test1;\n\tcreate table examinfo( \n\t\tid int auto_increment not null, \n\t\tendtime datetime, \n\t\tprimary key(id) \n\t); \n\t```\n\n3. 插入数据： \n\n\t```\n\tinsert into examinfo values('1','2015-11-11 11:11:11'); \n\t```\n\n\t-\t定界符(设置数据库以//作为结束)\n\t\n\t\t```\n\t\tDELIMITER //\n\t\t```\n4. 创建存储过程test \n\t\n\t```\n\tmysql> select * from examinfo;\n\t+----+---------------------+\n\t| id | endtime             |\n\t+----+---------------------+\n\t|  1 | 2015-11-11 11:11:11 |\n\t+----+---------------------+\n\t1 row in set (0.00 sec)\n\t\n\tmysql> DELIMITER //\n\tmysql> CREATE PROCEDURE test () \n\t    -> begin\n\t    -> update examinfo set endtime=now() where id=1;\n\t    -> end;\n\t    -> //\n\tQuery OK, 0 rows affected (0.00 sec)\n\t```\n\n5. 创建event e_test \n\t```\n\tmysql> CREATE EVENT if not exists e_test \n\t    -> on schedule every 30 second \n\t    -> on completion preserve \n\t    -> do call test(); \n\t    -> //\n\tQuery OK, 0 rows affected (0.00 sec)\n\t\n\t```\n\n\n6.\n\t-\t查看event是否开启: show variables like '%sche%'; \n\t-\t将事件计划开启: set global event_scheduler=1; \n\t-\t关闭事件任务: alter event e_test ON COMPLETION PRESERVE DISABLE; \n\t-\t开启事件任务: alter event e_test ON COMPLETION PRESERVE ENABLE; \n\n7. 查看结果\n\t```\n\tmysql> select * from examinfo//\n\t+----+---------------------+\n\t| id | endtime             |\n\t+----+---------------------+\n\t|  1 | 2015-11-11 12:02:09 |\n\t+----+---------------------+\n\t1 row in set (0.00 sec)\n\t\n\tmysql> select * from examinfo//\n\t+----+---------------------+\n\t| id | endtime             |\n\t+----+---------------------+\n\t|  1 | 2015-11-11 12:02:39 |\n\t+----+---------------------+\n\t1 row in set (0.00 sec)\n\t\n\t```\n到此一个作业就算结束了，这用了存储过程\n\n查看存储过程\n-------------\n*\t方法一：\n\t```\n\tselect `name` from mysql.proc where db = 'your_db_name' and `type` = 'PROCEDURE'\n\t```\n*\t方法二：\n\t```\n\tshow procedure status;\n\t```\n\n查看存储过程或函数的创建代码\n-------------\n```\nshow create procedure proc_name;\nshow create function func_name;\n```\n创建数据库的指定字符编码\n----------------\n```\ncreate database shopmgr character set utf8 collate utf8_general_ci;\n```","source":"_posts/2015/11/11/mysql之作业.md","raw":"title: mysql之作业\ndate: 2015-11-11 15:54:38\ncategories:\n- MySql\ntags:\n- MySql\n---\n在网上找了一个比较全的入门教程\n========================\n\n1. 在mysql 中建立一个数据库 test1 \n\n\t```\n\tcreate database test1 \n\t```\n2. 创建表examinfo \n\n\t```\n\tuse test1;\n\tcreate table examinfo( \n\t\tid int auto_increment not null, \n\t\tendtime datetime, \n\t\tprimary key(id) \n\t); \n\t```\n\n3. 插入数据： \n\n\t```\n\tinsert into examinfo values('1','2015-11-11 11:11:11'); \n\t```\n\n\t-\t定界符(设置数据库以//作为结束)\n\t\n\t\t```\n\t\tDELIMITER //\n\t\t```\n4. 创建存储过程test \n\t\n\t```\n\tmysql> select * from examinfo;\n\t+----+---------------------+\n\t| id | endtime             |\n\t+----+---------------------+\n\t|  1 | 2015-11-11 11:11:11 |\n\t+----+---------------------+\n\t1 row in set (0.00 sec)\n\t\n\tmysql> DELIMITER //\n\tmysql> CREATE PROCEDURE test () \n\t    -> begin\n\t    -> update examinfo set endtime=now() where id=1;\n\t    -> end;\n\t    -> //\n\tQuery OK, 0 rows affected (0.00 sec)\n\t```\n\n5. 创建event e_test \n\t```\n\tmysql> CREATE EVENT if not exists e_test \n\t    -> on schedule every 30 second \n\t    -> on completion preserve \n\t    -> do call test(); \n\t    -> //\n\tQuery OK, 0 rows affected (0.00 sec)\n\t\n\t```\n\n\n6.\n\t-\t查看event是否开启: show variables like '%sche%'; \n\t-\t将事件计划开启: set global event_scheduler=1; \n\t-\t关闭事件任务: alter event e_test ON COMPLETION PRESERVE DISABLE; \n\t-\t开启事件任务: alter event e_test ON COMPLETION PRESERVE ENABLE; \n\n7. 查看结果\n\t```\n\tmysql> select * from examinfo//\n\t+----+---------------------+\n\t| id | endtime             |\n\t+----+---------------------+\n\t|  1 | 2015-11-11 12:02:09 |\n\t+----+---------------------+\n\t1 row in set (0.00 sec)\n\t\n\tmysql> select * from examinfo//\n\t+----+---------------------+\n\t| id | endtime             |\n\t+----+---------------------+\n\t|  1 | 2015-11-11 12:02:39 |\n\t+----+---------------------+\n\t1 row in set (0.00 sec)\n\t\n\t```\n到此一个作业就算结束了，这用了存储过程\n\n查看存储过程\n-------------\n*\t方法一：\n\t```\n\tselect `name` from mysql.proc where db = 'your_db_name' and `type` = 'PROCEDURE'\n\t```\n*\t方法二：\n\t```\n\tshow procedure status;\n\t```\n\n查看存储过程或函数的创建代码\n-------------\n```\nshow create procedure proc_name;\nshow create function func_name;\n```\n创建数据库的指定字符编码\n----------------\n```\ncreate database shopmgr character set utf8 collate utf8_general_ci;\n```","slug":"mysql之作业","published":1,"updated":"2015-11-11T09:28:01.000Z","_id":"ciguiltxy0009g0orqu1fssnk","comments":1,"layout":"post","photos":[],"link":""},{"title":"mysql之修改字段默认值","date":"2015-11-10T09:00:18.000Z","_content":"\n\nMySQL修改字段默认值\n==============\n* 解决\n\t```\n\talter table topic alter column cateId set default '2';\n\t```\n* 语法总结\n\t```\n\talter table表名alter column字段名drop default; (若本身存在默认值，则先删除)\n\talter table表名 alter column 字段名 set default默认值;(若本身不存在则可以直接设定)\n\t```","source":"_posts/2015/11/10/mysql之修改字段默认值.md","raw":"title: mysql之修改字段默认值\ndate: 2015-11-10 17:00:18\ncategories:\n- MySql\ntags:\n- MySql\n---\n\n\nMySQL修改字段默认值\n==============\n* 解决\n\t```\n\talter table topic alter column cateId set default '2';\n\t```\n* 语法总结\n\t```\n\talter table表名alter column字段名drop default; (若本身存在默认值，则先删除)\n\talter table表名 alter column 字段名 set default默认值;(若本身不存在则可以直接设定)\n\t```","slug":"mysql之修改字段默认值","published":1,"updated":"2015-11-10T09:01:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilty0000ag0orkfr983np"},{"title":"django之外键的删除","date":"2015-11-10T04:04:24.000Z","_content":"\nDjango的外键使用\n===============\n* Django的models和底层的数据库联系很密切，models之间创建的关联，都直接映射到数据库，是真正的物理关联。\n\ndjango删除外键\n===============\n* Django还是采用级联的删除方式，当你删除一个外键的时候，外键关联的实体也被删除，但在创建models的时候，外键增加了一个可选参数on_delete\n\t```\n\tclass Blog（models.Model）:  \n\t\tuser = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL)\n\t```\n\t当blog对应的user被删除了，blog里的user字段会设置为空值，而不是连同blog也删除掉\n\n* on_delete有多少个选项呢：\n\t-\tCASCADE:这就是默认的选项，级联删除，你无需显性指定它。\n\t-\tPROTECT: 保护模式，如果采用该选项，删除的时候，会抛出ProtectedError错误。\n\t-\tSET_NULL: 置空模式，删除的时候，外键字段被设置为空，前提就是blank=True, null=True,定义该字段的时候，允许为空。\n\t-\tSET_DEFAULT: 置默认值，删除的时候，外键字段设置为默认值，所以定义外键的时候注意加上一个默认值。\n\t-\tSET(): 自定义一个值，该值当然只能是对应的实体了，看一下代码：\t\n\t\t```\n\t\tdef get_sentinel_user():  \n\t\t    return User.objects.get_or_create(username='deleted')[0]  \n\t\t  \n\t\tclass MyModel(models.Model):  \n\t\t    user = models.ForeignKey(User, on_delete=models.SET(get_sentinel_user))\n\t\t```\n\t\t以上的代码，当删除mymodel对应的user的时候，mymodel不会删除掉，而是找到一个名叫 deleted的user，与之重建关联。\n\n手动增加外键\n===============\n\n* 作为外键的model为（该model从数据库中自动产生）：\n\t\n\t```\n\tclass People(models.Model):\n\t    name = models.TextField(primary_key=True, blank=True)  # This field type is a guess.\n\t    entrance_date = models.TextField(blank=True)  # This field type is a guess.\n\t    entrance_semester = models.TextField(blank=True)  # This field type is a guess.\n\t    degree = models.TextField(blank=True)  # This field type is a guess.\n\t    phone_number = models.TextField(blank=True)  # This field type is a guess.\n\t    email = models.TextField(blank=True)  # This field type is a guess.\n\t    qq = models.TextField(blank=True)  # This field type is a guess.\n\t    remarks = models.TextField(blank=True)  # This field type is a guess.\n\t    def __unicode__(self):\n\t        return self.name\n\t    class Meta:\n\t        db_table = u'people'\n\t```\n* 另一Model(Equipment)追加一个字段：\n\t```\n\tlab_user = models.ForeignKey(People)\n\t```\n* 数据库（sqlite3）中新加入一个字段：\n\t```\n\talter table 'equipment' add 'lab_user_id';\n\t```\n* 赋值：\n\t```\n\tupdate equipment set lab_user_id = '张山';\n\t```\n在admin中添加外键search字段\n==================\n若要被search到，search_fields 中添加 lab_user__name 。","source":"_posts/2015/11/10/django之外键的删除.md","raw":"title: django之外键的删除\ndate: 2015-11-10 12:04:24\ncategories:\n- Django\n- 转载\ntags:\n- Django\n---\n\nDjango的外键使用\n===============\n* Django的models和底层的数据库联系很密切，models之间创建的关联，都直接映射到数据库，是真正的物理关联。\n\ndjango删除外键\n===============\n* Django还是采用级联的删除方式，当你删除一个外键的时候，外键关联的实体也被删除，但在创建models的时候，外键增加了一个可选参数on_delete\n\t```\n\tclass Blog（models.Model）:  \n\t\tuser = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL)\n\t```\n\t当blog对应的user被删除了，blog里的user字段会设置为空值，而不是连同blog也删除掉\n\n* on_delete有多少个选项呢：\n\t-\tCASCADE:这就是默认的选项，级联删除，你无需显性指定它。\n\t-\tPROTECT: 保护模式，如果采用该选项，删除的时候，会抛出ProtectedError错误。\n\t-\tSET_NULL: 置空模式，删除的时候，外键字段被设置为空，前提就是blank=True, null=True,定义该字段的时候，允许为空。\n\t-\tSET_DEFAULT: 置默认值，删除的时候，外键字段设置为默认值，所以定义外键的时候注意加上一个默认值。\n\t-\tSET(): 自定义一个值，该值当然只能是对应的实体了，看一下代码：\t\n\t\t```\n\t\tdef get_sentinel_user():  \n\t\t    return User.objects.get_or_create(username='deleted')[0]  \n\t\t  \n\t\tclass MyModel(models.Model):  \n\t\t    user = models.ForeignKey(User, on_delete=models.SET(get_sentinel_user))\n\t\t```\n\t\t以上的代码，当删除mymodel对应的user的时候，mymodel不会删除掉，而是找到一个名叫 deleted的user，与之重建关联。\n\n手动增加外键\n===============\n\n* 作为外键的model为（该model从数据库中自动产生）：\n\t\n\t```\n\tclass People(models.Model):\n\t    name = models.TextField(primary_key=True, blank=True)  # This field type is a guess.\n\t    entrance_date = models.TextField(blank=True)  # This field type is a guess.\n\t    entrance_semester = models.TextField(blank=True)  # This field type is a guess.\n\t    degree = models.TextField(blank=True)  # This field type is a guess.\n\t    phone_number = models.TextField(blank=True)  # This field type is a guess.\n\t    email = models.TextField(blank=True)  # This field type is a guess.\n\t    qq = models.TextField(blank=True)  # This field type is a guess.\n\t    remarks = models.TextField(blank=True)  # This field type is a guess.\n\t    def __unicode__(self):\n\t        return self.name\n\t    class Meta:\n\t        db_table = u'people'\n\t```\n* 另一Model(Equipment)追加一个字段：\n\t```\n\tlab_user = models.ForeignKey(People)\n\t```\n* 数据库（sqlite3）中新加入一个字段：\n\t```\n\talter table 'equipment' add 'lab_user_id';\n\t```\n* 赋值：\n\t```\n\tupdate equipment set lab_user_id = '张山';\n\t```\n在admin中添加外键search字段\n==================\n若要被search到，search_fields 中添加 lab_user__name 。","slug":"django之外键的删除","published":1,"updated":"2015-11-10T06:09:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilty3000fg0oroq4kg340"},{"title":"mysql之update","date":"2015-11-09T02:37:12.000Z","_content":"\nSingle-table语法：\n```\nUPDATE [LOW_PRIORITY] [IGNORE] tbl_name\n    SET col_name1=expr1 [, col_name2=expr2 ...]\n    [WHERE where_definition]\n    [ORDER BY ...]\n    [LIMIT row_count]\n```\nMultiple-table语法：\n```\nUPDATE [LOW_PRIORITY] [IGNORE] table_references\n    SET col_name1=expr1 [, col_name2=expr2 ...]\n    [WHERE where_definition]\n```\nUPDATE语法可以用新值更新原有表行中的各列。SET子句指示要修改哪些列和要给予哪些值。WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。如果指定了ORDER BY子句，则按照被指定的顺序对行进行更新。LIMIT子句用于给定一个限值，限制可以被更新的行的数目。\n\n \n\n如果您在一个表达式中通过tbl_name访问一列，则UPDATE使用列中的当前值。例如，以下语句把年龄列设置为比当前值多一：\n```\nUPDATE persondata SET age=age+1;\n```\nUPDATE赋值被从左到右评估。例如，以下语句对年龄列加倍，然后再进行增加：\n```\nUPDATE persondata SET age=age*2, age=age+1;\n```\n如果您把一列设置为其当前含有的值，则MySQL会注意到这一点，但不会更新。\n\nupdate表的某些字段为null\n```\nupdate person set number=null,name=null;\n```\n如果您把被已定义为NOT NULL的列更新为NULL，则该列被设置到与列类型对应的默认值，并且累加警告数。对于数字类型，默认值为0；对于字符串类型，默认值为空字符串('')；对于日期和时间类型，默认值为“zero”值。\n\n \n\n多个表的UPDATE操作\n\nUPDATE items,month SET items.price=month.price WHERE items.id=month.id;\n以上的例子显示出了使用逗号操作符的内部联合，但是multiple-table UPDATE语句可以使用在SELECT语句中允许的任何类型的联合，比如LEFT JOIN，但是您不能把ORDER BY或LIMIT与multiple-table UPDATE同时使用。\n\n\n\n例子：\n```\nupdate product set contactor_id=57 where id = 491294 ;\n```","source":"_posts/2015/11/09/mysql之update.md","raw":"title: mysql之update\ndate: 2015-11-09 10:37:12\ncategories:\n- MySql\ntags:\n- MySql\n---\n\nSingle-table语法：\n```\nUPDATE [LOW_PRIORITY] [IGNORE] tbl_name\n    SET col_name1=expr1 [, col_name2=expr2 ...]\n    [WHERE where_definition]\n    [ORDER BY ...]\n    [LIMIT row_count]\n```\nMultiple-table语法：\n```\nUPDATE [LOW_PRIORITY] [IGNORE] table_references\n    SET col_name1=expr1 [, col_name2=expr2 ...]\n    [WHERE where_definition]\n```\nUPDATE语法可以用新值更新原有表行中的各列。SET子句指示要修改哪些列和要给予哪些值。WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。如果指定了ORDER BY子句，则按照被指定的顺序对行进行更新。LIMIT子句用于给定一个限值，限制可以被更新的行的数目。\n\n \n\n如果您在一个表达式中通过tbl_name访问一列，则UPDATE使用列中的当前值。例如，以下语句把年龄列设置为比当前值多一：\n```\nUPDATE persondata SET age=age+1;\n```\nUPDATE赋值被从左到右评估。例如，以下语句对年龄列加倍，然后再进行增加：\n```\nUPDATE persondata SET age=age*2, age=age+1;\n```\n如果您把一列设置为其当前含有的值，则MySQL会注意到这一点，但不会更新。\n\nupdate表的某些字段为null\n```\nupdate person set number=null,name=null;\n```\n如果您把被已定义为NOT NULL的列更新为NULL，则该列被设置到与列类型对应的默认值，并且累加警告数。对于数字类型，默认值为0；对于字符串类型，默认值为空字符串('')；对于日期和时间类型，默认值为“zero”值。\n\n \n\n多个表的UPDATE操作\n\nUPDATE items,month SET items.price=month.price WHERE items.id=month.id;\n以上的例子显示出了使用逗号操作符的内部联合，但是multiple-table UPDATE语句可以使用在SELECT语句中允许的任何类型的联合，比如LEFT JOIN，但是您不能把ORDER BY或LIMIT与multiple-table UPDATE同时使用。\n\n\n\n例子：\n```\nupdate product set contactor_id=57 where id = 491294 ;\n```","slug":"mysql之update","published":1,"updated":"2015-11-09T02:43:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilty5000kg0or8das86io"},{"title":"vim之格式化代码","date":"2015-11-07T02:37:21.000Z","_content":"格式化全文： gg=G\n\n自动缩进当前行： ==\n\n这个是原文节选：\n\n14.6. How do I format/indent an entire file?\n\nYou can format/indent an entire file using the gg=G command, where\n\n     gg - Goto the beginning of the file\n     =   - apply indentation\n     G   - till end of file\n\nFor more information, read\n\n     :help gg\n     :help =\n     :help G\n     :help 'formatprg'\n     :help C-indenting\n\n 原文地址 http://hi.baidu.com/seesea8/blog/item/b96c8e51eb8f352743a75b41.html\n另转：\n\n最近在逛CSDN论坛时经常会苦恼一个问题——有些网友贴上去的代码没有用规范的格式贴上去，我贴到VIM里常常会需要手动调整格式，非常麻烦。每当这个时候就异常怀念以前用VC6.0时的ALT+F8……想下VIM作为一个程序员们最贴心的编辑器，显然不会对此坐视不理。经过一番的Search，果然就找到了一些最常用的简单技巧，笔记一下以备后来不时之需。 \nVIM格式化代码： \n格式化全文指令 gg=G \n自动缩进当前行指令 == \n      格式化当前光标接下来的8行 8= \n      格式化选定的行 v 选中需要格式化的代码段 = \n      备注： \ngg —— 到达文件最开始 \n= —— 要求缩进 \nG     —— 直到文件尾 \n注释代码：(这个原理上就是使用VIM的正则替换) \n以C++和Python为例。 \n注释连续行： \n指令格式 :起始行,终止行s/要替换的字符/替换为字符/g \n如， \n      C++源文件中注释掉10~20行，指令为： \n:10,20s/^/////g \nPython源文件中注释掉10~20行，指令为： \n:10,20s/^/#/g \n取消连续行注释： \n指令格式同上。只是要替换字符与替换为字符要互换： \n如， \n      取消C++源文件中的10~20行的注释，指令为： \n:10,20s/^//////g \n取消Python源文件中的10~20行的注释，指令为： \n:10,20s/^#//g\n","source":"_posts/2015/11/07/vim之格式化代码.md","raw":"title: vim之格式化代码\ndate: 2015-11-07 10:37:21\ncategories:\n- Vim\ntags:\n- Vim\n---\n格式化全文： gg=G\n\n自动缩进当前行： ==\n\n这个是原文节选：\n\n14.6. How do I format/indent an entire file?\n\nYou can format/indent an entire file using the gg=G command, where\n\n     gg - Goto the beginning of the file\n     =   - apply indentation\n     G   - till end of file\n\nFor more information, read\n\n     :help gg\n     :help =\n     :help G\n     :help 'formatprg'\n     :help C-indenting\n\n 原文地址 http://hi.baidu.com/seesea8/blog/item/b96c8e51eb8f352743a75b41.html\n另转：\n\n最近在逛CSDN论坛时经常会苦恼一个问题——有些网友贴上去的代码没有用规范的格式贴上去，我贴到VIM里常常会需要手动调整格式，非常麻烦。每当这个时候就异常怀念以前用VC6.0时的ALT+F8……想下VIM作为一个程序员们最贴心的编辑器，显然不会对此坐视不理。经过一番的Search，果然就找到了一些最常用的简单技巧，笔记一下以备后来不时之需。 \nVIM格式化代码： \n格式化全文指令 gg=G \n自动缩进当前行指令 == \n      格式化当前光标接下来的8行 8= \n      格式化选定的行 v 选中需要格式化的代码段 = \n      备注： \ngg —— 到达文件最开始 \n= —— 要求缩进 \nG     —— 直到文件尾 \n注释代码：(这个原理上就是使用VIM的正则替换) \n以C++和Python为例。 \n注释连续行： \n指令格式 :起始行,终止行s/要替换的字符/替换为字符/g \n如， \n      C++源文件中注释掉10~20行，指令为： \n:10,20s/^/////g \nPython源文件中注释掉10~20行，指令为： \n:10,20s/^/#/g \n取消连续行注释： \n指令格式同上。只是要替换字符与替换为字符要互换： \n如， \n      取消C++源文件中的10~20行的注释，指令为： \n:10,20s/^//////g \n取消Python源文件中的10~20行的注释，指令为： \n:10,20s/^#//g\n","slug":"vim之格式化代码","published":1,"updated":"2015-11-09T02:42:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilty7000ng0or5aj9s56a"},{"title":"django之温故知新1","date":"2015-11-07T01:58:02.000Z","_content":"\nPython基础\n=========\n- 注释 —— #\n\n- 变量和赋值\n\t- python 的变量类型是会不断变化的\n\t```\n\tIn [1]: a = \"str\"\n\t\n\tIn [2]: type(a)\n\tOut[2]: str\n\t\n\tIn [3]: a = 1\n\t\n\tIn [4]: type(a)\n\tOut[4]: int\n\t```","source":"_posts/2015/11/07/django之温故知新1.md","raw":"title: django之温故知新1\ndate: 2015-11-07 09:58:02\ncategories:\n- Django\n- 温故知新\ntags:\n- Django\n---\n\nPython基础\n=========\n- 注释 —— #\n\n- 变量和赋值\n\t- python 的变量类型是会不断变化的\n\t```\n\tIn [1]: a = \"str\"\n\t\n\tIn [2]: type(a)\n\tOut[2]: str\n\t\n\tIn [3]: a = 1\n\t\n\tIn [4]: type(a)\n\tOut[4]: int\n\t```","slug":"django之温故知新1","published":1,"updated":"2015-11-07T02:03:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltya000sg0or10n926sx"},{"title":"vim之使用","date":"2015-11-06T02:36:00.000Z","_content":"Vim安装\n=============\n```\nwget -qO- https://raw.github.com/ma6174/vim/master/setup.sh | sh\n```\n```\n#!/bin/bash\necho \"安装将花费一定时间，请耐心等待直到安装完成^_^\"\nif which apt-get >/dev/null; then\n\tsudo apt-get install -y vim vim-gnome ctags xclip astyle python-setuptools python-dev git\nelif which yum >/dev/null; then\n\tsudo yum install -y gcc vim git ctags xclip astyle python-setuptools python-devel\t\nfi\n\n##Add HomeBrew support on  Mac OS\nif which brew >/dev/null;then\n    echo \"You are using HomeBrew tool\"\n    brew install vim ctags git astyle\nfi\n\nsudo easy_install -ZU autopep8 \nsudo ln -s /usr/bin/ctags /usr/local/bin/ctags\nmv -f ~/vim ~/vim_old\ncd ~/ && git clone https://github.com/ma6174/vim.git\nmv -f ~/.vim ~/.vim_old\nmv -f ~/vim ~/.vim\nmv -f ~/.vimrc ~/.vimrc_old\nmv -f ~/.vim/.vimrc ~/\ngit clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\necho \"ma6174正在努力为您安装bundle程序\" > ma6174\necho \"安装完毕将自动退出\" >> ma6174\necho \"请耐心等待\" >> ma6174\nvim ma6174 -c \"BundleInstall\" -c \"q\" -c \"q\"\nrm ma6174\necho \"安装完成\"\n```\n\nVim 使用\n===============\n* :Tlist  #概略图  \n\t- 快捷开关键 <code style=\"color:green\">tl</code>\n* :%d     #清空缓存区\n\n* 格式化全文： gg=G\n\n* 自动缩进当前行： ==\n\n* 关键字搜索\n\t- 用/和？的区别\n\n\t\t/后跟查找的字符串。vim会显示文本中第一个出现的字符串。\n\n\t\t?后跟查找的字符串。vim会显示文本中最后一个出现的字符串。\n\t- 注意事项：\n\n\t\t不管用/还是？查找到第一个字符串后，按回车，vim会高亮所有的匹配文\n\t\t系统新氧ubuntu下默认的是incsearch模式，就是输完命令后，会自动显示第一个（或最后一个）匹配。\n\t\t如果输入：set noincsearch 会转到普通模式，不会自动显示第一个匹配，回车后显示所有匹配。\n\t\t高亮所有的匹配后，按<span style=\"color:red\">n键</span>转到下一个匹配，按N键转到上一个匹配。\n\n[vim 使用](https://github.com/qiwsir/vim/blob/master/tips.md)\n\n\n\n\n\nvim 使用tip\n--------------\n编写python程序\n\n自动插入头信息：\n```\n#!/usr/bin/env python\n# coding=utf-8\n```\n输入.或按TAB键会触发代码补全功能\n\n:w保存代码之后会自动检查代码错误与规范\n\n按F6可以按pep8格式对代码格式优化\n按F5可以一键执行代码\nF3: documents tree\n多窗口操作\n\n* 使用:sp + 文件名可以水平分割窗口\n* 使用:vs + 文件名可以垂直分割窗口\n* 使用Ctrl + w可以快速在窗口间切换\n\n编写markdown文件\n\n编写markdown文件(*.md)的时候，在normal模式下按 md 即可在当前目录下生成相应的html文件\n生成之后还是在normal模式按fi可以使用firefox打开相应的html文件预览\n当然也可以使用万能的F5键来一键转换并打开预览\n如果打开过程中屏幕出现一些混乱信息，可以按Ctrl + l来恢复\n快速注释\n\n按\\ 可以根据文件类型自动注释","source":"_posts/2015/11/06/vim之使用.md","raw":"title: vim之使用\ndate: 2015-11-06 10:36:00\ncategories:\n- Linux\ntags:\n- Linux\n- Vim\n---\nVim安装\n=============\n```\nwget -qO- https://raw.github.com/ma6174/vim/master/setup.sh | sh\n```\n```\n#!/bin/bash\necho \"安装将花费一定时间，请耐心等待直到安装完成^_^\"\nif which apt-get >/dev/null; then\n\tsudo apt-get install -y vim vim-gnome ctags xclip astyle python-setuptools python-dev git\nelif which yum >/dev/null; then\n\tsudo yum install -y gcc vim git ctags xclip astyle python-setuptools python-devel\t\nfi\n\n##Add HomeBrew support on  Mac OS\nif which brew >/dev/null;then\n    echo \"You are using HomeBrew tool\"\n    brew install vim ctags git astyle\nfi\n\nsudo easy_install -ZU autopep8 \nsudo ln -s /usr/bin/ctags /usr/local/bin/ctags\nmv -f ~/vim ~/vim_old\ncd ~/ && git clone https://github.com/ma6174/vim.git\nmv -f ~/.vim ~/.vim_old\nmv -f ~/vim ~/.vim\nmv -f ~/.vimrc ~/.vimrc_old\nmv -f ~/.vim/.vimrc ~/\ngit clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\necho \"ma6174正在努力为您安装bundle程序\" > ma6174\necho \"安装完毕将自动退出\" >> ma6174\necho \"请耐心等待\" >> ma6174\nvim ma6174 -c \"BundleInstall\" -c \"q\" -c \"q\"\nrm ma6174\necho \"安装完成\"\n```\n\nVim 使用\n===============\n* :Tlist  #概略图  \n\t- 快捷开关键 <code style=\"color:green\">tl</code>\n* :%d     #清空缓存区\n\n* 格式化全文： gg=G\n\n* 自动缩进当前行： ==\n\n* 关键字搜索\n\t- 用/和？的区别\n\n\t\t/后跟查找的字符串。vim会显示文本中第一个出现的字符串。\n\n\t\t?后跟查找的字符串。vim会显示文本中最后一个出现的字符串。\n\t- 注意事项：\n\n\t\t不管用/还是？查找到第一个字符串后，按回车，vim会高亮所有的匹配文\n\t\t系统新氧ubuntu下默认的是incsearch模式，就是输完命令后，会自动显示第一个（或最后一个）匹配。\n\t\t如果输入：set noincsearch 会转到普通模式，不会自动显示第一个匹配，回车后显示所有匹配。\n\t\t高亮所有的匹配后，按<span style=\"color:red\">n键</span>转到下一个匹配，按N键转到上一个匹配。\n\n[vim 使用](https://github.com/qiwsir/vim/blob/master/tips.md)\n\n\n\n\n\nvim 使用tip\n--------------\n编写python程序\n\n自动插入头信息：\n```\n#!/usr/bin/env python\n# coding=utf-8\n```\n输入.或按TAB键会触发代码补全功能\n\n:w保存代码之后会自动检查代码错误与规范\n\n按F6可以按pep8格式对代码格式优化\n按F5可以一键执行代码\nF3: documents tree\n多窗口操作\n\n* 使用:sp + 文件名可以水平分割窗口\n* 使用:vs + 文件名可以垂直分割窗口\n* 使用Ctrl + w可以快速在窗口间切换\n\n编写markdown文件\n\n编写markdown文件(*.md)的时候，在normal模式下按 md 即可在当前目录下生成相应的html文件\n生成之后还是在normal模式按fi可以使用firefox打开相应的html文件预览\n当然也可以使用万能的F5键来一键转换并打开预览\n如果打开过程中屏幕出现一些混乱信息，可以按Ctrl + l来恢复\n快速注释\n\n按\\ 可以根据文件类型自动注释","slug":"vim之使用","published":1,"updated":"2015-11-07T04:16:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltyc000xg0ortnmg63oy"},{"title":"Linux下释放内存的方法(转载)","date":"2015-11-06T05:41:15.000Z","_content":"\n释放缓存原因\n================\n- 有些单位自动检测内存，当内存使用率在90%以上时，会报警；\n- 当内存被缓存占满时，当处理一些新信息时就会使用Swap，影响性能。\n \nLinux的缓存机制：Linux会针对dentry（用于VFS，加速文件路径名到inode的转换）、Buffer Cache（针对磁盘块的读写）和Page Cache（针对文件inode的读写）进行缓存操作。\n \n操作步骤\n=================\n1. 查询当前内存使用情况和释放缓存的参数\n\t```\n\t#free -m\n\t#cat /proc/sys/vm/drop_caches\n\t```\n2. 使用sync命令，将系统缓存区中的脏数据写入磁盘中，包括已修改的i-node、已延迟的块I/O和读写映射文件。\n\t```\n\t#sync\n\t```\n3. 配置文件/proc/sys/vm/drop_caches中记录了缓存释放的参数，\n\t\n\t含义：默认0—不释放，1—释放pagecache，2—释放dentries和inodes，3—释放所有缓存\n\t```\n\t#sudo su\n\t#echo 3 > /proc/sys/vm/drop_caches //需要管理员权限\n\t```","source":"_posts/2015/11/06/linux之缓存.md","raw":"title: Linux下释放内存的方法(转载)\ndate: 2015-11-06 13:41:15\ncategories:\n- Linux\n- Ubuntu\ntags:\n- Linux\n---\n\n释放缓存原因\n================\n- 有些单位自动检测内存，当内存使用率在90%以上时，会报警；\n- 当内存被缓存占满时，当处理一些新信息时就会使用Swap，影响性能。\n \nLinux的缓存机制：Linux会针对dentry（用于VFS，加速文件路径名到inode的转换）、Buffer Cache（针对磁盘块的读写）和Page Cache（针对文件inode的读写）进行缓存操作。\n \n操作步骤\n=================\n1. 查询当前内存使用情况和释放缓存的参数\n\t```\n\t#free -m\n\t#cat /proc/sys/vm/drop_caches\n\t```\n2. 使用sync命令，将系统缓存区中的脏数据写入磁盘中，包括已修改的i-node、已延迟的块I/O和读写映射文件。\n\t```\n\t#sync\n\t```\n3. 配置文件/proc/sys/vm/drop_caches中记录了缓存释放的参数，\n\t\n\t含义：默认0—不释放，1—释放pagecache，2—释放dentries和inodes，3—释放所有缓存\n\t```\n\t#sudo su\n\t#echo 3 > /proc/sys/vm/drop_caches //需要管理员权限\n\t```","slug":"linux之缓存","published":1,"updated":"2015-11-06T06:53:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltyf0013g0ors5yseg1b"},{"title":"django之related_name(转载)","date":"2015-11-06T09:54:18.000Z","_content":"[转载地址](http://www.tuicool.com/articles/IZruEfQ)\n\n提供了三种最为通用的数据库关系模型\n\n1. mang-to- many(对对多关系)\n2. many-to- one(多对一关系)\n3. one-to-one(一对一关系)\n\n一、多对一关系：\n=========\n用 ForeignKey 来定义多对一的关系。用法和其他的 Field 是一样的,把它放到模型中类的属性定义中就行了。ForeignKey 需要一个与之相关联的类作为\n位置参数。在这里我用django book中的一个比较经典的实例来和大家一起分享一下：首先，定义了三个模型分别为：Publisher(出版商),Author(作者)和Book(书)\n```\nclass Publisher(models.Model):\n    name = models.CharField(max_length=30)\n    address = models.CharField(max_length=50)\n    city = models.CharField(max_length=60)\n    state_province = models.CharField(max_length=30)\n    country = models.CharField(max_length=50)\n    website = models.URLField()\n\n    def __unicode__(self):\n        return self.name\n\n\nclass Meta:\n    ordering = ['name']\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=40)\n    email = models.EmailField(blank=True)\n\n    def __unicode__(self):\n        return u'%s %s' % (self.first_name, self.last_name)\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author)\n    publisher = models.ForeignKey(Publisher, related_name=\"publisher_set\")\n    publication_date = models.DateField(blank=True, verbose_name='e-mail')\n    num_pages = models.IntegerField(blank=True, null=True)\n    # objects = BookManager()\n    objects = models.Manager()  # The default manager.\n    dahl_objects = DahlBookManager()  # The Dahl-specific manager\n\n    # .\n    def __unicode__(self):\n        return self.title\n```\n\n\n\n要建立一个递归的关系，即一个对象和自身的多对一关系，你可以这样写：\n```\nmodels.ForeignKey('self') :\n\n1 class Employee(models.Model): 2 manager = models.ForeignKey( ' self ' )\n```\n\n如果你创建关系时,所需的模型还没有被定义,你可以不使用模型对象本身,而是使用那个模型的名字。\n\n```\nclass Car(models.Model):\n    manufacturer = models.ForeignKey('Manufacturer')\n    ...\n\nclass Manufacturer(models.Model):\n```\n但是,你要记住,只能对在同一个 models.py 文件中的模型使用字符串引用,对于其他应用程序中的模型或者从其他地方导入\n\n的模型是不能使用名字对其做引用的。\n\nDjango在数据库中使用的列名称是对应的字段的名称后追加 _id 得到的字符串。再前面的那个例子中, Car 模型对应的数据库\n\n表中会有一个名字是 manufacturer_id 的列,(你可以通过指定 db_column 来显式改变这个名字,参见前面\n\n的db_column一节)但是,如果你不需要写定制的SQL语句的话,你永远不要去处理数据库列名,只需要处理你的模型对象中的\n\n字段名称。\n\n在这里有几个概念要讲清楚，当初我就是载在这上面的，希望有同感的朋友可以看到， ForeignKey选项\n\n\n1. edit_inline：\n\n\t如果不设为 False 的话,它对应的对象就可以在页面上内联编辑,就是说这个对象有自 己独立的\n\t\n\t管理界面。如果设为 models.TABULAR 或者 models.STACKED 的话,这个内 联编辑对象分别显\n\t\n\t示成一个表格或者一些字段的集合。\n\n2. limit_choices_to：\n\n\t可以限定对象的值的范围的一个参数和值的字典。结合Python的 datetime 模块的\n\t\n\t函数可以根据日期来限定对象。例如,下面的代码: \n\tlimit_choices_to = {'pub_date__lte': datetime.now} \n\t把可选对象限定到 pub_date 早于当前时间的对象中。 \n\t除字典外,这里也可以是一个可以执行更复杂的查询的 Q 对象 \n\t这个选项和 edit_inline 是不兼容的。\n\t\n3. max_num_in_admin\n\t于内联编辑对象,这个是要在管理界面里显示的相关对象的最多个数。所以,如果披萨最多 只会\n\t\n\t有10种配料, max_num_in_admin=10 会保证用户最多输入10种配料。\n\t\n\t记住,本项并不保证不会创建10种以上的配料,他只是控制管理界面,而不是在Python的API 层和\n\t\n\t数据库层做什么限制。\n\n4. min_num_in_admin\n\t\n\t在管理界面中要显示的相关的对象的最少个数。通常,在创建的时候,显示的内联对象的个数 为\n\t\n\tnum_in_admin 个,在编辑的时候,在当前的基础上又会多显示 num_extra_on_change 个空对\n\t\n\t象,但是显示的对象个数不会少于 min_num_in_admin 个。\n\n5. num_extra_on_change\n\n\t修改对象时要额外显示的对象数目。\n\n6. num_in_admin\n\n\t添加对象时要显示的内联对象的默认个数。\n\n7. raw_id_admin\n\n\t为要键入的整数显示一个文本框,而不是一个下拉列表。在关联对象有很多行时,这个比显示 一个\n\t\n\t列表选择框更实用。\n\t\n\t使用 edit_inline 时,本项无效。\n\n8. related_name\n\n\t关联对象反向引用描述符。\n\n9. to_field\n\n\t关联对象的用于关联的字段,Django默认使用关联对象的主键。\n\t\n\t要学习ForeignKey并了解深刻的话，可以先对以上ForeignKey的这些选项有一定的了解。这样可以加深你对ForeignKey的印象。\n\t\n\t万事俱备，现在，假如你想通过Book这张表去访问Publisher和Author都是可以直接访问的，因为Book这张表中有外键和这两张\n\t\n\t表关联，因此可以直接通过语句去访问Book和Publisher表。\n\n\t```\n\tdef get_info(request, id):\n\t    books = Book.objects.filter(publisher__id=id).all()\n\t    return render_to_response(\"showdb_info.html\", {\n\t        \"books\": books}, context_instance=RequestContext(request))\n\t```\n\t这一步相信大家都是知道的，即使不知道，等你看了笔者的这篇博客之后肯定也会一目了然的。但是，假如反过来该怎么去查询呢？\n\t\n\t（通过Publisher或者Author表查询Book表中的内容）在这里就要用到一个相当重要的 ForeignKey 选项，通过该选项你可以随便访问Books\n\t\n\t中的任意字段。\n\t```\n\tdef get_book_info(request, id):\n\t    publisher = Publisher.objects.filter(publisher_set__id = id)\n\t    return render_to_response(\"showdb_info.html\",{\n\t        \"publisher\": publisher,\n\t    },\n\t     context_instance=RequestContext(request))\n\t```","source":"_posts/2015/11/06/django之related-name.md","raw":"title: django之related_name(转载)\ndate: 2015-11-06 17:54:18\ncategories:\n- Django\n- 转载\ntags:\n- Django\n---\n[转载地址](http://www.tuicool.com/articles/IZruEfQ)\n\n提供了三种最为通用的数据库关系模型\n\n1. mang-to- many(对对多关系)\n2. many-to- one(多对一关系)\n3. one-to-one(一对一关系)\n\n一、多对一关系：\n=========\n用 ForeignKey 来定义多对一的关系。用法和其他的 Field 是一样的,把它放到模型中类的属性定义中就行了。ForeignKey 需要一个与之相关联的类作为\n位置参数。在这里我用django book中的一个比较经典的实例来和大家一起分享一下：首先，定义了三个模型分别为：Publisher(出版商),Author(作者)和Book(书)\n```\nclass Publisher(models.Model):\n    name = models.CharField(max_length=30)\n    address = models.CharField(max_length=50)\n    city = models.CharField(max_length=60)\n    state_province = models.CharField(max_length=30)\n    country = models.CharField(max_length=50)\n    website = models.URLField()\n\n    def __unicode__(self):\n        return self.name\n\n\nclass Meta:\n    ordering = ['name']\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=40)\n    email = models.EmailField(blank=True)\n\n    def __unicode__(self):\n        return u'%s %s' % (self.first_name, self.last_name)\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author)\n    publisher = models.ForeignKey(Publisher, related_name=\"publisher_set\")\n    publication_date = models.DateField(blank=True, verbose_name='e-mail')\n    num_pages = models.IntegerField(blank=True, null=True)\n    # objects = BookManager()\n    objects = models.Manager()  # The default manager.\n    dahl_objects = DahlBookManager()  # The Dahl-specific manager\n\n    # .\n    def __unicode__(self):\n        return self.title\n```\n\n\n\n要建立一个递归的关系，即一个对象和自身的多对一关系，你可以这样写：\n```\nmodels.ForeignKey('self') :\n\n1 class Employee(models.Model): 2 manager = models.ForeignKey( ' self ' )\n```\n\n如果你创建关系时,所需的模型还没有被定义,你可以不使用模型对象本身,而是使用那个模型的名字。\n\n```\nclass Car(models.Model):\n    manufacturer = models.ForeignKey('Manufacturer')\n    ...\n\nclass Manufacturer(models.Model):\n```\n但是,你要记住,只能对在同一个 models.py 文件中的模型使用字符串引用,对于其他应用程序中的模型或者从其他地方导入\n\n的模型是不能使用名字对其做引用的。\n\nDjango在数据库中使用的列名称是对应的字段的名称后追加 _id 得到的字符串。再前面的那个例子中, Car 模型对应的数据库\n\n表中会有一个名字是 manufacturer_id 的列,(你可以通过指定 db_column 来显式改变这个名字,参见前面\n\n的db_column一节)但是,如果你不需要写定制的SQL语句的话,你永远不要去处理数据库列名,只需要处理你的模型对象中的\n\n字段名称。\n\n在这里有几个概念要讲清楚，当初我就是载在这上面的，希望有同感的朋友可以看到， ForeignKey选项\n\n\n1. edit_inline：\n\n\t如果不设为 False 的话,它对应的对象就可以在页面上内联编辑,就是说这个对象有自 己独立的\n\t\n\t管理界面。如果设为 models.TABULAR 或者 models.STACKED 的话,这个内 联编辑对象分别显\n\t\n\t示成一个表格或者一些字段的集合。\n\n2. limit_choices_to：\n\n\t可以限定对象的值的范围的一个参数和值的字典。结合Python的 datetime 模块的\n\t\n\t函数可以根据日期来限定对象。例如,下面的代码: \n\tlimit_choices_to = {'pub_date__lte': datetime.now} \n\t把可选对象限定到 pub_date 早于当前时间的对象中。 \n\t除字典外,这里也可以是一个可以执行更复杂的查询的 Q 对象 \n\t这个选项和 edit_inline 是不兼容的。\n\t\n3. max_num_in_admin\n\t于内联编辑对象,这个是要在管理界面里显示的相关对象的最多个数。所以,如果披萨最多 只会\n\t\n\t有10种配料, max_num_in_admin=10 会保证用户最多输入10种配料。\n\t\n\t记住,本项并不保证不会创建10种以上的配料,他只是控制管理界面,而不是在Python的API 层和\n\t\n\t数据库层做什么限制。\n\n4. min_num_in_admin\n\t\n\t在管理界面中要显示的相关的对象的最少个数。通常,在创建的时候,显示的内联对象的个数 为\n\t\n\tnum_in_admin 个,在编辑的时候,在当前的基础上又会多显示 num_extra_on_change 个空对\n\t\n\t象,但是显示的对象个数不会少于 min_num_in_admin 个。\n\n5. num_extra_on_change\n\n\t修改对象时要额外显示的对象数目。\n\n6. num_in_admin\n\n\t添加对象时要显示的内联对象的默认个数。\n\n7. raw_id_admin\n\n\t为要键入的整数显示一个文本框,而不是一个下拉列表。在关联对象有很多行时,这个比显示 一个\n\t\n\t列表选择框更实用。\n\t\n\t使用 edit_inline 时,本项无效。\n\n8. related_name\n\n\t关联对象反向引用描述符。\n\n9. to_field\n\n\t关联对象的用于关联的字段,Django默认使用关联对象的主键。\n\t\n\t要学习ForeignKey并了解深刻的话，可以先对以上ForeignKey的这些选项有一定的了解。这样可以加深你对ForeignKey的印象。\n\t\n\t万事俱备，现在，假如你想通过Book这张表去访问Publisher和Author都是可以直接访问的，因为Book这张表中有外键和这两张\n\t\n\t表关联，因此可以直接通过语句去访问Book和Publisher表。\n\n\t```\n\tdef get_info(request, id):\n\t    books = Book.objects.filter(publisher__id=id).all()\n\t    return render_to_response(\"showdb_info.html\", {\n\t        \"books\": books}, context_instance=RequestContext(request))\n\t```\n\t这一步相信大家都是知道的，即使不知道，等你看了笔者的这篇博客之后肯定也会一目了然的。但是，假如反过来该怎么去查询呢？\n\t\n\t（通过Publisher或者Author表查询Book表中的内容）在这里就要用到一个相当重要的 ForeignKey 选项，通过该选项你可以随便访问Books\n\t\n\t中的任意字段。\n\t```\n\tdef get_book_info(request, id):\n\t    publisher = Publisher.objects.filter(publisher_set__id = id)\n\t    return render_to_response(\"showdb_info.html\",{\n\t        \"publisher\": publisher,\n\t    },\n\t     context_instance=RequestContext(request))\n\t```","slug":"django之related-name","published":1,"updated":"2015-11-07T06:05:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltyk0018g0orv8law922"},{"title":"ubuntu之装机必备","date":"2015-11-05T02:19:22.000Z","_content":"我的装机必备软件（持续更新～）\n=============\n* 系统\n\t- 更换源\n\t- synergy 多电脑共享\n\t- Lantern \n\t- sudo apt-get install mysql-server\n\t- sudo apt-get install git\n\t- sudo apt-get install vim\n\t- sudo apt-get install curl  \n\t\n* Node\n\t- 安装 Node.js\n\t\t安装 Node.js 的最佳方式是使用 nvm。\n\t\t\n\t- cURL:\n\t\t\n\t\t$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n\t- Wget:\n\t\t\n\t\t$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n\t\t安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\t\t\n\t- $ nvm install 0.12.0\n* virtualenv\n\t- sudo apt-get install python-pip # 包管理\n\t- pip install virtualenv\n\n* hexo\n\t- npm install --unsafe-perm -g hexo-cli  \n\t- npm install hexo-server --save\n\t- npm config set user 0\n\t- npm config set unsafe-perm true\n\n\n* sudo apt-get install ipython  #高级的交互解释器","source":"_posts/2015/11/05/ubuntu之装机必备.md","raw":"title: ubuntu之装机必备\ndate: 2015-11-05 10:19:22\ncategories:\n- Linux\n- Ubuntu\ntags:\n- Linux\n---\n我的装机必备软件（持续更新～）\n=============\n* 系统\n\t- 更换源\n\t- synergy 多电脑共享\n\t- Lantern \n\t- sudo apt-get install mysql-server\n\t- sudo apt-get install git\n\t- sudo apt-get install vim\n\t- sudo apt-get install curl  \n\t\n* Node\n\t- 安装 Node.js\n\t\t安装 Node.js 的最佳方式是使用 nvm。\n\t\t\n\t- cURL:\n\t\t\n\t\t$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n\t- Wget:\n\t\t\n\t\t$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n\t\t安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\t\t\n\t- $ nvm install 0.12.0\n* virtualenv\n\t- sudo apt-get install python-pip # 包管理\n\t- pip install virtualenv\n\n* hexo\n\t- npm install --unsafe-perm -g hexo-cli  \n\t- npm install hexo-server --save\n\t- npm config set user 0\n\t- npm config set unsafe-perm true\n\n\n* sudo apt-get install ipython  #高级的交互解释器","slug":"ubuntu之装机必备","published":1,"updated":"2015-11-07T01:55:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltyp001cg0ora7bjlx4w"},{"title":"js之闭包","date":"2015-11-05T13:34:42.000Z","_content":"js闭包(转载)\n=============\n\n一、什么是闭包？ \n-------------\n“官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。 \n\n相信很少有人能直接看懂这句话，因为他描述的太学术。其实这句话通俗的来说就是：JavaScript中所有的function都是一个闭包。不过一般来说，嵌套的function所产生的闭包更为强大，也是大部分时候我们所谓的“闭包”。看下面这段代码： \n```\nfunction a() { \n    var i = 0; \n    function b() { \n        alert(++i); \n    } \n    return b; \n} \nvar c = a(); \nc(); \n```\n这段代码有两个特点： \n\n函数b嵌套在函数a内部； \n函数a返回函数b。 \n\n这样在执行完var c=a()后，变量c实际上是指向了函数b，b中用到了变量i，再执行c()后就会弹出一个窗口显示i的值(第一次为1)。这段代码其实就创建了一个闭包，为什么？因为函数a外的变量c引用了函数a内的函数b，就是说： \n\n\n当函数a的内部函数b被函数a外的一个变量引用的时候，就创建了一个我们通常所谓的“闭包”。 \n\n让我们说的更透彻一些。所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。 \n\n为了更深刻的理解闭包，下面让我们继续探索闭包的作用和效果。 \n\n二、闭包有什么作用和效果？ \n===============\n简而言之，闭包的作用就是在a执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回a所占用的资源，因为a的内部函数b的执行需要依赖a中的变量。这是对闭包作用的非常直白的描述，不专业也不严谨，但大概意思就是这样，理解闭包需要循序渐进的过程。 \n在上面的例子中，由于闭包的存在使得函数a返回后，a中的i始终存在，这样每次执行c()，i都是自加1后alert出i的值。 \n\n那么我们来想象另一种情况，如果a返回的不是函数b，情况就完全不同了。因为a执行完后，b没有被返回给a的外界，只是被a所引用，而此时a也只会被b引用，因此函数a和b互相引用但又不被外界打扰(被外界引用)，函数a和b就会被GC回收。(关于Javascript的垃圾回收机制将在后面详细介绍) \n\n三、闭包的微观世界 \n如果要更加深入的了解闭包以及函数a和嵌套函数b的关系，我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。以函数a从定义到执行的过程为例阐述这几个概念。 \n\n当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。 \n当执行函数a的时候，a会进入相应的执行环境(excution context)。 \n在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。 \n然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。 \n下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。 \n最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。 \n到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。 \n四、闭包的应用场景 \n保护函数内的变量安全。以最开始的例子为例，函数a中i只有函数b才能访问，而无法通过其他途径访问到，因此保护了i的安全性。 \n在内存中维持一个变量。依然如前例，由于闭包，函数a中i的一直存在于内存中，因此每次执行c()，都会给i自加1。 \n通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）推荐阅读：http://javascript.crockford.com/private.html \n私有属性和方法在Constructor外是无法被访问的 \n\nfunction Constructor(...) { \n    var that = this; \n    var membername = value; \n    function membername(...) {...} \n} \n以上3点是闭包最基本的应用场景，很多经典案例都源于此。\n \n//******************************************************************************\n复制代码\n//返回价格列表\nvar loadPriceList = Class($_$, {\n    creat: function () { },\n    loadPriceList: function () {\n        var J = $(\"div[lang]\").get(),\n   _J = J.length,\n   K = Math.ceil(_J / 5),\n   L = [],\n   TT = [],\n   M, N, O, A;\n        for (M = 0; M < K; M++) {\n            if (M < K) {\n                N = J.slice(0, 5);\n                L.push(N);\n                J.splice(0, 5)\n            }\n        }        \n        for (O = 0; O < K; O++) {\n            var B;\n            for (B = 0; B < L[O].length; B++) {\n                var P = L[O][B].lang;\n                ajaxPList(P)\n            }\n        }\n    }\n})\nfunction ajaxPList(P) {\n    var aArr = P.split(\"|\");   \n    $.ajax({\n    async: true,\n    type: \"GET\",\n    url: aArr[1],\n    dataType: 'html',\n    cache: false,\n    error: function () {\n    },\n    success: function (html) {\n        $(\"#price_\" + aArr[0]).html(html);\n    }\n  });   \n}\n复制代码","source":"_posts/2015/11/05/js之闭包.md","raw":"title: js之闭包\ndate: 2015-11-05 21:34:42\ncategories:\n- Js\n- 前端\ntags:\n- Js\n---\njs闭包(转载)\n=============\n\n一、什么是闭包？ \n-------------\n“官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。 \n\n相信很少有人能直接看懂这句话，因为他描述的太学术。其实这句话通俗的来说就是：JavaScript中所有的function都是一个闭包。不过一般来说，嵌套的function所产生的闭包更为强大，也是大部分时候我们所谓的“闭包”。看下面这段代码： \n```\nfunction a() { \n    var i = 0; \n    function b() { \n        alert(++i); \n    } \n    return b; \n} \nvar c = a(); \nc(); \n```\n这段代码有两个特点： \n\n函数b嵌套在函数a内部； \n函数a返回函数b。 \n\n这样在执行完var c=a()后，变量c实际上是指向了函数b，b中用到了变量i，再执行c()后就会弹出一个窗口显示i的值(第一次为1)。这段代码其实就创建了一个闭包，为什么？因为函数a外的变量c引用了函数a内的函数b，就是说： \n\n\n当函数a的内部函数b被函数a外的一个变量引用的时候，就创建了一个我们通常所谓的“闭包”。 \n\n让我们说的更透彻一些。所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。 \n\n为了更深刻的理解闭包，下面让我们继续探索闭包的作用和效果。 \n\n二、闭包有什么作用和效果？ \n===============\n简而言之，闭包的作用就是在a执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回a所占用的资源，因为a的内部函数b的执行需要依赖a中的变量。这是对闭包作用的非常直白的描述，不专业也不严谨，但大概意思就是这样，理解闭包需要循序渐进的过程。 \n在上面的例子中，由于闭包的存在使得函数a返回后，a中的i始终存在，这样每次执行c()，i都是自加1后alert出i的值。 \n\n那么我们来想象另一种情况，如果a返回的不是函数b，情况就完全不同了。因为a执行完后，b没有被返回给a的外界，只是被a所引用，而此时a也只会被b引用，因此函数a和b互相引用但又不被外界打扰(被外界引用)，函数a和b就会被GC回收。(关于Javascript的垃圾回收机制将在后面详细介绍) \n\n三、闭包的微观世界 \n如果要更加深入的了解闭包以及函数a和嵌套函数b的关系，我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。以函数a从定义到执行的过程为例阐述这几个概念。 \n\n当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。 \n当执行函数a的时候，a会进入相应的执行环境(excution context)。 \n在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。 \n然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。 \n下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。 \n最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。 \n到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。 \n四、闭包的应用场景 \n保护函数内的变量安全。以最开始的例子为例，函数a中i只有函数b才能访问，而无法通过其他途径访问到，因此保护了i的安全性。 \n在内存中维持一个变量。依然如前例，由于闭包，函数a中i的一直存在于内存中，因此每次执行c()，都会给i自加1。 \n通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）推荐阅读：http://javascript.crockford.com/private.html \n私有属性和方法在Constructor外是无法被访问的 \n\nfunction Constructor(...) { \n    var that = this; \n    var membername = value; \n    function membername(...) {...} \n} \n以上3点是闭包最基本的应用场景，很多经典案例都源于此。\n \n//******************************************************************************\n复制代码\n//返回价格列表\nvar loadPriceList = Class($_$, {\n    creat: function () { },\n    loadPriceList: function () {\n        var J = $(\"div[lang]\").get(),\n   _J = J.length,\n   K = Math.ceil(_J / 5),\n   L = [],\n   TT = [],\n   M, N, O, A;\n        for (M = 0; M < K; M++) {\n            if (M < K) {\n                N = J.slice(0, 5);\n                L.push(N);\n                J.splice(0, 5)\n            }\n        }        \n        for (O = 0; O < K; O++) {\n            var B;\n            for (B = 0; B < L[O].length; B++) {\n                var P = L[O][B].lang;\n                ajaxPList(P)\n            }\n        }\n    }\n})\nfunction ajaxPList(P) {\n    var aArr = P.split(\"|\");   \n    $.ajax({\n    async: true,\n    type: \"GET\",\n    url: aArr[1],\n    dataType: 'html',\n    cache: false,\n    error: function () {\n    },\n    success: function (html) {\n        $(\"#price_\" + aArr[0]).html(html);\n    }\n  });   \n}\n复制代码","slug":"js之闭包","published":1,"updated":"2015-11-06T06:50:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltyt001gg0or9yflqkuo"},{"title":"mysql之1292","date":"2015-11-03T01:15:41.000Z","_content":"\nmysql 1292错误：Warning 1292 Truncated incorrect DOUBLE value:\n===================\n\nLook at this line \"where PremiseID = \" + str(premiseID) + \" ; \"])\". The comparison is happening on different types and when MySQL compares different datatypes they are cast to DOUBLE internally before comparison. So you can try putting single quote around or cast around to solve the issue. So it's not try catch but the quotes which resolve the issue.","source":"_posts/2015/11/03/mysql之1292.md","raw":"title: mysql之1292\ndate: 2015-11-03 09:15:41\ncategories:\n- Mysql\ntags: \n- Mysql\n---\n\nmysql 1292错误：Warning 1292 Truncated incorrect DOUBLE value:\n===================\n\nLook at this line \"where PremiseID = \" + str(premiseID) + \" ; \"])\". The comparison is happening on different types and when MySQL compares different datatypes they are cast to DOUBLE internally before comparison. So you can try putting single quote around or cast around to solve the issue. So it's not try catch but the quotes which resolve the issue.","slug":"mysql之1292","published":1,"updated":"2015-11-03T02:43:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltyx001ng0ornphf8wyg"},{"title":"python之input","date":"2015-11-02T01:40:58.000Z","_content":"\n\nraw_input() 与 input()\n=====================\n\n这两个均是 python 的内建函数，通过读取控制台的输入与用户实现交互。但他们的功能不尽相同。举两个小例子。\n\n* 例子1\n\t``` \n\t>>> raw_input_A = raw_input(\"raw_input: \")\n\traw_input: test\n\t>>> input_A = input(\"Input: \")\n\tInput: abc\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\t  File \"<string>\", line 1, in <module>\n\tNameError: name 'abc' is not defined\n\t```\n* 例子2\n\t```\n\t>>> raw_input_B = raw_input(\"raw_input: \")\n\traw_input: 123\n\t>>> type(raw_input_B)\n\t<type 'str'>\n\t>>> input_B = input(\"input: \")\n\tinput: 123\n\t>>> type(input_B)\n\t<type 'int'>\n\t```\n例子1 可以看到：这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。\n\n例子2 可以看到：raw_input() 将所有输入作为字符串看待，返回字符串类型。而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ int, float ）；同时在例子 1 知道，input() 可接受合法的 python 表达式，举例：input( 1 + 3 ) 会返回 int 型的 4 。\n\n查看 [Built-in Functions](https://docs.python.org/2/library/functions.html#built-in-functions) ，得知：\n```\ninput([prompt])\n    Equivalent to eval(raw_input(prompt)) \n```\n\ninput() 本质上还是使用 raw_input() 来实现的，只是调用完 raw_input() 之后再调用 eval() 函数，所以，你甚至可以将表达式作为 input() 的参数，并且它会计算表达式的值并返回它。\n\n不过在 Built-in Functions 里有一句话是这样写的：Consider using the raw_input() function for general input from users.\n\n除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。\n\n-------\n![python](http://huangyan.qiniudn.com/python-cha.jpg?imageMogr2/thumbnail/400x200 \"python\")\n使用了 raw_input() 接受整数（返回的是字符串）并再用一行语句返回整型数据。\n\n","source":"_posts/2015/11/02/python之input.md","raw":"title: python之input\ndate: 2015-11-02 09:40:58\ncategories:\n- Python\ntags: \n- Python\n---\n\n\nraw_input() 与 input()\n=====================\n\n这两个均是 python 的内建函数，通过读取控制台的输入与用户实现交互。但他们的功能不尽相同。举两个小例子。\n\n* 例子1\n\t``` \n\t>>> raw_input_A = raw_input(\"raw_input: \")\n\traw_input: test\n\t>>> input_A = input(\"Input: \")\n\tInput: abc\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\t  File \"<string>\", line 1, in <module>\n\tNameError: name 'abc' is not defined\n\t```\n* 例子2\n\t```\n\t>>> raw_input_B = raw_input(\"raw_input: \")\n\traw_input: 123\n\t>>> type(raw_input_B)\n\t<type 'str'>\n\t>>> input_B = input(\"input: \")\n\tinput: 123\n\t>>> type(input_B)\n\t<type 'int'>\n\t```\n例子1 可以看到：这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。\n\n例子2 可以看到：raw_input() 将所有输入作为字符串看待，返回字符串类型。而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ int, float ）；同时在例子 1 知道，input() 可接受合法的 python 表达式，举例：input( 1 + 3 ) 会返回 int 型的 4 。\n\n查看 [Built-in Functions](https://docs.python.org/2/library/functions.html#built-in-functions) ，得知：\n```\ninput([prompt])\n    Equivalent to eval(raw_input(prompt)) \n```\n\ninput() 本质上还是使用 raw_input() 来实现的，只是调用完 raw_input() 之后再调用 eval() 函数，所以，你甚至可以将表达式作为 input() 的参数，并且它会计算表达式的值并返回它。\n\n不过在 Built-in Functions 里有一句话是这样写的：Consider using the raw_input() function for general input from users.\n\n除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。\n\n-------\n![python](http://huangyan.qiniudn.com/python-cha.jpg?imageMogr2/thumbnail/400x200 \"python\")\n使用了 raw_input() 接受整数（返回的是字符串）并再用一行语句返回整型数据。\n\n","slug":"python之input","published":1,"updated":"2015-11-02T05:20:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltz0001sg0orxbwfbcw9"},{"title":"python列表解析","date":"2015-10-30T09:51:36.000Z","_content":"\n\n列表解析\n===================\n简单介绍\n--------------\n在一个序列的值上应用一个任意表达式，将其结果收集到一个新的列表中并返回。它的基本形式是一个方括号里面包含一个for语句对一个iterable对象迭代\n```\n>>> res=[ord(x) for x in 'spam']\n>>> res  \n[115, 112, 97, 109]  \n>>> [x**2 for x in range(10)]  \n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  \n```\n[--ord函数](http://cyan-blue.github.io/2015/10/30/python之ord/)\n\n增加判断语句和嵌套循环\n--------------\n<code style=\"color:green\">[expression for target1 in iterable1 [if condition1]...\n                      for targetn in iterablen [if conditionn] ]</code>\n\n上面是列表解析中，任意数量嵌套的for循环同时关联可选的if 测试，其中if 表示测试语句是可选的，如果没有的话，就是我们上面的例子，注意for上下之间表示的是一个嵌套关系。\n第一个是表达式，比较形式[(x,y), [0,2,4],[1,3]]与下面形式的区别\n```\nIn [1]: [(x,y) for x in range(5) if x % 2==0 for y in range(5) if y % 2 ==1] \nOut[1]: [(0, 1), (0, 3), (2, 1), (2, 3), (4, 1), (4, 3)] \n```\nmap、lambda、filter的组合同样会达到一个进行测试的效果，但是如何实现嵌套我现在不太清楚\n```\nIn [4]: list(map((lambda x:x**2),filter((lambda x:x%2==0),range(10))))  \nOut[4]: [0, 4, 16, 36, 64] \n```\n因为map的逻辑是每次都从后面序列中取出一个，以最少的为标准。\n```\nIn [12]: list(map((lambda x,y:(x,y)),filter((lambda x:x%2==0),range(5)),filter((lambda y:y%2==0),range(5))))\nOut[12]: [(0, 0), (2, 2), (4, 4)]\n\nIn [13]: list(map((lambda x,y:(x,y)),filter((lambda x:x%2==1),range(5)),filter((lambda y:y%2==1),range(5))))\nOut[13]: [(1, 1), (3, 3)] \n```\n\n\n<span style=\"color:red\">列表解析map和列表解析是在解释器中以c语言的速度来运行，比python的for循环代码在pvm中运行要快的多。</span>\n```\nIn [25]: open(\"test.txt\").readlines()\nOut[25]: ['aaa\\n', 'bbb\\n', 'ccc\\n']\n\nIn [27]: [line.rstrip() for line in open(\"test.txt\").readlines()]  #消除文件中的换行  \nOut[27]: ['aaa', 'bbb', 'ccc']\n\nIn [28]: [line.rstrip() for line in open(\"test.txt\")]\nOut[28]: ['aaa', 'bbb', 'ccc']\n\nIn [29]: list(map((lambda line: line.rstrip()), open(\"test.txt\")))\nOut[29]: ['aaa', 'bbb', 'ccc']\n \n```\n\n* 第一种方式：因为readlines()方法，把整个文件都放入到内存中。然后对string进行解析\n* 第二种方式：使用了文件迭代器，进行列表解析。\n* 第三种方式：Map同样使用了文件迭代器，但是它不是列表解析，因为它两边不是[]引起来的。\n上面二，三方式使用了迭代器，都不会一次性构建列表，所以节省了内存空间。\n\n\n![python](http://huangyan.qiniudn.com/xiigua.jpg?imageMogr2/thumbnail/400x200 \"python\")","source":"_posts/2015/10/30/python列表解析.md","raw":"title: python列表解析\ndate: 2015-10-30 17:51:36\ncategories:\n- Python\ntags:\n- Python\n---\n\n\n列表解析\n===================\n简单介绍\n--------------\n在一个序列的值上应用一个任意表达式，将其结果收集到一个新的列表中并返回。它的基本形式是一个方括号里面包含一个for语句对一个iterable对象迭代\n```\n>>> res=[ord(x) for x in 'spam']\n>>> res  \n[115, 112, 97, 109]  \n>>> [x**2 for x in range(10)]  \n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  \n```\n[--ord函数](http://cyan-blue.github.io/2015/10/30/python之ord/)\n\n增加判断语句和嵌套循环\n--------------\n<code style=\"color:green\">[expression for target1 in iterable1 [if condition1]...\n                      for targetn in iterablen [if conditionn] ]</code>\n\n上面是列表解析中，任意数量嵌套的for循环同时关联可选的if 测试，其中if 表示测试语句是可选的，如果没有的话，就是我们上面的例子，注意for上下之间表示的是一个嵌套关系。\n第一个是表达式，比较形式[(x,y), [0,2,4],[1,3]]与下面形式的区别\n```\nIn [1]: [(x,y) for x in range(5) if x % 2==0 for y in range(5) if y % 2 ==1] \nOut[1]: [(0, 1), (0, 3), (2, 1), (2, 3), (4, 1), (4, 3)] \n```\nmap、lambda、filter的组合同样会达到一个进行测试的效果，但是如何实现嵌套我现在不太清楚\n```\nIn [4]: list(map((lambda x:x**2),filter((lambda x:x%2==0),range(10))))  \nOut[4]: [0, 4, 16, 36, 64] \n```\n因为map的逻辑是每次都从后面序列中取出一个，以最少的为标准。\n```\nIn [12]: list(map((lambda x,y:(x,y)),filter((lambda x:x%2==0),range(5)),filter((lambda y:y%2==0),range(5))))\nOut[12]: [(0, 0), (2, 2), (4, 4)]\n\nIn [13]: list(map((lambda x,y:(x,y)),filter((lambda x:x%2==1),range(5)),filter((lambda y:y%2==1),range(5))))\nOut[13]: [(1, 1), (3, 3)] \n```\n\n\n<span style=\"color:red\">列表解析map和列表解析是在解释器中以c语言的速度来运行，比python的for循环代码在pvm中运行要快的多。</span>\n```\nIn [25]: open(\"test.txt\").readlines()\nOut[25]: ['aaa\\n', 'bbb\\n', 'ccc\\n']\n\nIn [27]: [line.rstrip() for line in open(\"test.txt\").readlines()]  #消除文件中的换行  \nOut[27]: ['aaa', 'bbb', 'ccc']\n\nIn [28]: [line.rstrip() for line in open(\"test.txt\")]\nOut[28]: ['aaa', 'bbb', 'ccc']\n\nIn [29]: list(map((lambda line: line.rstrip()), open(\"test.txt\")))\nOut[29]: ['aaa', 'bbb', 'ccc']\n \n```\n\n* 第一种方式：因为readlines()方法，把整个文件都放入到内存中。然后对string进行解析\n* 第二种方式：使用了文件迭代器，进行列表解析。\n* 第三种方式：Map同样使用了文件迭代器，但是它不是列表解析，因为它两边不是[]引起来的。\n上面二，三方式使用了迭代器，都不会一次性构建列表，所以节省了内存空间。\n\n\n![python](http://huangyan.qiniudn.com/xiigua.jpg?imageMogr2/thumbnail/400x200 \"python\")","slug":"python列表解析","published":1,"updated":"2015-10-30T13:09:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltz3001xg0oraiqg3z2x"},{"title":"python之ord&unichr&chr","date":"2015-10-30T11:54:32.000Z","_content":"\n\nchr()、unichr()和ord()\n==================\nchr()\n---------------\n* chr()函数用一个范围在range（256）内的（就是0～255）整数作参数，返回一个对应的字符。\n\t\n\t```\n\tIn [6]: chr(65)\n\tOut[6]: 'A'\n\t\n\t```\n* 如果参数超过255,则会出现一下情况：\n\t```\n\tIn [7]: chr(256)\n\t---------------------------------------------------------------------------\n\tValueError                                Traceback (most recent call last)\n\t/home/yann/<ipython-input-7-d39eeb802699> in <module>()\n\t----> 1 chr(1230312)\n\t\n\tValueError: chr() arg not in range(256)\n\t\n\t```\nunichr()\n----------------\nunichr()跟它一样，只不过返回的是Unicode字符，这个从Python 2.0才加入的unichr()的参数范围依赖于你的Python是如何被编译的。\n* 如果是配置为USC2的Unicode，那么它的允许范围就是range（65536）或0x0000-0xFFFF；\n* 如果配置为UCS4，那么这个值应该是range（1114112）或0x000000-0x110000。如果提供的参数不在允许的范围内，也会报一个ValueError的异常。\n\t```\n\tIn [20]: unichr(1114111)\n\tOut[20]: u'\\U0010ffff'\n\t\n\tIn [21]: unichr(1114112)\n\t---------------------------------------------------------------------------\n\tValueError                                Traceback (most recent call last)\n\t/home/yann/<ipython-input-21-37377890b3ae> in <module>()\n\t----> 1 unichr(1114112)\n\t\n\tValueError: unichr() arg not in range(0x110000) (wide Python build)\n\t\n\t```\n\nord()\n--------------\nord()函数是chr()函数（对于8位的ASCII字符串）或unichr()函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的ASCII数值，或者Unicode数值，如果所给的Unicode字符超出了你的Python定义范围，则会引发一个TypeError的异常。\n```\nIn [39]: ord(u'\\uffff')\nOut[39]: 65535\n\nIn [40]: ord(u'\\ufffff')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/home/yann/<ipython-input-40-a3e8d80a6141> in <module>()\n----> 1 ord(u'\\ufffff')\n\nTypeError: ord() expected a character, but string of length 2 found\n\n```\n\n![python](http://huangyan.qiniudn.com/bird.jpg?imageMogr2/thumbnail/400x200 \"python\")","source":"_posts/2015/10/30/python之ord.md","raw":"title: python之ord&unichr&chr\ndate: 2015-10-30 19:54:32\ncategories:\n- Python\ntags: Python\n---\n\n\nchr()、unichr()和ord()\n==================\nchr()\n---------------\n* chr()函数用一个范围在range（256）内的（就是0～255）整数作参数，返回一个对应的字符。\n\t\n\t```\n\tIn [6]: chr(65)\n\tOut[6]: 'A'\n\t\n\t```\n* 如果参数超过255,则会出现一下情况：\n\t```\n\tIn [7]: chr(256)\n\t---------------------------------------------------------------------------\n\tValueError                                Traceback (most recent call last)\n\t/home/yann/<ipython-input-7-d39eeb802699> in <module>()\n\t----> 1 chr(1230312)\n\t\n\tValueError: chr() arg not in range(256)\n\t\n\t```\nunichr()\n----------------\nunichr()跟它一样，只不过返回的是Unicode字符，这个从Python 2.0才加入的unichr()的参数范围依赖于你的Python是如何被编译的。\n* 如果是配置为USC2的Unicode，那么它的允许范围就是range（65536）或0x0000-0xFFFF；\n* 如果配置为UCS4，那么这个值应该是range（1114112）或0x000000-0x110000。如果提供的参数不在允许的范围内，也会报一个ValueError的异常。\n\t```\n\tIn [20]: unichr(1114111)\n\tOut[20]: u'\\U0010ffff'\n\t\n\tIn [21]: unichr(1114112)\n\t---------------------------------------------------------------------------\n\tValueError                                Traceback (most recent call last)\n\t/home/yann/<ipython-input-21-37377890b3ae> in <module>()\n\t----> 1 unichr(1114112)\n\t\n\tValueError: unichr() arg not in range(0x110000) (wide Python build)\n\t\n\t```\n\nord()\n--------------\nord()函数是chr()函数（对于8位的ASCII字符串）或unichr()函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的ASCII数值，或者Unicode数值，如果所给的Unicode字符超出了你的Python定义范围，则会引发一个TypeError的异常。\n```\nIn [39]: ord(u'\\uffff')\nOut[39]: 65535\n\nIn [40]: ord(u'\\ufffff')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/home/yann/<ipython-input-40-a3e8d80a6141> in <module>()\n----> 1 ord(u'\\ufffff')\n\nTypeError: ord() expected a character, but string of length 2 found\n\n```\n\n![python](http://huangyan.qiniudn.com/bird.jpg?imageMogr2/thumbnail/400x200 \"python\")","slug":"python之ord","published":1,"updated":"2015-10-30T12:20:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltz50020g0oruq3lv83c"},{"title":"html5之checkbox","date":"2015-10-30T11:34:03.000Z","_content":"","source":"_posts/2015/10/30/html5之checkbox.md","raw":"title: html5之checkbox\ndate: 2015-10-30 19:34:03\ntags:\n---\n","slug":"html5之checkbox","published":1,"updated":"2015-10-30T11:34:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltz80023g0orgxcyheos"},{"title":"deleteLinux历史记录","date":"2015-10-30T08:03:07.000Z","_content":"\n![GEEK](http://huangyan.qiniudn.com/geek.jpg?imageMogr2/thumbnail/300x200 \"GEEK\")\n\n删除Linux系统下history记录的方法\n=================\n\n \n入侵时目标如果是linux服务器，看切忌清理痕迹的时候别忘记history命令的记录哦 \n \n1. 修改/etc/profile将HISTSIZE=1000改成0或1 \n \n清除用户home路径下。bash_history \n \n2. 立即清空里的history当前历史命令的记录 \n```\nhistory -c \n```\n \n3. bash执行命令时不是马上把命令名称写入history文件的，而是存放在内部的buffer中，等bash退出时会一并写入。 \n \n不过，可以调用'history -w'命令要求bash立即更新history文件。 \n```\nhistory -w\n```","source":"_posts/2015/10/30/deleteLinux历史记录.md","raw":"title: deleteLinux历史记录\ndate: 2015-10-30 16:03:07\ncategories:\n- Linux\ntags:\n- Linux\n---\n\n![GEEK](http://huangyan.qiniudn.com/geek.jpg?imageMogr2/thumbnail/300x200 \"GEEK\")\n\n删除Linux系统下history记录的方法\n=================\n\n \n入侵时目标如果是linux服务器，看切忌清理痕迹的时候别忘记history命令的记录哦 \n \n1. 修改/etc/profile将HISTSIZE=1000改成0或1 \n \n清除用户home路径下。bash_history \n \n2. 立即清空里的history当前历史命令的记录 \n```\nhistory -c \n```\n \n3. bash执行命令时不是马上把命令名称写入history文件的，而是存放在内部的buffer中，等bash退出时会一并写入。 \n \n不过，可以调用'history -w'命令要求bash立即更新history文件。 \n```\nhistory -w\n```","slug":"deleteLinux历史记录","published":1,"updated":"2015-10-30T08:21:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltz90024g0or91rbgn13"},{"title":"Django中favicon.ico文件的配置","date":"2015-10-29T12:39:58.000Z","_content":"\nDjango中favicon.ico文件的配置\n=============\n\n默认情况下，浏览器访问一个网站的时候，同时还会向服务器请求“/favicon.ico”这个URL，目的是获取网站的图标。默认情况下，Django会返回404错误的，只是这个错误不会打印出来，并且浏览器接收到这个404错误后，也无伤大雅，因为没有图标就用默认的图标，所以这个错误也没有跟通常的404错误一样在网页上显示出来。\n不过我们还是应该给网站配置一个图标，这样用户体验会更好一些。\n配置favicon.ico文件，可以在url.py文件中这样配置：\n```\n# favicon.cio\nurl(r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to', {'url':'/static/images/favicon.ico'}),\n```\n不过这个有个前提是在Django中，配置静态文件的支持。\n \n然后在static/images目录下放一个名为favicon.ico的图片就大功告成了。\n\n\n![一起使用django](http://huangyan.qiniudn.com/django-learn.png?imageMogr2/thumbnail/600x400 \"一起使用django\")","source":"_posts/2015/10/29/django-favicon.md","raw":"title: Django中favicon.ico文件的配置\ndate: 2015-10-29 20:39:58\ncategories:\n- Django\ntags:\n- Django\n---\n\nDjango中favicon.ico文件的配置\n=============\n\n默认情况下，浏览器访问一个网站的时候，同时还会向服务器请求“/favicon.ico”这个URL，目的是获取网站的图标。默认情况下，Django会返回404错误的，只是这个错误不会打印出来，并且浏览器接收到这个404错误后，也无伤大雅，因为没有图标就用默认的图标，所以这个错误也没有跟通常的404错误一样在网页上显示出来。\n不过我们还是应该给网站配置一个图标，这样用户体验会更好一些。\n配置favicon.ico文件，可以在url.py文件中这样配置：\n```\n# favicon.cio\nurl(r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to', {'url':'/static/images/favicon.ico'}),\n```\n不过这个有个前提是在Django中，配置静态文件的支持。\n \n然后在static/images目录下放一个名为favicon.ico的图片就大功告成了。\n\n\n![一起使用django](http://huangyan.qiniudn.com/django-learn.png?imageMogr2/thumbnail/600x400 \"一起使用django\")","slug":"django-favicon","published":1,"updated":"2015-10-29T12:46:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzb0027g0orz3pgsv2t"},{"title":"nodejs","date":"2015-10-24T10:02:24.000Z","_content":"安装\n=============\n安装 Node.js 的最佳方式是使用 nvm。\n\ncURL:\n```\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\nWget:\n```\n\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n```\n\n$ nvm install 0.10\n```\n\n","source":"_posts/2015/10/24/nodejs.md","raw":"title: nodejs\ndate: 2015-10-24 18:02:24\ncategories:\n- 前端\ntags:\n- NodeJs\n---\n安装\n=============\n安装 Node.js 的最佳方式是使用 nvm。\n\ncURL:\n```\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\nWget:\n```\n\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n```\n\n$ nvm install 0.10\n```\n\n","slug":"nodejs","published":1,"updated":"2015-10-30T12:22:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzd002ag0oryf1yal4j"},{"title":"ubuntu 使用mysql的简单操作","date":"2015-10-24T06:21:03.000Z","_content":"\n\nubuntu上安装mysql非常简单只需要几条命令就可以完成。\n\n　　1. 'sudo apt-get install mysql-server'\n \n　　2. apt-get install mysql-client\n \n　　3.  sudo apt-get install libmysqlclient-dev\n \n　　安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：\n \n　　sudo netstat -tap | grep mysql\n \n　　通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。\n \n　　登陆mysql数据库可以通过如下命令：\n \n　　mysql -u root -p \n\n\ncreate database dbname；\n\n\n\n遇到的问题：\n\nmysql-server : Depends: mysql-server-5.5 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n\n```\nsudo apt-get purge mysql-client-core-5.6\nsudo apt-get autoremove\nsudo apt-get autoclean\nsudo apt-get install mysql-client-core-5.5\nsudo apt-get install mysql-server \n```\n然并卵,\n后面试了一下[aptitude](http://baike.baidu.com/link?url=tUAAth_0e71ZBGWOArrnufdAk3Hg3frsWXq6VsxOFIIdjP-0ngvFDV5MOdOxUf-5vZ-K-7dPMKqnQpqWeTVtLq)\n后面觉得应该是源使用错误的问题，要对应相同版本的源，<code>lsb_release -a</code>查看","source":"_posts/2015/10/24/mysql-use.md","raw":"title: ubuntu 使用mysql的简单操作\ndate: 2015-10-24 14:21:03\ncategories:\n- 数据库\ntags:\n- Mysql\n---\n\n\nubuntu上安装mysql非常简单只需要几条命令就可以完成。\n\n　　1. 'sudo apt-get install mysql-server'\n \n　　2. apt-get install mysql-client\n \n　　3.  sudo apt-get install libmysqlclient-dev\n \n　　安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：\n \n　　sudo netstat -tap | grep mysql\n \n　　通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。\n \n　　登陆mysql数据库可以通过如下命令：\n \n　　mysql -u root -p \n\n\ncreate database dbname；\n\n\n\n遇到的问题：\n\nmysql-server : Depends: mysql-server-5.5 but it is not going to be installed\nE: Unable to correct problems, you have held broken packages.\n\n```\nsudo apt-get purge mysql-client-core-5.6\nsudo apt-get autoremove\nsudo apt-get autoclean\nsudo apt-get install mysql-client-core-5.5\nsudo apt-get install mysql-server \n```\n然并卵,\n后面试了一下[aptitude](http://baike.baidu.com/link?url=tUAAth_0e71ZBGWOArrnufdAk3Hg3frsWXq6VsxOFIIdjP-0ngvFDV5MOdOxUf-5vZ-K-7dPMKqnQpqWeTVtLq)\n后面觉得应该是源使用错误的问题，要对应相同版本的源，<code>lsb_release -a</code>查看","slug":"mysql-use","published":1,"updated":"2015-11-06T01:16:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzf002fg0or2xgh6zv0"},{"title":"项目问题汇总","date":"2015-10-21T02:52:45.000Z","_content":"\n安装django项目问题汇总\n============\n\nenvironmenterror mysql_config not found\n------------\n```\nsudo apt-get install libmysqlclient-dev\n\nsudo apt-get install mysql-server\n\nsudo apt-get install libmysqld-dev\n```\npip 超时\n------------\n建个文件 ~/.pip/pip.conf, 内容如下\n```\n[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple/\n[install]\nuse-mirrors = true\nmirrors = http://b.pypi.python.org\ntrusted-host = pypi.douban.com\n```\n\n或者尝试下 v2ex 的源\n```\n\n[global]\nindex-url = http://pypi.v2ex.com/simple\n```\n\nInstalling lxml in virtualenv via pip install error: command 'x86_64-linux-gnu-gcc' failed\n--------------------\n安装这些依赖，我在ubuntu 15.10上是有效的\n```\nsudo apt-get install python-dev\nsudo apt-get install libxml2-dev libxslt1-dev\n```\n\nvalueerror --enable-jpeg request but jpeg not found\n--------------------\n```\nsudo apt-get install libjpeg-dev\n```\n\ndjango下运行报\"SyntaxError: Non-ASCII character\n--------------\n[pep](http://python.org/dev/peps/pep-0263/)\n找了半天原因在于，没有把声明coding 的代码放在第一位\n\n* 尝试了第一种方法，没有成功 \nIf you're using virtualenv you can change (or create if doesn't exist) env/lib/python2.7/sitecustomize.py and add:\n```\nimport sys\nsys.setdefaultencoding('utf-8')\n```\n> or, if you are in a production system, you can do the same to /usr/lib/python2.7/sitecustomize.py\n\n\nerror: [Errno 104] Connection reset by peer\n----------------------------\n网络的问题，重新试一次就好了\n\nubuntu 源的问题\n==============\n\n1、安装软件时候，找不到软件包\n-------------\n<B>问题描述:</B>\nE: 未发现软件包 ****\n\n<B>解决方法:</B>\n```\nsudo apt-get update\n```\n\n2、无法更新系统软件\n--------------\n<B>问题描述:</B>Some index files failed to download. They have been ignored, or old ones used instead after apt-get update\n\n这是参考链接 [askubuntu](http://askubuntu.com/questions/329450/e-some-index-files-failed-to-download-they-have-been-ignored-or-old-ones-used) .\n\n<B>解决方法:</B>\n```\nsudo cp /etc/apt/sources.list ~/   #备份\nsudo wget \"http://pastebin.com/raw.php?i=uzhrtg5M\" -O /etc/apt/sources.list #替换\nsudo apt-get update #更新\nsudo rm /etc/apt/sources.list.d/ubuntu-extras.list\nsudo apt-get update\n```\n\n* This solution is not general. It is specific to the sources.list file of the Original Poster.\n* The second command which starts with wget downloads and replaces the sources.list file with a specific for Precise (Ubuntu 12.04,我的是ubuntu14.10) sources.list file. See the file in raw format by visiting this [page](http://pastebin.com/raw.php?i=uzhrtg5M).\n* The fourth command removes the ubuntu-extras.list file which had an impact/conflict with another file of the same, so we removed it to avoid the error\n```\nW: Duplicate sources.list entry\n```\n3、无法安装软件\n------------\n<B>问题描述:</B>\n列软件包有未满足的依赖关系：\n vim : 依赖: vim-common (= 2:7.4.052-1ubuntu3) 但是 2:7.4.273-2ubuntu4 正要被安装\n\n<B>解决方法:</B>\n```\nsudo apt-get remove vim-common\nsudo apt-get install vim\n```\n4、无法安装pip\n------------\n<B>问题描述:</B>\n\nthe following packages have unmet dependencies:\n python-pip : Depends: python-setuptools (>= 0.6c1) but it is not going to be installed\n              Recommends: python-dev-all (>= 2.6) but it is not installable\n<B>解决方法:</B>\n```\nFirst remove the python-pkg-resources completely using\n\n sudo apt-get purge python-pkg-resources\nOnce completed successfully, first run\n\n  sudo apt-get -f install\nthen\n\n   sudo apt-get install python-pip\n```\n","source":"_posts/2015/10/21/django-install-problem.md","raw":"title: 项目问题汇总\ndate: 2015-10-21 10:52:45\ncategories:\n- Django\n- Ubuntu\ntags:\n- Django\n---\n\n安装django项目问题汇总\n============\n\nenvironmenterror mysql_config not found\n------------\n```\nsudo apt-get install libmysqlclient-dev\n\nsudo apt-get install mysql-server\n\nsudo apt-get install libmysqld-dev\n```\npip 超时\n------------\n建个文件 ~/.pip/pip.conf, 内容如下\n```\n[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple/\n[install]\nuse-mirrors = true\nmirrors = http://b.pypi.python.org\ntrusted-host = pypi.douban.com\n```\n\n或者尝试下 v2ex 的源\n```\n\n[global]\nindex-url = http://pypi.v2ex.com/simple\n```\n\nInstalling lxml in virtualenv via pip install error: command 'x86_64-linux-gnu-gcc' failed\n--------------------\n安装这些依赖，我在ubuntu 15.10上是有效的\n```\nsudo apt-get install python-dev\nsudo apt-get install libxml2-dev libxslt1-dev\n```\n\nvalueerror --enable-jpeg request but jpeg not found\n--------------------\n```\nsudo apt-get install libjpeg-dev\n```\n\ndjango下运行报\"SyntaxError: Non-ASCII character\n--------------\n[pep](http://python.org/dev/peps/pep-0263/)\n找了半天原因在于，没有把声明coding 的代码放在第一位\n\n* 尝试了第一种方法，没有成功 \nIf you're using virtualenv you can change (or create if doesn't exist) env/lib/python2.7/sitecustomize.py and add:\n```\nimport sys\nsys.setdefaultencoding('utf-8')\n```\n> or, if you are in a production system, you can do the same to /usr/lib/python2.7/sitecustomize.py\n\n\nerror: [Errno 104] Connection reset by peer\n----------------------------\n网络的问题，重新试一次就好了\n\nubuntu 源的问题\n==============\n\n1、安装软件时候，找不到软件包\n-------------\n<B>问题描述:</B>\nE: 未发现软件包 ****\n\n<B>解决方法:</B>\n```\nsudo apt-get update\n```\n\n2、无法更新系统软件\n--------------\n<B>问题描述:</B>Some index files failed to download. They have been ignored, or old ones used instead after apt-get update\n\n这是参考链接 [askubuntu](http://askubuntu.com/questions/329450/e-some-index-files-failed-to-download-they-have-been-ignored-or-old-ones-used) .\n\n<B>解决方法:</B>\n```\nsudo cp /etc/apt/sources.list ~/   #备份\nsudo wget \"http://pastebin.com/raw.php?i=uzhrtg5M\" -O /etc/apt/sources.list #替换\nsudo apt-get update #更新\nsudo rm /etc/apt/sources.list.d/ubuntu-extras.list\nsudo apt-get update\n```\n\n* This solution is not general. It is specific to the sources.list file of the Original Poster.\n* The second command which starts with wget downloads and replaces the sources.list file with a specific for Precise (Ubuntu 12.04,我的是ubuntu14.10) sources.list file. See the file in raw format by visiting this [page](http://pastebin.com/raw.php?i=uzhrtg5M).\n* The fourth command removes the ubuntu-extras.list file which had an impact/conflict with another file of the same, so we removed it to avoid the error\n```\nW: Duplicate sources.list entry\n```\n3、无法安装软件\n------------\n<B>问题描述:</B>\n列软件包有未满足的依赖关系：\n vim : 依赖: vim-common (= 2:7.4.052-1ubuntu3) 但是 2:7.4.273-2ubuntu4 正要被安装\n\n<B>解决方法:</B>\n```\nsudo apt-get remove vim-common\nsudo apt-get install vim\n```\n4、无法安装pip\n------------\n<B>问题描述:</B>\n\nthe following packages have unmet dependencies:\n python-pip : Depends: python-setuptools (>= 0.6c1) but it is not going to be installed\n              Recommends: python-dev-all (>= 2.6) but it is not installable\n<B>解决方法:</B>\n```\nFirst remove the python-pkg-resources completely using\n\n sudo apt-get purge python-pkg-resources\nOnce completed successfully, first run\n\n  sudo apt-get -f install\nthen\n\n   sudo apt-get install python-pip\n```\n","slug":"django-install-problem","published":1,"updated":"2015-11-05T14:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzi002jg0orxlzbmlci"},{"title":"python-date","date":"2015-10-20T10:28:44.000Z","_content":"\npython 时间戳 datetime string 转换\n==============================\n```\nimport datetime\nimport time\n```\n\ndatetime转时间戳\n--------------\n\n```\nIn [1]: now = datetime.datetime.now()\nIn [2]: time.mktime(now.timetuple())\nOut[2]: 1433501775.0\n```\n\n \ndatetime转string\n---------------\n\n```\nIn [3]: now.strftime('%Y-%m-%d')\nOut[3]: '2015-06-05'\n\nIn [4]: type(now.strftime('%Y-%m-%d'))\nOut[4]: str\n```\n\n\nstring转datetime\n---------------\n\n```\nIn [5]: time_str = '2015-05-01 12:00:01'\n\nIn [5]: date_time = datetime.datetime.strptime(time_str,'%Y-%m-%d %H:%M:%S')\n\nIn [6]: date_time\nOut[6]: datetime.datetime(2015, 5, 1, 12, 0, 1)\n\n```\n\n\n时间戳转string**\n--------------\n\n```\nIn [17]: time.strftime('%Y-%m-%d',time.localtime(aa))\nOut[17]: '2015-06-05'\n\n```","source":"_posts/2015/10/20/python-date.md","raw":"title: python-date\ndate: 2015-10-20 18:28:44\ncategories:\n- Python\ntags:\n- Python\n---\n\npython 时间戳 datetime string 转换\n==============================\n```\nimport datetime\nimport time\n```\n\ndatetime转时间戳\n--------------\n\n```\nIn [1]: now = datetime.datetime.now()\nIn [2]: time.mktime(now.timetuple())\nOut[2]: 1433501775.0\n```\n\n \ndatetime转string\n---------------\n\n```\nIn [3]: now.strftime('%Y-%m-%d')\nOut[3]: '2015-06-05'\n\nIn [4]: type(now.strftime('%Y-%m-%d'))\nOut[4]: str\n```\n\n\nstring转datetime\n---------------\n\n```\nIn [5]: time_str = '2015-05-01 12:00:01'\n\nIn [5]: date_time = datetime.datetime.strptime(time_str,'%Y-%m-%d %H:%M:%S')\n\nIn [6]: date_time\nOut[6]: datetime.datetime(2015, 5, 1, 12, 0, 1)\n\n```\n\n\n时间戳转string**\n--------------\n\n```\nIn [17]: time.strftime('%Y-%m-%d',time.localtime(aa))\nOut[17]: '2015-06-05'\n\n```","slug":"python-date","published":1,"updated":"2015-10-30T12:22:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzk002og0orah1esmnc"},{"title":"python复制（深浅）","date":"2015-10-17T12:15:35.000Z","_content":"\n关于python list对象的使用\n=============\n需求\n-------------\n如果这时候有需求是，复制一个list对象，然后_改变这个复制的对象内容_，_原来的内容不变_，该怎么做？\n\n使用过程\n-------------\n在使用python时候，一个list对象赋值给另外一个，或者是list作为参数传递给函数进行操作，这个list对象的id始终没有变化,如下：\n```\nIn [59]: list_a = [1,2,3]\n\nIn [60]: id(list_a)\nOut[60]: 47743920\n\nIn [61]: list_b = list_a\n\nIn [62]: id(list_b)\nOut[62]: 47743920\n\nIn [63]: def check_list(one_list):\n   ....:     print id(one_list)\n   ....:     \n\nIn [64]: check_list(list_b)\n47743920\n\n\n```\n总结\n-------------\n在Python中,无论你把对象作为参数传递,还是作为函数返回值,都是引用传递的.\n\n\ncopy库\n-------------\n标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象.\n```\nIn [65]: import copy\n\nIn [66]: existing_list = [1,2,3,4]\n\nIn [67]: new_list = copy.copy(existing_list)\n\nIn [68]: id(existing_list),id(new_list)\nOut[68]: (48317144, 48317576)\n```\n有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法:\n```\nIn [69]: new_list_deep = copy.deepcopy(existing_list)\nIn [70]: id(existing_list),id(new_list_deep)\nOut[70]: (48317144, 47701816)\n\n```\n\n这时候发现，复制的list对象的地址不一样了，那么改变复制后的list内容，会发生什么？\n```\nIn [71]: new_list\nOut[71]: [1, 2, 3, 4]\n\nIn [72]: new_list[0]=2\n\nIn [73]: new_list\nOut[73]: [2, 2, 3, 4]\n\nIn [74]: existing_list\nOut[74]: [1, 2, 3, 4]\n\nIn [75]: new_list_deep\nOut[75]: [1, 2, 3, 4]\n\nIn [76]: new_list_deep[2] = 1\n\nIn [77]: new_list_deep\nOut[77]: [1, 2, 1, 4]\n\nIn [78]: existing_list\nOut[78]: [1, 2, 3, 4]\n```\n似乎已经满足我们最初的需求了，但是如果list对象是这样的，<code>list_of_lists = [ ['a'], [1, 2], ['z', 23] ]</code>,来实验一下\n```\nIn [85]: list_of_lists = [ ['a'], [1, 2], ['z', 23] ]\n\nIn [86]: copy_qian = copy.copy(list_of_lists)\n\nIn [87]: copy_qian[1].append(\"zoo\")\n\nIn [88]: print list_of_lists,copy_qian,id(list_of_lists),id(copy_qian)\n[['a'], [1, 2, 'zoo'], ['z', 23]] [['a'], [1, 2, 'zoo'], ['z', 23]] 46542432 48334464\n\n```\n发现原来的list里面的内容也被改变了，_其实是因为list_of_lists中有引用了其他的list，copy.copy只是浅复制。因为它们中的元素还是共享引用.\n\n如果你希望复制一个容器对象,以及它里面的所有元素(包含元素的子元素),使用copy.deepcopy,这个方法会消耗一些时间和空间,不过,如果你需要完全复制,这是唯一的方法.\n\n```\nIn [90]: list_of_lists = [ ['a'], [1, 2], ['z', 23] ]\n\nIn [91]: copy_deep = copy.deepcopy(list_of_lists)\n\nIn [92]: copy_deep.append(\"zoo\")\n\nIn [93]: print list_of_lists,\";\",copy_deep,\";\",id(list_of_lists),\";\",id(copy_deep)\n[['a'], [1, 2], ['z', 23]] ; [['a'], [1, 2], ['z', 23], 'zoo']; 48319664; 48333096\n```\n\n","source":"_posts/2015/10/17/python复制.md","raw":"title: python复制（深浅）\ndate: 2015-10-17 20:15:35\ncategories:\n- Python\ntags:\n- Python\n---\n\n关于python list对象的使用\n=============\n需求\n-------------\n如果这时候有需求是，复制一个list对象，然后_改变这个复制的对象内容_，_原来的内容不变_，该怎么做？\n\n使用过程\n-------------\n在使用python时候，一个list对象赋值给另外一个，或者是list作为参数传递给函数进行操作，这个list对象的id始终没有变化,如下：\n```\nIn [59]: list_a = [1,2,3]\n\nIn [60]: id(list_a)\nOut[60]: 47743920\n\nIn [61]: list_b = list_a\n\nIn [62]: id(list_b)\nOut[62]: 47743920\n\nIn [63]: def check_list(one_list):\n   ....:     print id(one_list)\n   ....:     \n\nIn [64]: check_list(list_b)\n47743920\n\n\n```\n总结\n-------------\n在Python中,无论你把对象作为参数传递,还是作为函数返回值,都是引用传递的.\n\n\ncopy库\n-------------\n标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象.\n```\nIn [65]: import copy\n\nIn [66]: existing_list = [1,2,3,4]\n\nIn [67]: new_list = copy.copy(existing_list)\n\nIn [68]: id(existing_list),id(new_list)\nOut[68]: (48317144, 48317576)\n```\n有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法:\n```\nIn [69]: new_list_deep = copy.deepcopy(existing_list)\nIn [70]: id(existing_list),id(new_list_deep)\nOut[70]: (48317144, 47701816)\n\n```\n\n这时候发现，复制的list对象的地址不一样了，那么改变复制后的list内容，会发生什么？\n```\nIn [71]: new_list\nOut[71]: [1, 2, 3, 4]\n\nIn [72]: new_list[0]=2\n\nIn [73]: new_list\nOut[73]: [2, 2, 3, 4]\n\nIn [74]: existing_list\nOut[74]: [1, 2, 3, 4]\n\nIn [75]: new_list_deep\nOut[75]: [1, 2, 3, 4]\n\nIn [76]: new_list_deep[2] = 1\n\nIn [77]: new_list_deep\nOut[77]: [1, 2, 1, 4]\n\nIn [78]: existing_list\nOut[78]: [1, 2, 3, 4]\n```\n似乎已经满足我们最初的需求了，但是如果list对象是这样的，<code>list_of_lists = [ ['a'], [1, 2], ['z', 23] ]</code>,来实验一下\n```\nIn [85]: list_of_lists = [ ['a'], [1, 2], ['z', 23] ]\n\nIn [86]: copy_qian = copy.copy(list_of_lists)\n\nIn [87]: copy_qian[1].append(\"zoo\")\n\nIn [88]: print list_of_lists,copy_qian,id(list_of_lists),id(copy_qian)\n[['a'], [1, 2, 'zoo'], ['z', 23]] [['a'], [1, 2, 'zoo'], ['z', 23]] 46542432 48334464\n\n```\n发现原来的list里面的内容也被改变了，_其实是因为list_of_lists中有引用了其他的list，copy.copy只是浅复制。因为它们中的元素还是共享引用.\n\n如果你希望复制一个容器对象,以及它里面的所有元素(包含元素的子元素),使用copy.deepcopy,这个方法会消耗一些时间和空间,不过,如果你需要完全复制,这是唯一的方法.\n\n```\nIn [90]: list_of_lists = [ ['a'], [1, 2], ['z', 23] ]\n\nIn [91]: copy_deep = copy.deepcopy(list_of_lists)\n\nIn [92]: copy_deep.append(\"zoo\")\n\nIn [93]: print list_of_lists,\";\",copy_deep,\";\",id(list_of_lists),\";\",id(copy_deep)\n[['a'], [1, 2], ['z', 23]] ; [['a'], [1, 2], ['z', 23], 'zoo']; 48319664; 48333096\n```\n\n","slug":"python复制","published":1,"updated":"2015-10-30T12:22:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzm002rg0orqrebv00a"},{"title":"pre 使用","date":"2015-10-15T03:55:40.000Z","_content":"\n问题描述\n===========\n今天遇到一个问题，在table td中使用pre标签后，整个td被撑宽了，设置了td 和pre 的宽度也不起作用，代码如下：\n```\n<td>\n    <pre>1234567890123456789012345678901234567890</pre>\n</td>\n```\n于是乎，上网找解决方法\n\n这是参考链接 [segmentfault](http://segmentfault.com/q/1010000000271095) [stackoverflow](http://stackoverflow.com/questions/17408815/fieldset-resizes-wrong-appears-to-have-unremovable-min-width-min-content/17863685#17863685).\n\n1、fieldset或者td的设置宽度以后，为何会被撑宽？\n-----------\n\nfieldset在没有内部元素时，是以block方式解析的，即外部100%宽度自适应；但设置width以后，本应当维持这个宽度了，为何会被撑宽呢？\n\n因为它的min-width属性，在CSS的属性的权重中，min-width > width，在chrome里面：\n```\nfieldset { min-width: -webkit-min-content; }\n```\n改变它的min-width就可以，复写它的值，或者改为inherit（考虑到是手机端开发，inherit是全支持的）都可以。\n```\nfieldset { min-width: inherit; }\n/*or*/\nfieldset { min-width: 100px; }\n```\n\n\n\n2、pre元素为何会自动撑宽?\n-----------\n\n因为其white-space属性：\n```\npre { white-space: pre; }\n```\npre的语义既是预保留格式，这意味着（外部标签无法决定pre标签的宽度，pre标签自动包裹内部的文本节点，不忽略空白//有误，见下）。\n\npre标签的宽度是由如下机制进行的：\n\n在内部内容不宽过父容器时，其宽度自适应于父容器；\n在内部内容比父容器宽的时候，其宽度包裹内部内容。\n这个机制类似于min-width，但比min-width还多了对于换行/空白符的处理，下面是w3school对于white-space属性值的解释：\n```\nnormal  默认。空白会被浏览器忽略。\npre 空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。\nnowrap  文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\npre-wrap    保留空白符序列，但是正常地进行换行。\npre-line    合并空白符序列，但是保留换行符。\ninherit 规定应该从父元素继承 white-space 属性的值。\n```\n把white-space改为除了nowrap和pre以外的值即可符合你的要求。不过我想问，__你真的需要修改pre标签的默认行为吗？__改变pre标签的默认行为，即意味着你放弃了pre标签的原本语义。\n\n所以我们看看撑宽的路线：\n\npre内部文本节点宽度—(<icode>white-space:pre</icode>撑宽机制)—>pre宽度—(<icode style=\"color: #c7254e;\">min-width</icode>自动包裹内部内容撑宽机制)—>fieldset宽度。\n\n而我们想要的自适应宽度的路线：\n\nfieldset宽度—(定宽机制)—>pre宽度—(<icode>white-space:非pre/非nowrap排版</icode>)—>pre内部文本节点宽度。\n\n所以，有两种解决方案：\n\n* 破坏fieldset的min-width包裹机制，破坏pre的white-space撑宽机制，放弃pre标签的语义。\n* 破坏fieldset的min-width包裹机制，保留pre的white-space撑宽机制，给外层加上overflow，如下：\n```\n    fieldset {\n      overflow:scroll;\n      -webkit-overflow-scrolling:touch;\n      -moz-overflow-scrolling:touch;\n      -o-overflow-scrolling:touch ;\n    }\n```\n\n","source":"_posts/2015/10/15/html.md","raw":"title: pre 使用\ndate: 2015-10-15 11:55:40\ncategories:\n- 前端\ntags:\n- Html\n---\n\n问题描述\n===========\n今天遇到一个问题，在table td中使用pre标签后，整个td被撑宽了，设置了td 和pre 的宽度也不起作用，代码如下：\n```\n<td>\n    <pre>1234567890123456789012345678901234567890</pre>\n</td>\n```\n于是乎，上网找解决方法\n\n这是参考链接 [segmentfault](http://segmentfault.com/q/1010000000271095) [stackoverflow](http://stackoverflow.com/questions/17408815/fieldset-resizes-wrong-appears-to-have-unremovable-min-width-min-content/17863685#17863685).\n\n1、fieldset或者td的设置宽度以后，为何会被撑宽？\n-----------\n\nfieldset在没有内部元素时，是以block方式解析的，即外部100%宽度自适应；但设置width以后，本应当维持这个宽度了，为何会被撑宽呢？\n\n因为它的min-width属性，在CSS的属性的权重中，min-width > width，在chrome里面：\n```\nfieldset { min-width: -webkit-min-content; }\n```\n改变它的min-width就可以，复写它的值，或者改为inherit（考虑到是手机端开发，inherit是全支持的）都可以。\n```\nfieldset { min-width: inherit; }\n/*or*/\nfieldset { min-width: 100px; }\n```\n\n\n\n2、pre元素为何会自动撑宽?\n-----------\n\n因为其white-space属性：\n```\npre { white-space: pre; }\n```\npre的语义既是预保留格式，这意味着（外部标签无法决定pre标签的宽度，pre标签自动包裹内部的文本节点，不忽略空白//有误，见下）。\n\npre标签的宽度是由如下机制进行的：\n\n在内部内容不宽过父容器时，其宽度自适应于父容器；\n在内部内容比父容器宽的时候，其宽度包裹内部内容。\n这个机制类似于min-width，但比min-width还多了对于换行/空白符的处理，下面是w3school对于white-space属性值的解释：\n```\nnormal  默认。空白会被浏览器忽略。\npre 空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。\nnowrap  文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\npre-wrap    保留空白符序列，但是正常地进行换行。\npre-line    合并空白符序列，但是保留换行符。\ninherit 规定应该从父元素继承 white-space 属性的值。\n```\n把white-space改为除了nowrap和pre以外的值即可符合你的要求。不过我想问，__你真的需要修改pre标签的默认行为吗？__改变pre标签的默认行为，即意味着你放弃了pre标签的原本语义。\n\n所以我们看看撑宽的路线：\n\npre内部文本节点宽度—(<icode>white-space:pre</icode>撑宽机制)—>pre宽度—(<icode style=\"color: #c7254e;\">min-width</icode>自动包裹内部内容撑宽机制)—>fieldset宽度。\n\n而我们想要的自适应宽度的路线：\n\nfieldset宽度—(定宽机制)—>pre宽度—(<icode>white-space:非pre/非nowrap排版</icode>)—>pre内部文本节点宽度。\n\n所以，有两种解决方案：\n\n* 破坏fieldset的min-width包裹机制，破坏pre的white-space撑宽机制，放弃pre标签的语义。\n* 破坏fieldset的min-width包裹机制，保留pre的white-space撑宽机制，给外层加上overflow，如下：\n```\n    fieldset {\n      overflow:scroll;\n      -webkit-overflow-scrolling:touch;\n      -moz-overflow-scrolling:touch;\n      -o-overflow-scrolling:touch ;\n    }\n```\n\n","slug":"html","published":1,"updated":"2015-10-30T12:21:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzo002ug0orxgyzx1gn"},{"title":"linux 使用集锦","date":"2015-10-14T02:54:54.000Z","_content":"![一起使用linux](http://huangyan.qiniudn.com/linux.jpg?imageMogr2/thumbnail/600x400 \"一起使用linux\")\n\n\n\nGREP\n=============\n问题\n-------------\ngrep 搜索时忽略 目录\n在整个项目搜索某个关键字的时候，有些目录或者文件需要排除掉，我们可以采用以下方法：\n讲解\n-------------\n首先可以grep --help，来查看使用说明\n``` bash\ngrep --help\n用法: grep [选项]... PATTERN [FILE]...\n在每个 FILE 或是标准输入中查找 PATTERN。\n默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。\n例如: grep -i 'hello world' menu.h main.c\n\n正则表达式选择与解释:\n  -E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)\n  -F, --fixed-strings       PATTERN 是一组由断行符分隔的定长字符串。\n  -G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)\n  -P, --perl-regexp         PATTERN 是一个 Perl 正则表达式\n  -e, --regexp=PATTERN      用 PATTERN 来进行匹配操作\n  -f, --file=FILE           从 FILE 中取得 PATTERN\n  -i, --ignore-case         忽略大小写\n  -w, --word-regexp         强制 PATTERN 仅完全匹配字词\n  -x, --line-regexp         强制 PATTERN 仅完全匹配一行\n  -z, --null-data           一个 0 字节的数据行，但不是空行\n\n杂项:\n  -s, --no-messages         不显示错误信息\n  -v, --invert-match        选中不匹配的行\n  -V, --version             显示版本信息并退出\n      --help                显示此帮助并退出\n      --mmap                忽略向后兼容性\n\n输出控制:\n  -m, --max-count=NUM       NUM 次匹配后停止\n  -b, --byte-offset         输出的同时打印字节偏移\n  -n, --line-number         输出的同时打印行号\n      --line-buffered       每行输出清空\n  -H, --with-filename       为每一匹配项打印文件名\n  -h, --no-filename         输出时不显示文件名前缀\n      --label=LABEL         将LABEL 作为标准输入文件名前缀\n  -o, --only-matching       只显示一行中匹配PATTERN 的部分\n  -q, --quiet, --silent     不显示所有输出\n      --binary-files=TYPE   假定二进制文件的TYPE 类型；\n                            TYPE 可以是`binary', `text', 或`without-match'\n  -a, --text                等同于 --binary-files=text\n  -I                        等同于 --binary-files=without-match\n  -d, --directories=ACTION  操作目录的方式；\n                            ACTION 可以是`read', `recurse',或`skip'\n  -D, --devices=ACTION      操作设备、先入先出队列、套接字的方式；\n                            ACTION 可以是`read'或`skip'\n  -R, -r, --recursive       等同于 --directories=recurse\n      --include=FILE_PATTERN  只查找匹配FILE_PATTERN 的文件\n      --exclude=FILE_PATTERN  跳过匹配FILE_PATTERN 的文件和目录\n      --exclude-from=FILE   跳过所有除FILE 以外的文件\n      --exclude-dir=PATTERN  跳过所有匹配PATTERN 的目录。\n  -L, --files-without-match  只打印不匹配FILEs 的文件名\n  -l, --files-with-matches  只打印匹配FILES 的文件名\n  -c, --count               只打印每个FILE 中的匹配行数目\n  -T, --initial-tab         行首tabs 分隔（如有必要）\n  -Z, --null                在FILE 文件最后打印空字符\n\n文件控制:\n  -B, --before-context=NUM  打印以文本起始的NUM 行\n  -A, --after-context=NUM   打印以文本结尾的NUM 行\n  -C, --context=NUM         打印输出文本NUM 行\n  -NUM                      等同于 --context=NUM\n      --color[=WHEN],\n      --colour[=WHEN]       使用标志高亮匹配字串；\n                            WHEN 可以是`always', `never'或`auto'\n  -U, --binary              不要清除行尾的CR 字符(MSDOS 模式)\n  -u, --unix-byte-offsets   当CR 字符不存在，报告字节偏移(MSDOS 模式)\n\n‘egrep’即‘grep -E’。‘fgrep’即‘grep -F’。\n直接使用‘egrep’或是‘fgrep’均已不可行了。\n不带 FILE 参数，或是 FILE 为 -，将读取标准输入。如果少于两个 FILE 参数\n就要默认使用 -h 参数。如果选中任意一行，那退出状态为 0，否则为 1；\n如果有错误产生，且未指定 -q 参数，那退出状态为 2。\n\n请将错误报告给: bug-grep@gnu.org\nGNU Grep 主页: <http://www.gnu.org/software/grep/>\nGNU 软件的通用帮助: <http://www.gnu.org/gethelp/>\n\n```\n\n例子\n-----------\n```\ngrep wait_post_num -rn ./ --exclude-dir=\"fixtures\"\n```\n配置\n-----------\n如果每次都输入--exclude-dir=参数，是不是很慢还容易出错，降低效率呢?\n不过不用担心，我们可以把--exclude-dir=参数通过加入配置文件 ~/.bashrc (这是bash的当前用户配置文件) 的方法来简化操作，提高效率。\n\n在~/.bashrc文件的末尾添加以下命令：\n```\nexport GREP_OPTIONS=\"--exclude-dir=**\"\n```\n然后保存，执行source ~/.bashrc或者. ~/.bashrc，使修改起作用。\n\n\nfind\n============\n```\nfind ./ -name \"*file_name*\" 从当前目录查找文件中包含这个字段的文件\n```\n\n查看文件大小和文件夹大小\n===============\ndf 说明\n------------------\ndf命令可以显示目前所有文件系统的可用空间及使用情形\n\t\n\t```\n\tyann@Computer:~$ df --help\n\t用法：df [选项]... [文件]...\n\t显示每个文件所在的文件系统的信息，默认是显示所有文件系统。\n\t\n\t长选项必须使用的参数对于短选项时也是必需使用的。\n\t  -a, --all\t\t包含虚拟文件系统\n\t  -B, --block-size=大小\t使用指定字节数的块。例如-BM 以 1,248,576\n\t\t\t\t字节为单位显示大小。参看SIZE 格式。      --total\t\t显示总计信息\n\t  -h, --human-readable\t以可读性较好的格式显示尺寸(例如：1K 234M 2G)\n\t  -H, --si\t\t计算时使用1000 为基底而非1024\n\t  -i, --inodes\t\t显示inode 信息而非块使用量\n\t  -k\t\t\t即--block-size=1K\n\t  -l, --local\t\t只显示本机的文件系统\n\t      --no-sync\t\t取得使用量数据前不进行同步动作(默认)\n\t  -P, --portability\t使用POSIX 兼容的输出格式\n\t      --sync\t\t取得使用量数据前先进行同步动作\n\t  -t, --type=类型\t只显示指定文件系统为指定类型的信息\n\t  -T, --print-type\t显示文件系统类型\n\t  -x, --exclude-type=类型\t只显示文件系统不是指定类型信息\n\t  -v\t\t\t(忽略)\n\t      --help\t\t显示此帮助信息并退出\n\t      --version\t\t显示版本信息并退出\n\t\n\t所显示的数值是来自 --block-size、DF_BLOCK_SIZE、BLOCK_SIZE \n\t及 BLOCKSIZE 环境变量中第一个可用的 SIZE 单位。\n\t否则，默认单位是 1024 字节(或是 512，若设定 POSIXLY_CORRECT 的话)。\n\t\n\tSIZE 可以是一个可选的整数，后面跟着以下单位中的一个：\n\tKB 1000，K 1024，MB 1000*1000，M 1024*1024，还有 G、T、P、E、Z、Y。\n\t\n\t请向bug-coreutils@gnu.org 报告df 的错误\n\tGNU coreutils 的主页：<http://www.gnu.org/software/coreutils/>\n\tGNU 软件一般性帮助：<http://www.gnu.org/gethelp/>\n\t请向<http://translationproject.org/team/zh_CN.html> 报告df 的翻译错误\n\t要获取完整文档，请运行：info coreutils 'df invocation'\n\t```\n例子\n-----------\n\n1. df\n\t```\n\tyann@Computer:~$ df\n\t文件系统           1K-块     已用     可用 已用% 挂载点\n\t/dev/sda3      117985604 41013568 70972012   37% /\n\tudev             4022384        4  4022380    1% /dev\n\ttmpfs             806388     1144   805244    1% /run\n\tnone                5120        0     5120    0% /run/lock\n\tnone             4031940   169732  3862208    5% /run/shm\n\t```\n2. df -h 以可读性较好的格式显示尺寸\n\t```\n\tyann@Computer:~$ df -h\n\t文件系统        容量  已用  可用 已用% 挂载点\n\t/dev/sda3       113G   40G   68G   37% /\n\tudev            3.9G  4.0K  3.9G    1% /dev\n\ttmpfs           788M  1.2M  787M    1% /run\n\tnone            5.0M     0  5.0M    0% /run/lock\n\tnone            3.9G  168M  3.7G    5% /run/shm\n\t\n\t```\ndu 说明\n---------------\ndu：查询文件或文件夹的磁盘使用空间\n\n```\nyann@Computer:~$ du --help\n用法：du [选项]... [文件]...\n　或：du [选项]... --files0-from=F\n计算每个文件的磁盘用量，目录则取总用量。\n\n长选项必须使用的参数对于短选项时也是必需使用的。\n  -a, --all\t\t输出所有文件的磁盘用量，不仅仅是目录\n      --apparent-size\t显示表面用量，而并非是磁盘用量；虽然表面用量通常会\n\t\t\t小一些，但有时它会因为稀疏文件间的\"洞\"、内部碎\n\t\t\t片、非直接引用的块等原因而变大。\n  -B, --block-size=大小\t使用指定字节数的块。例如-BM 以 1,048,576\n\t\t\t字节为单位显示大小。参看SIZE 格式。  -b, --bytes\t\t等于--apparent-size --block-size=1\n  -c, --total\t\t显示总计信息\n  -D, --dereference-args\t解除命令行中列出的符号连接\n      --files0-from=F\t计算文件F 中以NUL 结尾的文件名对应占用的磁盘空间\n\t\t\t如果F 的值是\"-\"，则从标准输入读入文件名\n  -H\t\t\t等于--dereference-args (-D)\n  -h, --human-readable\t以可读性较好的方式显示尺寸(例如：1K 234M 2G)\n      --si\t\t类似-h，但在计算时使用1000 为基底而非1024\n  -k\t\t\t等于--block-size=1K\n  -l, --count-links\t如果是硬连接，就多次计算其尺寸\n  -m\t\t\t等于--block-size=1M\n  -L, --dereference\t找出任何符号链接指示的真正目的地\n  -P, --no-dereference\t不跟随任何符号链接(默认)\n  -0, --null\t\t将每个空行视作0 字节而非换行符\n  -S, --separate-dirs\t不包括子目录的占用量\n  -s, --summarize\t只分别计算命令列中每个参数所占的总用量\n  -x, --one-file-system\t\t跳过处于不同文件系统之上的目录\n  -X, --exclude-from=文件\t排除与指定文件中描述的模式相符的文件\n      --exclude=PATTERN\t\t排除与PATTERN 中描述的模式相符的文件\n      --max-depth=N\t显示目录总计(与--all 一起使用计算文件)\n\t\t\t当N 为指定数值时计算深度为N；\n\t\t\t--max-depth=0 等于--summarize\n      --time\t\t显示目录或该目录子目录下所有文件的最后修改时间\n      --time=WORD\t显示WORD 时间，而非修改时间：\n\t\t\tatime，access，use，ctime 或status\n      --time-style=样式\t按照指定样式显示时间(样式解释规则同\"date\"命令)：\n\t\t\tfull-iso，long-iso，iso，+FORMAT\n      --help\t\t显示此帮助信息并退出\n      --version\t\t显示版本信息并退出\n\n所显示的数值是来自 --block-size、DU_BLOCK_SIZE、BLOCK_SIZE \n及 BLOCKSIZE 环境变量中第一个可用的 SIZE 单位。\n否则，默认单位是 1024 字节(或是 512，若设定 POSIXLY_CORRECT 的话)。\n\nSIZE 可以是一个可选的整数，后面跟着以下单位中的一个：\nKB 1000，K 1024，MB 1000*1000，M 1024*1024，还有 G、T、P、E、Z、Y。\n\n```\n例子\n--------------\n1. <code>du -h --max-depth=1 文件路径</code>\n\t```\n\t(ve)yann@Computer:~/djandgo/$ du -h --max-depth=1 ../.git\n\t4.0K\t../.git/branches\n\t12K\t../.git/info\n\t28K\t../.git/refs\n\t35M\t../.git/objects\n\t380K\t../.git/logs\n\t40K\t../.git/hooks\n\t37M\t../.git\n\t\n```","source":"_posts/2015/10/14/linux.md","raw":"title: linux 使用集锦\ndate: 2015-10-14 10:54:54\ncategories:\n- Linux\ntags:\n- Linux\n---\n![一起使用linux](http://huangyan.qiniudn.com/linux.jpg?imageMogr2/thumbnail/600x400 \"一起使用linux\")\n\n\n\nGREP\n=============\n问题\n-------------\ngrep 搜索时忽略 目录\n在整个项目搜索某个关键字的时候，有些目录或者文件需要排除掉，我们可以采用以下方法：\n讲解\n-------------\n首先可以grep --help，来查看使用说明\n``` bash\ngrep --help\n用法: grep [选项]... PATTERN [FILE]...\n在每个 FILE 或是标准输入中查找 PATTERN。\n默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。\n例如: grep -i 'hello world' menu.h main.c\n\n正则表达式选择与解释:\n  -E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)\n  -F, --fixed-strings       PATTERN 是一组由断行符分隔的定长字符串。\n  -G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)\n  -P, --perl-regexp         PATTERN 是一个 Perl 正则表达式\n  -e, --regexp=PATTERN      用 PATTERN 来进行匹配操作\n  -f, --file=FILE           从 FILE 中取得 PATTERN\n  -i, --ignore-case         忽略大小写\n  -w, --word-regexp         强制 PATTERN 仅完全匹配字词\n  -x, --line-regexp         强制 PATTERN 仅完全匹配一行\n  -z, --null-data           一个 0 字节的数据行，但不是空行\n\n杂项:\n  -s, --no-messages         不显示错误信息\n  -v, --invert-match        选中不匹配的行\n  -V, --version             显示版本信息并退出\n      --help                显示此帮助并退出\n      --mmap                忽略向后兼容性\n\n输出控制:\n  -m, --max-count=NUM       NUM 次匹配后停止\n  -b, --byte-offset         输出的同时打印字节偏移\n  -n, --line-number         输出的同时打印行号\n      --line-buffered       每行输出清空\n  -H, --with-filename       为每一匹配项打印文件名\n  -h, --no-filename         输出时不显示文件名前缀\n      --label=LABEL         将LABEL 作为标准输入文件名前缀\n  -o, --only-matching       只显示一行中匹配PATTERN 的部分\n  -q, --quiet, --silent     不显示所有输出\n      --binary-files=TYPE   假定二进制文件的TYPE 类型；\n                            TYPE 可以是`binary', `text', 或`without-match'\n  -a, --text                等同于 --binary-files=text\n  -I                        等同于 --binary-files=without-match\n  -d, --directories=ACTION  操作目录的方式；\n                            ACTION 可以是`read', `recurse',或`skip'\n  -D, --devices=ACTION      操作设备、先入先出队列、套接字的方式；\n                            ACTION 可以是`read'或`skip'\n  -R, -r, --recursive       等同于 --directories=recurse\n      --include=FILE_PATTERN  只查找匹配FILE_PATTERN 的文件\n      --exclude=FILE_PATTERN  跳过匹配FILE_PATTERN 的文件和目录\n      --exclude-from=FILE   跳过所有除FILE 以外的文件\n      --exclude-dir=PATTERN  跳过所有匹配PATTERN 的目录。\n  -L, --files-without-match  只打印不匹配FILEs 的文件名\n  -l, --files-with-matches  只打印匹配FILES 的文件名\n  -c, --count               只打印每个FILE 中的匹配行数目\n  -T, --initial-tab         行首tabs 分隔（如有必要）\n  -Z, --null                在FILE 文件最后打印空字符\n\n文件控制:\n  -B, --before-context=NUM  打印以文本起始的NUM 行\n  -A, --after-context=NUM   打印以文本结尾的NUM 行\n  -C, --context=NUM         打印输出文本NUM 行\n  -NUM                      等同于 --context=NUM\n      --color[=WHEN],\n      --colour[=WHEN]       使用标志高亮匹配字串；\n                            WHEN 可以是`always', `never'或`auto'\n  -U, --binary              不要清除行尾的CR 字符(MSDOS 模式)\n  -u, --unix-byte-offsets   当CR 字符不存在，报告字节偏移(MSDOS 模式)\n\n‘egrep’即‘grep -E’。‘fgrep’即‘grep -F’。\n直接使用‘egrep’或是‘fgrep’均已不可行了。\n不带 FILE 参数，或是 FILE 为 -，将读取标准输入。如果少于两个 FILE 参数\n就要默认使用 -h 参数。如果选中任意一行，那退出状态为 0，否则为 1；\n如果有错误产生，且未指定 -q 参数，那退出状态为 2。\n\n请将错误报告给: bug-grep@gnu.org\nGNU Grep 主页: <http://www.gnu.org/software/grep/>\nGNU 软件的通用帮助: <http://www.gnu.org/gethelp/>\n\n```\n\n例子\n-----------\n```\ngrep wait_post_num -rn ./ --exclude-dir=\"fixtures\"\n```\n配置\n-----------\n如果每次都输入--exclude-dir=参数，是不是很慢还容易出错，降低效率呢?\n不过不用担心，我们可以把--exclude-dir=参数通过加入配置文件 ~/.bashrc (这是bash的当前用户配置文件) 的方法来简化操作，提高效率。\n\n在~/.bashrc文件的末尾添加以下命令：\n```\nexport GREP_OPTIONS=\"--exclude-dir=**\"\n```\n然后保存，执行source ~/.bashrc或者. ~/.bashrc，使修改起作用。\n\n\nfind\n============\n```\nfind ./ -name \"*file_name*\" 从当前目录查找文件中包含这个字段的文件\n```\n\n查看文件大小和文件夹大小\n===============\ndf 说明\n------------------\ndf命令可以显示目前所有文件系统的可用空间及使用情形\n\t\n\t```\n\tyann@Computer:~$ df --help\n\t用法：df [选项]... [文件]...\n\t显示每个文件所在的文件系统的信息，默认是显示所有文件系统。\n\t\n\t长选项必须使用的参数对于短选项时也是必需使用的。\n\t  -a, --all\t\t包含虚拟文件系统\n\t  -B, --block-size=大小\t使用指定字节数的块。例如-BM 以 1,248,576\n\t\t\t\t字节为单位显示大小。参看SIZE 格式。      --total\t\t显示总计信息\n\t  -h, --human-readable\t以可读性较好的格式显示尺寸(例如：1K 234M 2G)\n\t  -H, --si\t\t计算时使用1000 为基底而非1024\n\t  -i, --inodes\t\t显示inode 信息而非块使用量\n\t  -k\t\t\t即--block-size=1K\n\t  -l, --local\t\t只显示本机的文件系统\n\t      --no-sync\t\t取得使用量数据前不进行同步动作(默认)\n\t  -P, --portability\t使用POSIX 兼容的输出格式\n\t      --sync\t\t取得使用量数据前先进行同步动作\n\t  -t, --type=类型\t只显示指定文件系统为指定类型的信息\n\t  -T, --print-type\t显示文件系统类型\n\t  -x, --exclude-type=类型\t只显示文件系统不是指定类型信息\n\t  -v\t\t\t(忽略)\n\t      --help\t\t显示此帮助信息并退出\n\t      --version\t\t显示版本信息并退出\n\t\n\t所显示的数值是来自 --block-size、DF_BLOCK_SIZE、BLOCK_SIZE \n\t及 BLOCKSIZE 环境变量中第一个可用的 SIZE 单位。\n\t否则，默认单位是 1024 字节(或是 512，若设定 POSIXLY_CORRECT 的话)。\n\t\n\tSIZE 可以是一个可选的整数，后面跟着以下单位中的一个：\n\tKB 1000，K 1024，MB 1000*1000，M 1024*1024，还有 G、T、P、E、Z、Y。\n\t\n\t请向bug-coreutils@gnu.org 报告df 的错误\n\tGNU coreutils 的主页：<http://www.gnu.org/software/coreutils/>\n\tGNU 软件一般性帮助：<http://www.gnu.org/gethelp/>\n\t请向<http://translationproject.org/team/zh_CN.html> 报告df 的翻译错误\n\t要获取完整文档，请运行：info coreutils 'df invocation'\n\t```\n例子\n-----------\n\n1. df\n\t```\n\tyann@Computer:~$ df\n\t文件系统           1K-块     已用     可用 已用% 挂载点\n\t/dev/sda3      117985604 41013568 70972012   37% /\n\tudev             4022384        4  4022380    1% /dev\n\ttmpfs             806388     1144   805244    1% /run\n\tnone                5120        0     5120    0% /run/lock\n\tnone             4031940   169732  3862208    5% /run/shm\n\t```\n2. df -h 以可读性较好的格式显示尺寸\n\t```\n\tyann@Computer:~$ df -h\n\t文件系统        容量  已用  可用 已用% 挂载点\n\t/dev/sda3       113G   40G   68G   37% /\n\tudev            3.9G  4.0K  3.9G    1% /dev\n\ttmpfs           788M  1.2M  787M    1% /run\n\tnone            5.0M     0  5.0M    0% /run/lock\n\tnone            3.9G  168M  3.7G    5% /run/shm\n\t\n\t```\ndu 说明\n---------------\ndu：查询文件或文件夹的磁盘使用空间\n\n```\nyann@Computer:~$ du --help\n用法：du [选项]... [文件]...\n　或：du [选项]... --files0-from=F\n计算每个文件的磁盘用量，目录则取总用量。\n\n长选项必须使用的参数对于短选项时也是必需使用的。\n  -a, --all\t\t输出所有文件的磁盘用量，不仅仅是目录\n      --apparent-size\t显示表面用量，而并非是磁盘用量；虽然表面用量通常会\n\t\t\t小一些，但有时它会因为稀疏文件间的\"洞\"、内部碎\n\t\t\t片、非直接引用的块等原因而变大。\n  -B, --block-size=大小\t使用指定字节数的块。例如-BM 以 1,048,576\n\t\t\t字节为单位显示大小。参看SIZE 格式。  -b, --bytes\t\t等于--apparent-size --block-size=1\n  -c, --total\t\t显示总计信息\n  -D, --dereference-args\t解除命令行中列出的符号连接\n      --files0-from=F\t计算文件F 中以NUL 结尾的文件名对应占用的磁盘空间\n\t\t\t如果F 的值是\"-\"，则从标准输入读入文件名\n  -H\t\t\t等于--dereference-args (-D)\n  -h, --human-readable\t以可读性较好的方式显示尺寸(例如：1K 234M 2G)\n      --si\t\t类似-h，但在计算时使用1000 为基底而非1024\n  -k\t\t\t等于--block-size=1K\n  -l, --count-links\t如果是硬连接，就多次计算其尺寸\n  -m\t\t\t等于--block-size=1M\n  -L, --dereference\t找出任何符号链接指示的真正目的地\n  -P, --no-dereference\t不跟随任何符号链接(默认)\n  -0, --null\t\t将每个空行视作0 字节而非换行符\n  -S, --separate-dirs\t不包括子目录的占用量\n  -s, --summarize\t只分别计算命令列中每个参数所占的总用量\n  -x, --one-file-system\t\t跳过处于不同文件系统之上的目录\n  -X, --exclude-from=文件\t排除与指定文件中描述的模式相符的文件\n      --exclude=PATTERN\t\t排除与PATTERN 中描述的模式相符的文件\n      --max-depth=N\t显示目录总计(与--all 一起使用计算文件)\n\t\t\t当N 为指定数值时计算深度为N；\n\t\t\t--max-depth=0 等于--summarize\n      --time\t\t显示目录或该目录子目录下所有文件的最后修改时间\n      --time=WORD\t显示WORD 时间，而非修改时间：\n\t\t\tatime，access，use，ctime 或status\n      --time-style=样式\t按照指定样式显示时间(样式解释规则同\"date\"命令)：\n\t\t\tfull-iso，long-iso，iso，+FORMAT\n      --help\t\t显示此帮助信息并退出\n      --version\t\t显示版本信息并退出\n\n所显示的数值是来自 --block-size、DU_BLOCK_SIZE、BLOCK_SIZE \n及 BLOCKSIZE 环境变量中第一个可用的 SIZE 单位。\n否则，默认单位是 1024 字节(或是 512，若设定 POSIXLY_CORRECT 的话)。\n\nSIZE 可以是一个可选的整数，后面跟着以下单位中的一个：\nKB 1000，K 1024，MB 1000*1000，M 1024*1024，还有 G、T、P、E、Z、Y。\n\n```\n例子\n--------------\n1. <code>du -h --max-depth=1 文件路径</code>\n\t```\n\t(ve)yann@Computer:~/djandgo/$ du -h --max-depth=1 ../.git\n\t4.0K\t../.git/branches\n\t12K\t../.git/info\n\t28K\t../.git/refs\n\t35M\t../.git/objects\n\t380K\t../.git/logs\n\t40K\t../.git/hooks\n\t37M\t../.git\n\t\n```","slug":"linux","published":1,"updated":"2015-10-29T09:40:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzp002yg0orj4cuouxh"},{"title":"python 问题","date":"2015-10-13T06:19:59.000Z","_content":"\nIndentationError: unindent does not match any outer indentation level\n=============\n问题描述\n-------------\n一个python脚本，本来都运行好好的，然后写了几行代码，而且也都确保每行都对齐了，但是运行的时候，却出现语法错误\n![Error pic](http://huangyan.qiniudn.com/tab_error.png)\n解决方法\n-------------\n缩进问题，特别是把几个不同的源码拷到一块修改调式的时候容易遇到，因为两个人写的程序缩进可能不一样，有的是tab，有的是空格，这用肉眼很难察觉。把缩进都改为一种格式就可以了。\n\n\nxxx  is not JSON serializable\n=============\n在使用json的时候经常会遇到xxx  is not JSON serializable，也就是无法序列化某些对象。经常使用django的同学知道django里面有个自带的Encoder(<code>from django.core.serializers.json import DjangoJSONEncoder</code>)来序列化时间等常用的对象。其实我们可以自己定定义对特定类型的对象的序列化，下面看下怎么定义和使用的。\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#json_extention\n#2014-03-16\n#copyright: orangleliu\n#license: BSD\n\n'''\npython中dumps方法很好用，可以直接把我们的dict直接序列化为json对象\n但是有的时候我们加了一些自定义的类就没法序列化了，这个时候需要\n自定义一些序列化方法\n\n参考：\nhttp://docs.python.org/2.7/library/json.html\n\n例如:\nIn [3]: from datetime import  datetime\n\nIn [4]: json_1 = {'num':1112, 'date':datetime.now()}\n\nIn [5]: import json\n\nIn [6]: json.dumps(json_1)\n---------------------------------------------------------------------------\nTypeError\t\t\t\t\t\t\t\t Traceback (most recent call last)\nD:\\devsofts\\python2.7\\lib\\site-packages\\django\\core\\management\\commands\\shell.py\nc in <module>()\n----> 1 json.dumps(json_1)\n\nTypeError: datetime.datetime(2014, 3, 16, 13, 47, 37, 353000) is not JSON serial\nizable\n'''\n```\n```\nfrom datetime import datetime\nimport json\n\nclass DateEncoder(json.JSONEncoder ):\n  def default(self, obj):\n    if isinstance(obj, datetime):\n      return obj.__str__()\n    return json.JSONEncoder.default(self, obj)\n\njson_1 = {'num':1112, 'date':datetime.now()}\nprint json.dumps(json_1, cls=DateEncoder)\n\n'''\n输出结果：\n\nPS D:\\code\\python\\python_abc> python .\\json_extention.py\n{\"date\": \"2014-03-16 13:56:39.003000\", \"num\": 1112}\n'''\n```\n```\n#我们自定义一个类试试\n\nclass User(object):\n   def __init__(self, name):\n    self.name = name\n\nclass UserEncoder(json.JSONEncoder):\n  def default(self, obj):\n    if isinstance(obj, User):\n      return obj.name\n    return json.JSONEncoder.default(self, obj)\n\njson_2 = {'user':User('orangle')}\nprint json.dumps(json_2, cls=UserEncoder)\n\n\nPS D:\\code\\python\\python_abc> python .\\json_extention.py\n{\"date\": \"2014-03-16 14:01:46.738000\", \"num\": 1112}\n{\"user\": \"orangle\"}\n\n```\n\nunsupported operand type(s) for +: 'float' and 'Decimal'\n=================================\n在使用django时候，取得数据库中的Float型时，与cost相加出现的错误\n\n\t```\n\t cost = 0\n\t daily_order.cost_of_product = daily_order.cost_of_product + cost\n\t```\n解决方法\n\n\t```\n\timport decimal\n\t​daily_order.cost_of_product = decimal.Decimal(daily_order.cost_of_product) + cost\n\t```\nneed string or buffer, long found\n=============\n今天给 Django 设计模型时, 把模型的 __unicode__() 函数设计成返回 id, 结果出现了\ncoercing to Unicode: need string or buffer, long found\n\n感觉很奇怪. 总是提个醒吧, 不要妄图用 __unicode__() 得到 id.\n不过 unicode(id) 应该是可以的吧.","source":"_posts/2015/10/13/python_question.md","raw":"title: python 问题\ndate: 2015-10-13 14:19:59\ncategories:\n- Python\ntags:\n- Python\n---\n\nIndentationError: unindent does not match any outer indentation level\n=============\n问题描述\n-------------\n一个python脚本，本来都运行好好的，然后写了几行代码，而且也都确保每行都对齐了，但是运行的时候，却出现语法错误\n![Error pic](http://huangyan.qiniudn.com/tab_error.png)\n解决方法\n-------------\n缩进问题，特别是把几个不同的源码拷到一块修改调式的时候容易遇到，因为两个人写的程序缩进可能不一样，有的是tab，有的是空格，这用肉眼很难察觉。把缩进都改为一种格式就可以了。\n\n\nxxx  is not JSON serializable\n=============\n在使用json的时候经常会遇到xxx  is not JSON serializable，也就是无法序列化某些对象。经常使用django的同学知道django里面有个自带的Encoder(<code>from django.core.serializers.json import DjangoJSONEncoder</code>)来序列化时间等常用的对象。其实我们可以自己定定义对特定类型的对象的序列化，下面看下怎么定义和使用的。\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#json_extention\n#2014-03-16\n#copyright: orangleliu\n#license: BSD\n\n'''\npython中dumps方法很好用，可以直接把我们的dict直接序列化为json对象\n但是有的时候我们加了一些自定义的类就没法序列化了，这个时候需要\n自定义一些序列化方法\n\n参考：\nhttp://docs.python.org/2.7/library/json.html\n\n例如:\nIn [3]: from datetime import  datetime\n\nIn [4]: json_1 = {'num':1112, 'date':datetime.now()}\n\nIn [5]: import json\n\nIn [6]: json.dumps(json_1)\n---------------------------------------------------------------------------\nTypeError\t\t\t\t\t\t\t\t Traceback (most recent call last)\nD:\\devsofts\\python2.7\\lib\\site-packages\\django\\core\\management\\commands\\shell.py\nc in <module>()\n----> 1 json.dumps(json_1)\n\nTypeError: datetime.datetime(2014, 3, 16, 13, 47, 37, 353000) is not JSON serial\nizable\n'''\n```\n```\nfrom datetime import datetime\nimport json\n\nclass DateEncoder(json.JSONEncoder ):\n  def default(self, obj):\n    if isinstance(obj, datetime):\n      return obj.__str__()\n    return json.JSONEncoder.default(self, obj)\n\njson_1 = {'num':1112, 'date':datetime.now()}\nprint json.dumps(json_1, cls=DateEncoder)\n\n'''\n输出结果：\n\nPS D:\\code\\python\\python_abc> python .\\json_extention.py\n{\"date\": \"2014-03-16 13:56:39.003000\", \"num\": 1112}\n'''\n```\n```\n#我们自定义一个类试试\n\nclass User(object):\n   def __init__(self, name):\n    self.name = name\n\nclass UserEncoder(json.JSONEncoder):\n  def default(self, obj):\n    if isinstance(obj, User):\n      return obj.name\n    return json.JSONEncoder.default(self, obj)\n\njson_2 = {'user':User('orangle')}\nprint json.dumps(json_2, cls=UserEncoder)\n\n\nPS D:\\code\\python\\python_abc> python .\\json_extention.py\n{\"date\": \"2014-03-16 14:01:46.738000\", \"num\": 1112}\n{\"user\": \"orangle\"}\n\n```\n\nunsupported operand type(s) for +: 'float' and 'Decimal'\n=================================\n在使用django时候，取得数据库中的Float型时，与cost相加出现的错误\n\n\t```\n\t cost = 0\n\t daily_order.cost_of_product = daily_order.cost_of_product + cost\n\t```\n解决方法\n\n\t```\n\timport decimal\n\t​daily_order.cost_of_product = decimal.Decimal(daily_order.cost_of_product) + cost\n\t```\nneed string or buffer, long found\n=============\n今天给 Django 设计模型时, 把模型的 __unicode__() 函数设计成返回 id, 结果出现了\ncoercing to Unicode: need string or buffer, long found\n\n感觉很奇怪. 总是提个醒吧, 不要妄图用 __unicode__() 得到 id.\n不过 unicode(id) 应该是可以的吧.","slug":"python_question","published":1,"updated":"2015-10-30T12:21:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzr0031g0orykk72m3t"},{"title":"URI和URL的区别","date":"2015-10-12T12:36:45.000Z","_content":"URIs, URLs, and URNs\n=============\n* 首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\n* 而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\n* 而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。\n也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。","source":"_posts/2015/10/12/technology.md","raw":"title: URI和URL的区别\ndate: 2015-10-12 20:36:45\ncategories:\n- 技术点滴\ntags:\n- 技术点滴\n---\nURIs, URLs, and URNs\n=============\n* 首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\n* 而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\n* 而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。\n也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。","slug":"technology","published":1,"updated":"2015-10-28T08:28:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzu0034g0orcy5wf3yr"},{"title":"Markdown 使用","date":"2015-10-12T01:40:28.000Z","_content":"简介\n=============\nMarkdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n\n标题\n=============\n        This is an H1\n        =============  第一阶标题\n\n        This is an H2\n        -------------  第二阶标题\n\n链接\n=============\nMarkdown 支持两种形式的链接语法： 行内式和参考式两种形式。\n```\n行内式:这是参考链接 [title](http://cyan-blue.github.io) .\n```\n\n强调\n=============\nMarkdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：\n```\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n```\n会转成：\n```\n<em>single asterisks</em>\n\n<em>single underscores</em>\n\n<strong>double asterisks</strong>\n\n<strong>double underscores</strong>\n```\n你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。\n\n强调也可以直接插在文字中间：\n```\nun*frigging*believable\n```\n但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。\n\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：\n```\n\\*this text is surrounded by literal asterisks\\*\n```\n\n图片\n============\n很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n行内式的图片语法看起来像是：\n```\n![python](http://huangyan.qiniudn.com/bird.jpg?imageMogr2/thumbnail/400x200 \"python\")\n```\n详细叙述如下：\n* 一个惊叹号 !\n* 接着一个方括号，里面放上图片的替代文字\n* 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。","source":"_posts/2015/10/12/Markdown.md","raw":"title: Markdown 使用\ndate: 2015-10-12 09:40:28\ncategories:\n- 技术点滴\ntags:\n- Markdown\n---\n简介\n=============\nMarkdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n\n标题\n=============\n        This is an H1\n        =============  第一阶标题\n\n        This is an H2\n        -------------  第二阶标题\n\n链接\n=============\nMarkdown 支持两种形式的链接语法： 行内式和参考式两种形式。\n```\n行内式:这是参考链接 [title](http://cyan-blue.github.io) .\n```\n\n强调\n=============\nMarkdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：\n```\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n```\n会转成：\n```\n<em>single asterisks</em>\n\n<em>single underscores</em>\n\n<strong>double asterisks</strong>\n\n<strong>double underscores</strong>\n```\n你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。\n\n强调也可以直接插在文字中间：\n```\nun*frigging*believable\n```\n但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。\n\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：\n```\n\\*this text is surrounded by literal asterisks\\*\n```\n\n图片\n============\n很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n行内式的图片语法看起来像是：\n```\n![python](http://huangyan.qiniudn.com/bird.jpg?imageMogr2/thumbnail/400x200 \"python\")\n```\n详细叙述如下：\n* 一个惊叹号 !\n* 接着一个方括号，里面放上图片的替代文字\n* 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。","slug":"Markdown","published":1,"updated":"2015-10-30T12:24:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguiltzx0039g0orxkbqbj97"},{"title":"JavaScript 使用","date":"2015-10-12T01:20:41.000Z","_content":"\n简介\n=============\nJavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。\n\njQuery 事件 - bind() 方法\n=============\n```\n$(\".btn-save\").bind(\"click\", btn_save_func); //绑定btn_save_func\nfunction btn_save_func () { console.log(\"func\")}\n$(\".btn-save\").unbind(\"click\");//解绑btn_save_func\n```","source":"_posts/2015/10/12/JS.md","raw":"title: JavaScript 使用\ndate: 2015-10-12 09:20:41\ncategories:\n- 前端\ntags:\n- Js\n---\n\n简介\n=============\nJavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。\n\njQuery 事件 - bind() 方法\n=============\n```\n$(\".btn-save\").bind(\"click\", btn_save_func); //绑定btn_save_func\nfunction btn_save_func () { console.log(\"func\")}\n$(\".btn-save\").unbind(\"click\");//解绑btn_save_func\n```","slug":"JS","published":1,"updated":"2015-10-30T12:20:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilu03003dg0ortd40tfn6"},{"title":"Django 问题收集","date":"2015-10-12T08:46:06.000Z","_content":"\nneed string or buffer, long found\n=============\n今天给 Django 设计模型时, 把模型的 __unicode__() 函数设计成返回 id, 结果出现了\ncoercing to Unicode: need string or buffer, long found\n\n感觉很奇怪. 总是提个醒吧, 不要妄图用 __unicode__() 得到 id.\n不过 unicode(id) 应该是可以的吧.\n\nSite matching query does not exist.\n==============\n\nIf you don't have a site defined in your database and django wants to reference it, you will need to create one.\n```\nFrom a python manage.py shell :\n\nfrom django.contrib.sites.models import Site\nnew_site = Site.objects.create(domain='foo.com', name='foo.com')\nprint new_site.id\n```\nNow set that site ID in your settings.py to SITE_ID","source":"_posts/2015/10/12/Django.md","raw":"title: Django 问题收集\ndate: 2015-10-12 16:46:06\ncategories:\n- Django\ntags:\n- Django\n- Error\n---\n\nneed string or buffer, long found\n=============\n今天给 Django 设计模型时, 把模型的 __unicode__() 函数设计成返回 id, 结果出现了\ncoercing to Unicode: need string or buffer, long found\n\n感觉很奇怪. 总是提个醒吧, 不要妄图用 __unicode__() 得到 id.\n不过 unicode(id) 应该是可以的吧.\n\nSite matching query does not exist.\n==============\n\nIf you don't have a site defined in your database and django wants to reference it, you will need to create one.\n```\nFrom a python manage.py shell :\n\nfrom django.contrib.sites.models import Site\nnew_site = Site.objects.create(domain='foo.com', name='foo.com')\nprint new_site.id\n```\nNow set that site ID in your settings.py to SITE_ID","slug":"Django","published":1,"updated":"2015-11-11T09:08:18.000Z","_id":"ciguilu05003gg0orsmedgvk1","comments":1,"layout":"post","photos":[],"link":""},{"title":"Css 使用","date":"2015-10-12T02:11:24.000Z","_content":"\n简介\n=============\n层叠样式表是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。","source":"_posts/2015/10/12/Css.md","raw":"title: Css 使用\ndate: 2015-10-12 10:11:24\ncategories:\n- 前端\ntags:\n- Css\n---\n\n简介\n=============\n层叠样式表是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。","slug":"Css","published":1,"updated":"2015-10-28T08:27:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilu08003lg0or9fdqxe97"},{"title":"github输入用户和密码","date":"2015-10-09T13:00:20.000Z","_content":"\n## 每次git push 的时候总是要输用户名和密码的解决方法\n\n```\ngit remote -v\n>origin\tgit@github.com:cyan-blue/cyan-blue.github.io.git (fetch)\n>origin\tgit@github.com:cyan-blue/cyan-blue.github.io.git (push)\n```\n下面把它换成ssh方式的。\n```\ngit remote rm origin\ngit remote add origin git@github.com:cyan-blue/cyan-blue.github.io.git\ngit push origin\n```","source":"_posts/2015/10/09/github-user-pwd.md","raw":"title: github输入用户和密码\ndate: 2015-10-09 21:00:20\ncategories:\n- Git\ntags:\n- GitHub\n---\n\n## 每次git push 的时候总是要输用户名和密码的解决方法\n\n```\ngit remote -v\n>origin\tgit@github.com:cyan-blue/cyan-blue.github.io.git (fetch)\n>origin\tgit@github.com:cyan-blue/cyan-blue.github.io.git (push)\n```\n下面把它换成ssh方式的。\n```\ngit remote rm origin\ngit remote add origin git@github.com:cyan-blue/cyan-blue.github.io.git\ngit push origin\n```","slug":"github-user-pwd","published":1,"updated":"2015-10-30T12:20:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilu0c003pg0or3ocmvnjr"},{"title":"Git Use","date":"2015-10-09T03:30:39.000Z","_content":"\n\n<span style=\"color:#408140\">Git Start</span>\n=================\nGit是目前世界上最先进的分布式版本控制系统（没有之一）。\n查看本地分支:\n-----------------\n```\ngit branch\n```\n查看远程分支:\n-----------------\n```\ngit branch -r\n```\n新建branch：\n-----------------\n```\ngit checkout -b abc_branch\n```\n\n删除分支\n-----------------\n```\ngit branch -d abc_branch\n```\n<span style=\"color:#408140;\">强制删除使用 -D</span>\n切换branch\n-----------------\n```\ngit checkout abc_branch\n```\n合并分支\n-----------------\n```\ngit merge abc_branch\n```\n查看记录\n-----------------\n```\ngit blame filename 查看该文件目前的每一行最后改动的是什么时候提交的\ngit log -p filename 查看这个文件所有的详细提交\n```\n查看某一个文件的所有提交记录：\n```\ngit log --pretty=oneline 文件路径`\ngit log --pretty=oneline views.py\n>>f850a9ef393584e49d46391897db614ed56a2903 third commit\n>>0d08b578371afb8f45748a0491faa2a7820d7928 second commit\n>>3fcc3973deee5c33695c0b40b18a11f83c986b2d first commit\n```\n查看某一个记录的修改内容：\n-----------------\n*\n\t```\n\tgit show 3fcc3973deee5c33695c0b40b18a11f83c986b2d\n\t```\n\t例子里面打印出来的就是针对文件views.py的所有的改动历史，每一行最前面的那一长串数字就是每次提交形成的哈希值，接下来使用git show即可显示具体的某次的改动的修改\n\n存储\n-----------------\n-   ```\n    git stash\n    ```\n    > 用来暂存当前正在进行的工作， 比如突然你想pull 最新代码， 又不想加新commit， 或者为了fix 一个紧急的bug, 先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。\n-   ```\n    git stash 做一些操作后\n    git stash list 查看stash 列表\n    git pop 将最近的一个取出，并且删除\n    ```\n-   > if你的stash里面有好多个，这个时候可以使用git stash list 将Git栈信息打印出来，然后git stash apply stash@{0},取出对应的，注意这个时候并没有清除，如果需要清除，git stash clear，清空\n\n    >stash 多了，会发现list中你不知道哪一个对应的修改是什么？解决方法\n\n    ```\n    git stash save \"I DO SOMETHING\"\n    git stash list\n    >>stash@{0}: On develop: I DO SOMETHING\n    git stash pop stash@{0} or git stash apply stash@{0}\n     两者区别在于pop会删除stash，apply不会删除最后apply结束后，git stash clear\n    ```\n    **详细可以使用 git stash -help**\n\ngit pull --rebase\n-----------------\n\n>当本地commit一个提交和远端服务器中的代码有冲突(别人也改了相同的文件)时可以在pull 中加 –rebase。\n\n>加上rebase的意思是：\n把本地 repo. 从上次 pull 之后的变更暂存起來\n恢复到上次 pull 时的状态\n合并远端的变更到本地\n最后再合并刚刚暂存下來的本地变更\n\n\n修改commit 内容\n-----------------\n1. // 查看修改\n\t```\n\tgit commit --amend 可以修改最后一次 commit\n\t```\n\n\t```\n\tgit rebase -i master~1 //最后一次\n\tgit rebase -i master~5 //最后五次\n\t```\n2. // 显示结果如下，修改 pick 为 edit ，并 :wq 保存退出\n\t```\n\tpick 92b495b 2009-08-08: ×××××××\n\tRebase 9ef2b1f..92b495b onto 9ef2b1f\n\tCommands:\n\tpick = use commit\n\tedit = use commit, but stop for amending //改上面的 pick 为 edit\n\tsquash = use commit, but meld into previous commit\n\tIf you remove a line here THAT COMMIT WILL BE LOST.\n\t However, if you remove everything, the rebase will be aborted.\n\t```\n3. 命令行显示：\n\n\t```\n\tRebasing (1/1)\n\tYou can amend the commit now, with\n\tgit commit --amend\n\t```\n4. 使用 `git commit --amend` 进行修改，完成后 :wq 退出\n5. 使用 `git rebase --continue` 完成操作\n\n恢复文件\n-----------------\n- git 恢复\t\t\n\t```\n\tgit checkout\n\t```\n- git 返回到某个节点的文件\n\t\n\t```\n\tgit checkout 1bbbb91aaf96f1274750c6fd21d77c5e7142d424 文件路径\n\t```\n\ngit 有用的小贴士\n-----------------\n\n\t```\n\t> 内建的git输出 gitk\n\t> 彩色的git输出 git config color.ui true\n\t> git config format.pretty oneline\n\t```\n\n<span style=\"color:red;\">Git 使用时候遇到的错误</span>\n=================\n1. GIT CLONE ERROR\n错误fatal: The remote end hung up unexpectedly\n解决方案：\n\t```\n\tgit config --global http.postBuffer 24288000\n\tgit config --list\n\t```\n\n<span style=\"color:blue;\">GIT 一般使用：</span>\n=================\n\n从一般开发者的角度来看，git有以下功能：\n-----------------\n1. 从服务器上克隆数据库（包括代码和版本信息）到单机上。\n2. 在自己的机器上创建分支，修改代码。\n3. 在单机上自己创建的分支上提交代码。\n4. 在单机上合并分支。\n5. 新建一个分支，把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。\n6. 生成补丁（patch），把补丁发送给主开发者。\n7. 看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。\n8. 一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。\n\n从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：\n-----------------\n1. 查看邮件或者通过其它方式查看一般开发者的提交状态。\n2. 打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。\n3. 向公共服务器提交结果，然后通知所有开发人员。","source":"_posts/2015/10/09/Git-Use.md","raw":"title: Git Use\ndate: 2015-10-09 11:30:39\ncategories:\n- Git\ntags:\n- Git\n---\n\n\n<span style=\"color:#408140\">Git Start</span>\n=================\nGit是目前世界上最先进的分布式版本控制系统（没有之一）。\n查看本地分支:\n-----------------\n```\ngit branch\n```\n查看远程分支:\n-----------------\n```\ngit branch -r\n```\n新建branch：\n-----------------\n```\ngit checkout -b abc_branch\n```\n\n删除分支\n-----------------\n```\ngit branch -d abc_branch\n```\n<span style=\"color:#408140;\">强制删除使用 -D</span>\n切换branch\n-----------------\n```\ngit checkout abc_branch\n```\n合并分支\n-----------------\n```\ngit merge abc_branch\n```\n查看记录\n-----------------\n```\ngit blame filename 查看该文件目前的每一行最后改动的是什么时候提交的\ngit log -p filename 查看这个文件所有的详细提交\n```\n查看某一个文件的所有提交记录：\n```\ngit log --pretty=oneline 文件路径`\ngit log --pretty=oneline views.py\n>>f850a9ef393584e49d46391897db614ed56a2903 third commit\n>>0d08b578371afb8f45748a0491faa2a7820d7928 second commit\n>>3fcc3973deee5c33695c0b40b18a11f83c986b2d first commit\n```\n查看某一个记录的修改内容：\n-----------------\n*\n\t```\n\tgit show 3fcc3973deee5c33695c0b40b18a11f83c986b2d\n\t```\n\t例子里面打印出来的就是针对文件views.py的所有的改动历史，每一行最前面的那一长串数字就是每次提交形成的哈希值，接下来使用git show即可显示具体的某次的改动的修改\n\n存储\n-----------------\n-   ```\n    git stash\n    ```\n    > 用来暂存当前正在进行的工作， 比如突然你想pull 最新代码， 又不想加新commit， 或者为了fix 一个紧急的bug, 先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。\n-   ```\n    git stash 做一些操作后\n    git stash list 查看stash 列表\n    git pop 将最近的一个取出，并且删除\n    ```\n-   > if你的stash里面有好多个，这个时候可以使用git stash list 将Git栈信息打印出来，然后git stash apply stash@{0},取出对应的，注意这个时候并没有清除，如果需要清除，git stash clear，清空\n\n    >stash 多了，会发现list中你不知道哪一个对应的修改是什么？解决方法\n\n    ```\n    git stash save \"I DO SOMETHING\"\n    git stash list\n    >>stash@{0}: On develop: I DO SOMETHING\n    git stash pop stash@{0} or git stash apply stash@{0}\n     两者区别在于pop会删除stash，apply不会删除最后apply结束后，git stash clear\n    ```\n    **详细可以使用 git stash -help**\n\ngit pull --rebase\n-----------------\n\n>当本地commit一个提交和远端服务器中的代码有冲突(别人也改了相同的文件)时可以在pull 中加 –rebase。\n\n>加上rebase的意思是：\n把本地 repo. 从上次 pull 之后的变更暂存起來\n恢复到上次 pull 时的状态\n合并远端的变更到本地\n最后再合并刚刚暂存下來的本地变更\n\n\n修改commit 内容\n-----------------\n1. // 查看修改\n\t```\n\tgit commit --amend 可以修改最后一次 commit\n\t```\n\n\t```\n\tgit rebase -i master~1 //最后一次\n\tgit rebase -i master~5 //最后五次\n\t```\n2. // 显示结果如下，修改 pick 为 edit ，并 :wq 保存退出\n\t```\n\tpick 92b495b 2009-08-08: ×××××××\n\tRebase 9ef2b1f..92b495b onto 9ef2b1f\n\tCommands:\n\tpick = use commit\n\tedit = use commit, but stop for amending //改上面的 pick 为 edit\n\tsquash = use commit, but meld into previous commit\n\tIf you remove a line here THAT COMMIT WILL BE LOST.\n\t However, if you remove everything, the rebase will be aborted.\n\t```\n3. 命令行显示：\n\n\t```\n\tRebasing (1/1)\n\tYou can amend the commit now, with\n\tgit commit --amend\n\t```\n4. 使用 `git commit --amend` 进行修改，完成后 :wq 退出\n5. 使用 `git rebase --continue` 完成操作\n\n恢复文件\n-----------------\n- git 恢复\t\t\n\t```\n\tgit checkout\n\t```\n- git 返回到某个节点的文件\n\t\n\t```\n\tgit checkout 1bbbb91aaf96f1274750c6fd21d77c5e7142d424 文件路径\n\t```\n\ngit 有用的小贴士\n-----------------\n\n\t```\n\t> 内建的git输出 gitk\n\t> 彩色的git输出 git config color.ui true\n\t> git config format.pretty oneline\n\t```\n\n<span style=\"color:red;\">Git 使用时候遇到的错误</span>\n=================\n1. GIT CLONE ERROR\n错误fatal: The remote end hung up unexpectedly\n解决方案：\n\t```\n\tgit config --global http.postBuffer 24288000\n\tgit config --list\n\t```\n\n<span style=\"color:blue;\">GIT 一般使用：</span>\n=================\n\n从一般开发者的角度来看，git有以下功能：\n-----------------\n1. 从服务器上克隆数据库（包括代码和版本信息）到单机上。\n2. 在自己的机器上创建分支，修改代码。\n3. 在单机上自己创建的分支上提交代码。\n4. 在单机上合并分支。\n5. 新建一个分支，把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。\n6. 生成补丁（patch），把补丁发送给主开发者。\n7. 看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。\n8. 一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。\n\n从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：\n-----------------\n1. 查看邮件或者通过其它方式查看一般开发者的提交状态。\n2. 打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。\n3. 向公共服务器提交结果，然后通知所有开发人员。","slug":"Git-Use","published":1,"updated":"2015-10-28T08:26:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciguilu0f003ug0orys0bocmw"}],"PostAsset":[],"PostCategory":[{"post_id":"ciguiltx20000g0orx3w7jti9","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltx80004g0orn3dlmchr"},{"post_id":"ciguilty0000ag0orkfr983np","category_id":"ciguilty1000bg0or1k714qm7","_id":"ciguilty1000eg0orl9rs2062"},{"post_id":"ciguilty3000fg0oroq4kg340","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguilty4000ig0orgs8uzcgw"},{"post_id":"ciguilty3000fg0oroq4kg340","category_id":"ciguilty4000gg0orj4i633nk","_id":"ciguilty4000jg0oratvqznmt"},{"post_id":"ciguilty5000kg0or8das86io","category_id":"ciguilty1000bg0or1k714qm7","_id":"ciguilty6000lg0orl6mzel7a"},{"post_id":"ciguilty7000ng0or5aj9s56a","category_id":"ciguilty8000og0orev3heonl","_id":"ciguilty9000rg0ork4grlk3q"},{"post_id":"ciguiltya000sg0or10n926sx","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltyb000vg0or0835a0kz"},{"post_id":"ciguiltya000sg0or10n926sx","category_id":"ciguiltyb000tg0or1udvyitl","_id":"ciguiltyb000wg0orc608g971"},{"post_id":"ciguiltyc000xg0ortnmg63oy","category_id":"ciguiltyd000yg0oreky33ucy","_id":"ciguiltye0011g0orz54rd7w0"},{"post_id":"ciguiltyf0013g0ors5yseg1b","category_id":"ciguiltyd000yg0oreky33ucy","_id":"ciguiltyh0016g0ormp1ag3g6"},{"post_id":"ciguiltyf0013g0ors5yseg1b","category_id":"ciguiltyg0014g0ord1uf37p4","_id":"ciguiltyh0017g0orlqvafa6d"},{"post_id":"ciguiltyk0018g0orv8law922","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltyl0019g0or8nhydkj4"},{"post_id":"ciguiltyk0018g0orv8law922","category_id":"ciguilty4000gg0orj4i633nk","_id":"ciguiltyl001bg0orompb70jo"},{"post_id":"ciguiltyp001cg0ora7bjlx4w","category_id":"ciguiltyd000yg0oreky33ucy","_id":"ciguiltyq001dg0or4zrf4cr5"},{"post_id":"ciguiltyp001cg0ora7bjlx4w","category_id":"ciguiltyg0014g0ord1uf37p4","_id":"ciguiltyr001fg0orgch20e6z"},{"post_id":"ciguiltyt001gg0or9yflqkuo","category_id":"ciguiltyv001hg0orlwrwsyf8","_id":"ciguiltyw001lg0orgtm6nfts"},{"post_id":"ciguiltyt001gg0or9yflqkuo","category_id":"ciguiltyw001jg0orvd3fycc5","_id":"ciguiltyw001mg0orchqxvglx"},{"post_id":"ciguiltyx001ng0ornphf8wyg","category_id":"ciguiltyy001og0org654xgjy","_id":"ciguiltyz001rg0orf0hv76g4"},{"post_id":"ciguiltz0001sg0orxbwfbcw9","category_id":"ciguiltz1001tg0orwexzbcli","_id":"ciguiltz2001wg0orzat1byzv"},{"post_id":"ciguiltz3001xg0oraiqg3z2x","category_id":"ciguiltz1001tg0orwexzbcli","_id":"ciguiltz4001yg0oryc7f7lvk"},{"post_id":"ciguiltz50020g0oruq3lv83c","category_id":"ciguiltz1001tg0orwexzbcli","_id":"ciguiltz60021g0orbnif9i52"},{"post_id":"ciguiltz90024g0or91rbgn13","category_id":"ciguiltyd000yg0oreky33ucy","_id":"ciguiltza0025g0orj825zzxc"},{"post_id":"ciguiltzb0027g0orz3pgsv2t","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltzb0028g0orcfjytrvk"},{"post_id":"ciguiltzd002ag0oryf1yal4j","category_id":"ciguiltze002bg0or8bfhomt3","_id":"ciguiltze002eg0oryn3wh5rt"},{"post_id":"ciguiltzf002fg0or2xgh6zv0","category_id":"ciguiltzg002gg0oruegrp0qf","_id":"ciguiltzh002ig0ornrq0lmiq"},{"post_id":"ciguiltzi002jg0orxlzbmlci","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguiltzj002mg0orrscakf2i"},{"post_id":"ciguiltzi002jg0orxlzbmlci","category_id":"ciguiltzi002kg0orqmtbc14l","_id":"ciguiltzj002ng0ortx2kpnu2"},{"post_id":"ciguiltzk002og0orah1esmnc","category_id":"ciguiltz1001tg0orwexzbcli","_id":"ciguiltzl002pg0orvyhchp9n"},{"post_id":"ciguiltzm002rg0orqrebv00a","category_id":"ciguiltz1001tg0orwexzbcli","_id":"ciguiltzm002sg0orrkwepa3a"},{"post_id":"ciguiltzo002ug0orxgyzx1gn","category_id":"ciguiltze002bg0or8bfhomt3","_id":"ciguiltzo002vg0or4x2s5bc4"},{"post_id":"ciguiltzp002yg0orj4cuouxh","category_id":"ciguiltyd000yg0oreky33ucy","_id":"ciguiltzq002zg0orkelu5u8q"},{"post_id":"ciguiltzr0031g0orykk72m3t","category_id":"ciguiltz1001tg0orwexzbcli","_id":"ciguiltzt0032g0orhriblxk9"},{"post_id":"ciguiltzu0034g0orcy5wf3yr","category_id":"ciguiltzu0035g0oryx7ww9qd","_id":"ciguiltzv0038g0orza9v0cic"},{"post_id":"ciguiltzx0039g0orxkbqbj97","category_id":"ciguiltzu0035g0oryx7ww9qd","_id":"ciguiltzy003ag0oruhruzo55"},{"post_id":"ciguilu03003dg0ortd40tfn6","category_id":"ciguiltze002bg0or8bfhomt3","_id":"ciguilu04003eg0orp1z4z75o"},{"post_id":"ciguilu08003lg0or9fdqxe97","category_id":"ciguiltze002bg0or8bfhomt3","_id":"ciguilu09003mg0orxisxlewt"},{"post_id":"ciguilu0c003pg0or3ocmvnjr","category_id":"ciguilu0d003qg0or5k7x5glb","_id":"ciguilu0e003tg0ortb1dkei8"},{"post_id":"ciguilu0f003ug0orys0bocmw","category_id":"ciguilu0d003qg0or5k7x5glb","_id":"ciguilu0g003vg0orjji80dw1"},{"post_id":"ciguiltxy0009g0orqu1fssnk","category_id":"ciguilty1000bg0or1k714qm7","_id":"ciguqktd10000irorog4gjhx8"},{"post_id":"ciguilu05003gg0orsmedgvk1","category_id":"ciguiltx60001g0orkxsw3ec5","_id":"ciguqktek0001irorcuq01yz3"}],"PostTag":[{"post_id":"ciguiltx20000g0orx3w7jti9","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguiltx70003g0orctmjq521"},{"post_id":"ciguilty0000ag0orkfr983np","tag_id":"ciguilty1000cg0orsqe93jtt","_id":"ciguilty1000dg0ormtd6s1sv"},{"post_id":"ciguilty3000fg0oroq4kg340","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguilty4000hg0ortvmwx6ed"},{"post_id":"ciguilty5000kg0or8das86io","tag_id":"ciguilty1000cg0orsqe93jtt","_id":"ciguilty6000mg0orn0b5af5n"},{"post_id":"ciguilty7000ng0or5aj9s56a","tag_id":"ciguilty8000pg0or6b4tpidp","_id":"ciguilty9000qg0or24axjuqr"},{"post_id":"ciguiltya000sg0or10n926sx","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguiltyb000ug0orlmls9rzc"},{"post_id":"ciguiltyc000xg0ortnmg63oy","tag_id":"ciguiltyd000zg0or4xxt1t8w","_id":"ciguiltye0010g0orbjfvgiyx"},{"post_id":"ciguiltyc000xg0ortnmg63oy","tag_id":"ciguilty8000pg0or6b4tpidp","_id":"ciguiltye0012g0orhzzhb1od"},{"post_id":"ciguiltyf0013g0ors5yseg1b","tag_id":"ciguiltyd000zg0or4xxt1t8w","_id":"ciguiltyg0015g0orxwkimqln"},{"post_id":"ciguiltyk0018g0orv8law922","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguiltyl001ag0orgode90an"},{"post_id":"ciguiltyp001cg0ora7bjlx4w","tag_id":"ciguiltyd000zg0or4xxt1t8w","_id":"ciguiltyr001eg0oruuv78k72"},{"post_id":"ciguiltyt001gg0or9yflqkuo","tag_id":"ciguiltyv001ig0oruomro2ek","_id":"ciguiltyw001kg0orxkz8pqv4"},{"post_id":"ciguiltyx001ng0ornphf8wyg","tag_id":"ciguiltyy001pg0orqtumogu0","_id":"ciguiltyz001qg0orgagbozjq"},{"post_id":"ciguiltz0001sg0orxbwfbcw9","tag_id":"ciguiltz1001ug0orplf0yted","_id":"ciguiltz2001vg0orocz505kt"},{"post_id":"ciguiltz3001xg0oraiqg3z2x","tag_id":"ciguiltz1001ug0orplf0yted","_id":"ciguiltz5001zg0orig61zwok"},{"post_id":"ciguiltz50020g0oruq3lv83c","tag_id":"ciguiltz1001ug0orplf0yted","_id":"ciguiltz70022g0ork96ky57v"},{"post_id":"ciguiltz90024g0or91rbgn13","tag_id":"ciguiltyd000zg0or4xxt1t8w","_id":"ciguiltza0026g0or6262act1"},{"post_id":"ciguiltzb0027g0orz3pgsv2t","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguiltzc0029g0orlkfzpbv9"},{"post_id":"ciguiltzd002ag0oryf1yal4j","tag_id":"ciguiltze002cg0orl0d6v78f","_id":"ciguiltze002dg0orws17mr7u"},{"post_id":"ciguiltzf002fg0or2xgh6zv0","tag_id":"ciguiltyy001pg0orqtumogu0","_id":"ciguiltzg002hg0orbpu2wota"},{"post_id":"ciguiltzi002jg0orxlzbmlci","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguiltzi002lg0or24sk7iax"},{"post_id":"ciguiltzk002og0orah1esmnc","tag_id":"ciguiltz1001ug0orplf0yted","_id":"ciguiltzl002qg0orgvkm1wn0"},{"post_id":"ciguiltzm002rg0orqrebv00a","tag_id":"ciguiltz1001ug0orplf0yted","_id":"ciguiltzn002tg0orp6f1r0t7"},{"post_id":"ciguiltzo002ug0orxgyzx1gn","tag_id":"ciguiltzo002wg0org6wkwxyk","_id":"ciguiltzp002xg0orsgddlrxi"},{"post_id":"ciguiltzp002yg0orj4cuouxh","tag_id":"ciguiltyd000zg0or4xxt1t8w","_id":"ciguiltzq0030g0orcwpmbhti"},{"post_id":"ciguiltzr0031g0orykk72m3t","tag_id":"ciguiltz1001ug0orplf0yted","_id":"ciguiltzt0033g0orqzj6r2xb"},{"post_id":"ciguiltzu0034g0orcy5wf3yr","tag_id":"ciguiltzv0036g0oryhlkh9od","_id":"ciguiltzv0037g0or2tbrznyc"},{"post_id":"ciguiltzx0039g0orxkbqbj97","tag_id":"ciguiltzy003bg0or08w3bu2r","_id":"ciguiltzz003cg0or2xprmzdj"},{"post_id":"ciguilu03003dg0ortd40tfn6","tag_id":"ciguiltyv001ig0oruomro2ek","_id":"ciguilu04003fg0orxy60a1o4"},{"post_id":"ciguilu05003gg0orsmedgvk1","tag_id":"ciguiltx60002g0or269hkcxd","_id":"ciguilu06003jg0orsjmj0feb"},{"post_id":"ciguilu05003gg0orsmedgvk1","tag_id":"ciguilu06003ig0orqmx0lq9u","_id":"ciguilu06003kg0orio97f8de"},{"post_id":"ciguilu08003lg0or9fdqxe97","tag_id":"ciguilu0a003ng0orxv9gqqr0","_id":"ciguilu0b003og0orbq3jypsw"},{"post_id":"ciguilu0c003pg0or3ocmvnjr","tag_id":"ciguilu0d003rg0oreuxau65q","_id":"ciguilu0e003sg0ormj208abn"},{"post_id":"ciguilu0f003ug0orys0bocmw","tag_id":"ciguilu0g003wg0or6sgqtn6j","_id":"ciguilu0h003xg0or159y0pia"},{"post_id":"ciguiltxy0009g0orqu1fssnk","tag_id":"ciguilty1000cg0orsqe93jtt","_id":"ciguiol150001ieorrduawpe1"}],"Tag":[{"name":"Django","_id":"ciguiltx60002g0or269hkcxd"},{"name":"MySql","_id":"ciguilty1000cg0orsqe93jtt"},{"name":"Vim","_id":"ciguilty8000pg0or6b4tpidp"},{"name":"Linux","_id":"ciguiltyd000zg0or4xxt1t8w"},{"name":"Js","_id":"ciguiltyv001ig0oruomro2ek"},{"name":"Mysql","_id":"ciguiltyy001pg0orqtumogu0"},{"name":"Python","_id":"ciguiltz1001ug0orplf0yted"},{"name":"NodeJs","_id":"ciguiltze002cg0orl0d6v78f"},{"name":"Html","_id":"ciguiltzo002wg0org6wkwxyk"},{"name":"技术点滴","_id":"ciguiltzv0036g0oryhlkh9od"},{"name":"Markdown","_id":"ciguiltzy003bg0or08w3bu2r"},{"name":"Error","_id":"ciguilu06003ig0orqmx0lq9u"},{"name":"Css","_id":"ciguilu0a003ng0orxv9gqqr0"},{"name":"GitHub","_id":"ciguilu0d003rg0oreuxau65q"},{"name":"Git","_id":"ciguilu0g003wg0or6sgqtn6j"}]}}